
local Players = game:GetService("Players")
local Client = Players.LocalPlayer
local Camera = game.Workspace.CurrentCamera
local Workspace = game.Workspace

local ESP
ESP = {
    Settings = {
        BoxOutlineColor = Color3.new(0, 0, 0),
        BoxColor = Color3.new(1, 1, 1),
        NameColor = Color3.new(1, 1, 1),
        HealthOutlineColor = Color3.new(0, 0, 0),
        HealthHighColor = Color3.new(0, 1, 0),
        HealthLowColor = Color3.new(1, 0, 0),
        CharSize = Vector2.new(4, 6),
        Teamcheck = false,
        WallCheck = false,
        Enabled = false,
        ShowBox = false,
        BoxType = "2D",
        ShowName = false,
        ShowChams = false,
        ShowTool = false,
        ShowHealth = false,
        ShowDistance = false,
        ShowSkeletons = false,
        ShowTracer = false,
        TracerColor = Color3.fromRGB(98,105,188), 
        TracerThickness = 2,
        SkeletonsColor = Color3.new(1, 1, 1),
        TracerPosition = "Bottom",
        EspPreview = nil,
        SetEspPreview = false,
        ShowPreview = true,
        MonsterEspEnabled = false,
        UI = nil,
        Maps = {

        }
    },

    Cache = {},

    Bones = {
        R6 = {
            {"Head", "Torso"},
            {"Torso", "Left Arm"},
            {"Torso", "Left Leg"},
            {"Torso", "Right Arm"},
            {"Torso", "Right Leg"},
        },
        R15 = {
            {"Head", "UpperTorso"},
            {"UpperTorso", "RightUpperArm"},
            {"RightUpperArm", "RightLowerArm"},
            {"RightLowerArm", "RightHand"},
            {"UpperTorso", "LeftUpperArm"},
            {"LeftUpperArm", "LeftLowerArm"},
            {"LeftLowerArm", "LeftHand"},
            {"UpperTorso", "LowerTorso"},
            {"LowerTorso", "LeftUpperLeg"},
            {"LeftUpperLeg", "LeftLowerLeg"},
            {"LeftLowerLeg", "LeftFoot"},
            {"LowerTorso", "RightUpperLeg"},
            {"RightUpperLeg", "RightLowerLeg"},
            {"RightLowerLeg", "RightFoot"}
        }
    },
    

    Functions = {
        CreateDrawing = function(Class, Properties)
            if not Class or not Properties then return end


            local Drawing = Drawing.new(Class)
            for Property, X in Properties do
                Drawing[Property] = X
            end

            return Drawing
        end,

        IsPlayerMonster = function(Player)
            local Character = Player.Character or Player
            if Character then
                local Humanoid = Character:FindFirstChildOfClass("Humanoid")
                if Humanoid and Humanoid.Name == "Monster" or Character.Name == "Rake" then
                    return true
                end
            end

            return false
        end,

        SetAttribute = function(Object, Name, Value)
            if not Object:GetAttribute(Name) then
                Object:SetAttribute(Name, Value)
            end
        end,
        
        ApplyViewportChams = function(Character)
            SetAttribute = ESP.Functions.SetAttribute
            for _, X in Character:GetDescendants() do
                if X:IsA("Pants") or X:IsA("Shirt") then
                    X.Parent = Character.PrimaryPart
                elseif X:IsA("MeshPart") and not X:IsA("BasePart") or X.Parent:IsA("Accessory") and X:IsA("MeshPart") then
                    SetAttribute(X, "OldTexture", X.TextureID)
                    X.TextureID = ""
                    if X.Parent:IsA("Accessory") then
                        SetAttribute(X, "OldMColor", X.Color)
                        X.Color = Color3.fromHex("#a49ae6")
                    end
                elseif X.Name == "face" then
                    SetAttribute(X, "OldTexture", X.Texture)
                    X.Texture = ""
                elseif X:IsA("BasePart") then
                    SetAttribute(X, "OldColor", X.Color)
                    SetAttribute(X, "OldMaterial", X.Material)
                    X.Color = Color3.fromHex("#a49ae6")
                    X.Material = Enum.Material.Plastic
                end
            end
        end,

        RemoveViewportChams = function(Character)
            for _, X in Character:GetDescendants() do
                if X:GetAttribute("OldTexture") then
                    if X.Name == "face" then
                        X.Texture = X:GetAttribute("OldTexture")
                    else
                        X.TextureID = X:GetAttribute("OldTexture")
                    end
                elseif X:GetAttribute("OldColor") or X:GetAttribute("OldMaterial") then
                    X.Color = X:GetAttribute("OldColor")
                    X.Material = X:GetAttribute("OldMaterial")
                elseif X:IsA("Pants") or X:IsA("Shirt") then
                    X.Parent = Character
                elseif X:GetAttribute("OldMColor") then
                    X.Color = X:GetAttribute("OldMColor")
                end
            end
        end,


        PlayViewportAnimation = function()
            if ESP.Settings.EspPreview and ESP.Settings.EspPreview.Character then
                if ESP.Settings.PlayingAnimations then return end
                ESP.Settings.PlayingAnimations = true
                local Character = ESP.Settings.EspPreview.Character
                local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")

                local Animations = {
                    R6 = {180435571},--27789359, 30196114, 248263260, 45834924, 33796059, 28488254, 52155728
                    R15 = {507766666}--3333432454, 4555808220, 10713981723, 10714372526, 10714076981, 11444443576, 15693621070, 17360699557, 10714377090, 134283166482394
                }

                if Humanoid then
                    local RigType = Humanoid.RigType == Enum.HumanoidRigType.R6 and "R6" or "R15"
                    local AnimList = Animations[RigType]

                    task.spawn(function()
                        while ESP.Settings.PlayingAnimations and Character and Character.Parent do
                            task.wait()
                            for _, AnimationID in ipairs(AnimList) do
                                if not ESP.Settings.PlayingAnimations then break end

                                local Animation = Instance.new("Animation")
                                Animation.AnimationId = "rbxassetid://" .. AnimationID

                                local Track = Humanoid:LoadAnimation(Animation)
                                Track.Priority = Enum.AnimationPriority.Action
                                Track:Play()

                                local Duration = Track.Length > 0 and Track.Length or 2.5
                                task.wait(Duration)

                                Track:Stop()
                                Animation:Destroy()
                            end
                        end
                        ESP.Settings.PlayingAnimations = false
                    end)
                end
            end
        end,

        CharacterToViewport3D = function(Viewport, Point3D)
            local Camera = Viewport.CurrentCamera
            local FOV = math.rad(Camera.FieldOfView)
            local Aspect = Viewport.AbsoluteSize.X / Viewport.AbsoluteSize.Y

            local CameraInSpace = Camera.CFrame:pointToObjectSpace(Point3D)

            if CameraInSpace.Z >= 0 then
                return nil
            end

            local X = (CameraInSpace.X / -CameraInSpace.Z) / math.tan(FOV / 2) / Aspect
            local Y = (CameraInSpace.Y / -CameraInSpace.Z) / math.tan(FOV / 2)

            local Pixel = {
                X = nil,
                Y = nil,
                Onscreen = false
            }

            Pixel.X = (X * 0.5 + 0.5) * Viewport.AbsoluteSize.X + Viewport.AbsolutePosition.X
            Pixel.Y = (-Y * 0.5 + 0.5) * Viewport.AbsoluteSize.Y + Viewport.AbsolutePosition.Y

            return Vector2.new(Pixel.X, Pixel.Y)
        end,

        CacheEsp = function(Player)
            local FunctionDirectory = ESP.Functions
            local SettingsDirectory = ESP.Settings
 
            
            local Main = {
                tracer = FunctionDirectory.CreateDrawing("Line", {
                    Thickness = SettingsDirectory.TracerThickness,
                    Color = SettingsDirectory.TracerColor,
                    Transparency = 0.5  
                }),

                boxOutline = FunctionDirectory.CreateDrawing("Square", {
                    Color = SettingsDirectory.BoxOutlineColor,
                    Thickness = 3,
                    Filled = false
                }),

                box = FunctionDirectory.CreateDrawing("Square", {
                    Color = SettingsDirectory.BoxColor,
                    Thickness = 1,
                    Filled = false                    
                }),

                name = FunctionDirectory.CreateDrawing("Text", {
                    Color = SettingsDirectory.NameColor,
                    Outline = true,
                    Center = true,
                    Size = 13.5,
                    Font = Drawing.Fonts.Monospace
                }),

                healthOutline = FunctionDirectory.CreateDrawing("Line", {
                    Thickness = 3,
                    Color = SettingsDirectory.HealthOutlineColor
                }),

                health = FunctionDirectory.CreateDrawing("Line", {
                    Thickness = 2
                }),

                distance = FunctionDirectory.CreateDrawing("Text", {
                    Color = Color3.new(1, 1, 1),
                    Size = 13.5,
                    Outline = true,
                    Center = true,
                    Font = Drawing.Fonts.Monospace
                }),

                tool = FunctionDirectory.CreateDrawing("Text", {
                    Color = Color3.new(1, 1, 1),
                    Size = 13.5,
                    Outline = true,
                    Center = true,
                    Font = Drawing.Fonts.Monospace
                }),

                boxLines = {}
            }

            
            ESP.Cache[Player] = Main
            ESP.Cache[Player]["skeletonlines"] = {}
        end,

        RemoveEsp = function(Player)
            local X = ESP.Cache[Player]
            if not X then return end
        
            for _, drawing in pairs(X) do
                if drawing and drawing.Remove then
                drawing:Remove()
               end
            end
        
            ESP.Cache[Player] = nil
        end,

        ClearPreview = function()
            if ESP.Settings.EspPreview then
                ESP.Functions.RemoveEsp(ESP.Settings.EspPreview.Character)
                ESP.Settings.EspPreview = nil
            end
        end,

        IsPlayerBehindWall = function(Player)
            local Character = Player.Character
            if not Character then return false end

            local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart") or Character:FindFirstChild("Body")
            if not HumanoidRootPart then return false end

            local Ray = Ray.new(Camera.CFrame.Position, (HumanoidRootPart.Position - Camera.CFrame.Position).Unit * (HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude)
            local Hit, Position = Workspace:FindPartOnRayWithIgnoreList(Ray, {Client.Character, Character})
            
            return Hit and Hit:IsA("Part")
        end,

        UpdateEsp = function() -- // Main ESP function
            local oldthreadidentity = getthreadidentity()
            setthreadidentity(8)
            local ESP_SETTINGS = ESP.Settings
            if not ESP_SETTINGS.SetEspPreview and ESP_SETTINGS.EspPreview ~= nil then
                if not ESP.Cache[ESP_SETTINGS.EspPreview.Character] then
                    ESP.Functions.CacheEsp(ESP_SETTINGS.EspPreview.Character)
                    ESP_SETTINGS.SetEspPreview = true
                end
            end

            for Player, Esp in pairs(ESP.Cache) do
                local Character = Player
                local Team = nil
                local isPreview = false
                local Viewport = nil

                if Player:IsA("Player") then
                    Character = Player.Character
                    Team = Player.Team
                else    
                    isPreview = true
                end

                if isPreview and Character then
                    ESP.Functions.PlayViewportAnimation()
                    Camera = ESP_SETTINGS.EspPreview.Viewport.CurrentCamera
                    Viewport = ESP_SETTINGS.EspPreview.Viewport
                else
                    Camera = game.Workspace.CurrentCamera
                end

                local esp = Esp
                local camera = Camera
                local localPlayer = Client
                local player = Player


                    if Character and (not ESP.Settings.Teamcheck or (Team and Team ~= Client.Team)) and (isPreview and (ESP_SETTINGS.UI ~= nil and ESP_SETTINGS.UI:IsActive())  or not isPreview) then
                    local RootPart = Character:FindFirstChild("UpperTorso") or Character:FindFirstChild("Torso") or Character:FindFirstChild("HumanoidRootPart") or Character:FindFirstChild("Body") or Character.PrimaryPart
                    local Head = Character:FindFirstChild("MouthPart") or Character:FindFirstChild("Body") or Character:FindFirstChild("Head") or Character:FindFirstChild("Eyes") or Character:FindFirstChild("Jaw") or Character:FindFirstChild("FakeHead") or Character.PrimaryPart
                    local Humanoid = Character:FindFirstChild("Humanoid")
                    --local IsBehindWall = ESP.Settings.WallCheck and ESP.Functions.IsPlayerBehindWall(Player)


                    local rootPart = RootPart
                    local ismonster = ESP.Functions.IsPlayerMonster(Player)
                    local domonsteresp = ESP_SETTINGS.MonsterEspEnabled and ismonster
                    local boxcolor = (not domonsteresp and ESP_SETTINGS.BoxColor) or (domonsteresp and Color3.fromRGB(245,0,0))

                    
                    if RootPart and Head and ((isPreview and ESP_SETTINGS.ShowPreview) or not isPreview) then
                        local screenPos, OnScreen = Camera:WorldToViewportPoint(RootPart and RootPart.Position)  

                        if OnScreen then
                          local Hrp2D
                          if isPreview then
                              Hrp2D = ESP.Functions.CharacterToViewport3D(Viewport, RootPart.Position)
                          else
                              Hrp2D = Camera:WorldToViewportPoint(RootPart.Position)
                          end

                          local CharSize = (Camera:WorldToViewportPoint(RootPart.Position - Vector3.new(0, 3, 0)).Y 
                                            - Camera:WorldToViewportPoint(RootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2 + (isPreview and 90 or 0)

                          local boxSize = Vector2.new(math.floor(CharSize * 1.8), math.floor(CharSize * 1.9))

                          local yOffset = isPreview and 58 or 0

                          local boxPosition = Vector2.new(
                            math.floor(Hrp2D.X - CharSize * 1.8 / 2),
                            math.floor(Hrp2D.Y - CharSize * 1.6 / 2 + yOffset)
                        )


                            local hrp2D = Hrp2D

                            if ESP_SETTINGS.ShowChams and ESP_SETTINGS.Enabled then
                                if isPreview then
                                    if not esp.viewportChams then
                                        ESP.Functions.ApplyViewportChams(Player)
                                        esp.viewportChams = true
                                    end
                                else
                                    if not esp.highlight then
                                        esp.highlight = Instance.new("Highlight")
                                        esp.highlight.Parent = Character
                                        esp.highlight.FillTransparency = 0
                                        esp.highlight.FillColor = Color3.fromHex("#a49ae6")
                                        esp.highlight.OutlineTransparency = 1
                                    end
                                    esp.highlight.Enabled = true
                                end
                            else
                                if isPreview then
                                    if esp.viewportChams then
                                        ESP.Functions.RemoveViewportChams(Player)
                                        esp.viewportChams = nil
                                    end
                                else
                                    if esp.highlight then
                                        esp.highlight.Enabled = false
                                    end
                                end
                            end


        
                            if ESP_SETTINGS.ShowName and ESP_SETTINGS.Enabled then
                                esp.name.Visible = true
                                esp.name.Text = isPreview and "Insomnia" or player.Name
                                esp.name.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y - 16)
                                esp.name.Color = ESP_SETTINGS.NameColor
                            else
                                esp.name.Visible = false
                            end
        
                            if ESP_SETTINGS.ShowBox and ESP_SETTINGS.Enabled then
                                if ESP_SETTINGS.BoxType == "2D" then
                                    esp.boxOutline.Size = boxSize
                                    esp.boxOutline.Position = boxPosition
                                    esp.box.Size = boxSize
                                    esp.box.Position = boxPosition
                                    esp.box.Color = boxcolor
                                    esp.box.Visible = true
                                    esp.boxOutline.Visible = true
                                    for _, line in ipairs(esp.boxLines) do
                                        line:Remove()
                                    end
                                    esp.boxLines = {}
                                elseif ESP_SETTINGS.BoxType == "Corner Box Esp" then
                                    local lineW = (boxSize.X / 5)
                                    local lineH = (boxSize.Y / 6)
                                    local lineT = 1
            
                                    if #esp.boxLines == 0 then
                                        for i = 1, 16 do
                                            local boxLine = ESP.Functions.CreateDrawing("Line", {
                                                Thickness = 2.5,
                                                Color = ESP_SETTINGS.BoxColor,
                                                Transparency = 1
                                            })
                                            esp.boxLines[#esp.boxLines + 1] = boxLine
                                        end
                                    end
            
                                    local boxLines = esp.boxLines
            
                                    -- top left
                                    boxLines[1].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y - lineT)
                                    boxLines[1].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y - lineT)
            
                                    boxLines[2].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y - lineT)
                                    boxLines[2].To = Vector2.new(boxPosition.X - lineT, boxPosition.Y + lineH)
            
                                    -- top right
                                    boxLines[3].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y - lineT)
                                    boxLines[3].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y - lineT)
            
                                    boxLines[4].From = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y - lineT)
                                    boxLines[4].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + lineH)
            
                                    -- bottom left
                                    boxLines[5].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y + boxSize.Y - lineH)
                                    boxLines[5].To = Vector2.new(boxPosition.X - lineT, boxPosition.Y + boxSize.Y + lineT)
            
                                    boxLines[6].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y + boxSize.Y + lineT)
                                    boxLines[6].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y + boxSize.Y + lineT)
            
                                    -- bottom right
                                    boxLines[7].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y + boxSize.Y + lineT)
                                    boxLines[7].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + boxSize.Y + lineT)
            
                                    boxLines[8].From = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + boxSize.Y - lineH)
                                    boxLines[8].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + boxSize.Y + lineT)
            
                                    -- inline
                                    for i = 9, 16 do
                                        boxLines[i].Thickness = 2
                                        boxLines[i].Color = ESP_SETTINGS.BoxOutlineColor
                                        boxLines[i].Transparency = 1
                                    end
            
                                    boxLines[9].From = Vector2.new(boxPosition.X, boxPosition.Y)
                                    boxLines[9].To = Vector2.new(boxPosition.X, boxPosition.Y + lineH)
            
                                    boxLines[10].From = Vector2.new(boxPosition.X, boxPosition.Y)
                                    boxLines[10].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y)
            
                                    boxLines[11].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y)
                                    boxLines[11].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)
            
                                    boxLines[12].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)
                                    boxLines[12].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + lineH)
            
                                    boxLines[13].From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y - lineH)
                                    boxLines[13].To = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)
            
                                    boxLines[14].From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)
                                    boxLines[14].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y + boxSize.Y)
            
                                    boxLines[15].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y + boxSize.Y)
                                    boxLines[15].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)
            
                                    boxLines[16].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y - lineH)
                                    boxLines[16].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)
            
                                    for _, line in ipairs(boxLines) do
                                        line.Visible = true
                                    end
                                    esp.box.Visible = false
                                    esp.boxOutline.Visible = false
                                end
                            else
                                esp.box.Visible = false
                                esp.boxOutline.Visible = false
                                for _, line in ipairs(esp.boxLines) do
                                    line:Remove()
                                end
                                esp.boxLines = {}
                            end
        
                            if ESP_SETTINGS.ShowHealth and ESP_SETTINGS.Enabled then
                                esp.healthOutline.Visible = true
                                esp.health.Visible = true
                                
                                local humanoid = Character:FindFirstChildOfClass("Humanoid")
                                local CurrentHealth = humanoid and humanoid.Health or player:GetAttribute("Health") or 0
                                local MaxHealth = humanoid and humanoid.MaxHealth or player:GetAttribute("MaxHealth") or 0
                            
                                if MaxHealth == 0 then
                                    MaxHealth = 1 
                                end
                            
                                local healthPercentage = math.clamp(CurrentHealth / MaxHealth, 0, 1)
                            
                                esp.healthOutline.From = Vector2.new(boxPosition.X - 6, boxPosition.Y + boxSize.Y)
                                esp.healthOutline.To = Vector2.new(esp.healthOutline.From.X, esp.healthOutline.From.Y - boxSize.Y)
                                
                                esp.health.From = Vector2.new((boxPosition.X - 5), boxPosition.Y + boxSize.Y)
                                esp.health.To = Vector2.new(esp.health.From.X, esp.health.From.Y - healthPercentage * boxSize.Y)
                            
                                esp.health.Color = ESP_SETTINGS.HealthLowColor:Lerp(ESP_SETTINGS.HealthHighColor, healthPercentage)
                            else
                                esp.healthOutline.Visible = false
                                esp.health.Visible = false
                            end
        
                            local nextY = boxPosition.Y + boxSize.Y + 5

                            if ESP_SETTINGS.ShowDistance and ESP_SETTINGS.Enabled then
                                local distance = math.floor((camera.CFrame.p - rootPart.Position).Magnitude)
                                if distance <= 15 then
                                    distance = "Nearby"
                                else
                                    distance = distance .. "s"
                                end

                                esp.distance.Text = distance
                                esp.distance.Position = Vector2.new(boxPosition.X + boxSize.X / 2, nextY)
                                esp.distance.Visible = true
                                nextY = nextY + 15 
                            else
                                esp.distance.Visible = false
                            end

                            if ESP_SETTINGS.ShowTool and ESP_SETTINGS.Enabled then
                                local tool = Character:FindFirstChildOfClass("Tool")
                                esp.tool.Text = tool and (ESP_SETTINGS.Maps[tool.Name] or tool.Name) or ""
                                esp.tool.Position = Vector2.new(boxPosition.X + boxSize.X / 2, nextY)
                                esp.tool.Visible = true
                            else
                                esp.tool.Visible = false
                            end

        
                            if ESP_SETTINGS.ShowSkeletons and ESP_SETTINGS.Enabled then
                                if #esp["skeletonlines"] == 0 then
                                    local Type = "R6"
                                    local humanoid = Character:FindFirstChildOfClass("Humanoid")
                                    if humanoid and humanoid.RigType == Enum.HumanoidRigType.R15 then
                                        Type = "R15"
                                    end

                                    for _, bonePair in ipairs(ESP.Bones[Type]) do
                                        local parentBone, childBone = bonePair[1], bonePair[2]
            
                                        if Character and Character:FindFirstChild(parentBone) and Character:FindFirstChild(childBone) then
                                            local skeletonLine = ESP.Functions.CreateDrawing("Line", {
                                                Thickness = 1,
                                                Color = ESP_SETTINGS.SkeletonsColor,
                                                Transparency = 1
                                            })
                                            esp["skeletonlines"][#esp["skeletonlines"] + 1] = {skeletonLine, parentBone, childBone}
                                        end
                                    end
                                end

                                for _, lineData in ipairs(esp["skeletonlines"]) do
                                    local skeletonLine = lineData[1]
                                    local parentBone, childBone = lineData[2], lineData[3]

                                    if Character and Character:FindFirstChild(parentBone) and Character:FindFirstChild(childBone) then
                                        pcall(function()
                                            local parentPosition, childPosition
                
                                            if isPreview then
                                                parentPosition = ESP.Functions.CharacterToViewport3D(
                                                    Viewport,
                                                    Character[parentBone].Position
                                                )
                                                childPosition = ESP.Functions.CharacterToViewport3D(
                                                    Viewport,
                                                    Character[childBone].Position
                                                )
                                            else
                                                parentPosition = camera:WorldToViewportPoint(Character[parentBone].Position)
                                                childPosition = camera:WorldToViewportPoint(Character[childBone].Position)
                                            end

                                            local yOffset = 0
                                            if isPreview then
                                                yOffset = 58
                                            end

                                            if parentPosition and childPosition then
                                                skeletonLine.From = Vector2.new(parentPosition.X, parentPosition.Y + yOffset)
                                                skeletonLine.To = Vector2.new(childPosition.X, childPosition.Y + yOffset)
                                                skeletonLine.Color = ESP_SETTINGS.SkeletonsColor
                                                skeletonLine.Visible = true
                                            else
                                                skeletonLine.Visible = false
                                            end
                                        end)
                                    else
                                        skeletonLine:Remove()
                                        esp["skeletonlines"][_] = nil
                                    end
                                end
                            else
                                for _, lineData in ipairs(esp["skeletonlines"]) do
                                    local skeletonLine = lineData[1]
                                    skeletonLine:Remove()
                                end
                                esp["skeletonlines"] = {}
                            end                                            
                            if ESP_SETTINGS.ShowTracer and ESP_SETTINGS.Enabled then
                                local tracerY
                                if ESP_SETTINGS.TracerPosition == "Top" then
                                    tracerY = isPreview and 0 or camera.ViewportSize.Y * 0
                                elseif ESP_SETTINGS.TracerPosition == "Middle" then
                                    tracerY = isPreview and (Viewport.AbsoluteSize.Y / 2) or (camera.ViewportSize.Y / 2)
                                else
                                    tracerY = isPreview and Viewport.AbsoluteSize.Y or camera.ViewportSize.Y
                                end

                                if ESP_SETTINGS.Teamcheck and player.TeamColor == localPlayer.TeamColor then
                                    esp.tracer.Visible = false
                                else
                                    esp.tracer.Visible = true
                                    local centerX = isPreview and (Viewport.AbsoluteSize.X / 2) or (camera.ViewportSize.X / 2)
                                    esp.tracer.From = Vector2.new(centerX, tracerY)
                                    esp.tracer.To = Vector2.new(hrp2D.X, hrp2D.Y + (isPreview and yOffset or 0))
                                end
                            else
                                esp.tracer.Visible = false
                            end
                        else
                            for _, drawing in pairs(esp) do
                                if typeof(drawing) == "Instance" and drawing:IsA("Highlight") then
                                    drawing.Enabled = false
                                elseif typeof(drawing):lower() ~= "boolean" then
                                    drawing.Visible = false
                                end
                            end                                
                            for _, lineData in ipairs(esp["skeletonlines"]) do
                                local skeletonLine = lineData[1]
                                skeletonLine:Remove()
                            end
                            if isPreview then
                                ESP.Functions.RemoveViewportChams(Player)
                            end
                            esp["skeletonlines"] = {}
                            for _, line in ipairs(esp.boxLines) do
                                line:Remove()
                            end
                            esp.boxLines = {}
                        end
                    else
                        for _, drawing in pairs(esp) do
                            if typeof(drawing) == "Instance" and drawing:IsA("Highlight") then
                                drawing.Enabled = false
                            elseif typeof(drawing):lower() ~= "boolean" then
                                drawing.Visible = false
                            end
                        end                                
                        for _, lineData in ipairs(esp["skeletonlines"]) do
                            local skeletonLine = lineData[1]
                            skeletonLine:Remove()
                        end
                        if isPreview then
                            ESP.Functions.RemoveViewportChams(Player)
                        end
                        esp["skeletonlines"] = {}
                        for _, line in ipairs(esp.boxLines) do
                            line:Remove()
                        end
                        esp.boxLines = {}
                    end
                else
                    for _, drawing in pairs(esp) do
                        if typeof(drawing) == "Instance" and drawing:IsA("Highlight") then
                            drawing.Enabled = false
                        elseif typeof(drawing):lower() ~= "boolean" then
                            drawing.Visible = false
                        end
                    end                                
                    for _, lineData in ipairs(esp["skeletonlines"]) do
                        local skeletonLine = lineData[1]
                        skeletonLine:Remove()
                    end
                    if isPreview then
                        ESP.Functions.RemoveViewportChams(Player)
                    end
                    esp["skeletonlines"] = {}
                    for _, line in ipairs(esp.boxLines) do
                        line:Remove()
                    end
                    esp.boxLines = {}
                end
            end
            setthreadidentity(oldthreadidentity)
        end,
    }
}

task.spawn(function()
    repeat 
        task.wait(0.01)
    until ESP.Settings.EspPreview ~= nil and ESP.Settings.EspPreview.Character ~= nil and ESP.Settings.EspPreview.Character:FindFirstChildOfClass("Humanoid")
    ESP.Functions.PlayViewportAnimation()
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= Client then
        ESP.Functions.CacheEsp(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= Client then
        ESP.Functions.CacheEsp(player)
    end
end)

Players.PlayerRemoving:Connect(ESP.Functions.RemoveEsp)

return ESP
