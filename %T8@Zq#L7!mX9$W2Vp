UpdateEsp = function()
    local oldthreadidentity = getthreadidentity()
    setthreadidentity(8)

    local ESP_SETTINGS = ESP.Settings
    if ESP_SETTINGS.EspPreview and not ESP_SETTINGS.SetEspPreview then
        ESP.Functions.CacheEsp(ESP_SETTINGS.EspPreview.Character)
    end

    for Player, esp in pairs(ESP.Cache) do
        local Character = Player
        local Team = nil
        local isPreview = false
        local Viewport = nil

        if Player:IsA("Player") then
            Character = Player.Character
            Team = Player.Team
        else
            isPreview = true
        end

        local Camera
        if isPreview and Character then
            Camera = ESP_SETTINGS.EspPreview.Viewport.CurrentCamera
            Viewport = ESP_SETTINGS.EspPreview.Viewport
        else
            Camera = workspace.CurrentCamera
        end

        local localPlayer = Client
        local player = Player

        if Character and (not ESP_SETTINGS.Teamcheck or (Team and Team ~= localPlayer.Team)) then
            local RootPart = Character:FindFirstChild("Torso") or Character:FindFirstChild("HumanoidRootPart") or Character:FindFirstChild("Body")
            local Head = Character:FindFirstChild("MouthPart") or Character:FindFirstChild("Body") or Character:FindFirstChild("Head") or Character:FindFirstChild("Eyes") or Character:FindFirstChild("Jaw") or Character:FindFirstChild("FakeHead")
            local Humanoid = Character:FindFirstChild("Humanoid")
            local ShouldShow = true

            if RootPart and Head and ShouldShow then
                local screenPos, OnScreen = Camera:WorldToViewportPoint(RootPart.Position)
                if OnScreen then
                    local Hrp2D
                    if isPreview then
                        Hrp2D = ESP.Functions.CharacterToViewport3D(Viewport, RootPart.Position)
                    else
                        Hrp2D = Camera:WorldToViewportPoint(RootPart.Position)
                    end

                    local CharSize = (Camera:WorldToViewportPoint(RootPart.Position - Vector3.new(0, 3, 0)).Y - Camera:WorldToViewportPoint(RootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2 + (isPreview and 90 or 0)

                    local boxSize = Vector2.new(math.floor(CharSize * 1.8), math.floor(CharSize * 1.9))

                    local yOffset = isPreview and 55 or 0

                    local boxPosition = Vector2.new(
                        math.floor(Hrp2D.X - boxSize.X / 2),
                        math.floor(Hrp2D.Y - CharSize * 1.6 / 2 + yOffset)
                    )

                    -- Highlight
                    if ESP_SETTINGS.ShowChams and ESP_SETTINGS.Enabled then
                        if not esp.highlight then
                            esp.highlight = Instance.new("Highlight")
                            esp.highlight.Parent = Character
                            esp.highlight.FillTransparency = 0
                            esp.highlight.FillColor = Color3.fromHex("#a49ae6")
                            esp.highlight.OutlineTransparency = 1
                        end
                        esp.highlight.Enabled = true
                    else
                        if esp.highlight then
                            esp.highlight.Enabled = false
                        end
                    end

                    -- Name
                    if ESP_SETTINGS.ShowName and ESP_SETTINGS.Enabled then
                        esp.name.Visible = true
                        esp.name.Text = string.lower(player.Name)
                        esp.name.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y - 16)
                        esp.name.Color = ESP_SETTINGS.NameColor
                    else
                        esp.name.Visible = false
                    end

                    -- Box
                    if ESP_SETTINGS.ShowBox and ESP_SETTINGS.Enabled then
                        if ESP_SETTINGS.BoxType == "2D" then
                            esp.boxOutline.Size = boxSize
                            esp.boxOutline.Position = boxPosition
                            esp.box.Size = boxSize
                            esp.box.Position = boxPosition
                            esp.box.Color = ESP_SETTINGS.BoxColor
                            esp.box.Visible = true
                            esp.boxOutline.Visible = true
                            if esp.boxLines then
                                for _, line in ipairs(esp.boxLines) do
                                    line:Destroy()
                                end
                            end
                            esp.boxLines = {}
                        elseif ESP_SETTINGS.BoxType == "Corner Box Esp" then
                            local lineW = boxSize.X / 5
                            local lineH = boxSize.Y / 6
                            local lineT = 1

                            if not esp.boxLines or #esp.boxLines == 0 then
                                esp.boxLines = {}
                                for i = 1, 16 do
                                    local boxLine = ESP.Functions.CreateDrawing("Line", {
                                        Thickness = 2.5,
                                        Color = ESP_SETTINGS.BoxColor,
                                        Transparency = 1
                                    })
                                    esp.boxLines[#esp.boxLines + 1] = boxLine
                                end
                            end

                            local boxLines = esp.boxLines

                            -- top left
                            boxLines[1].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y - lineT)
                            boxLines[1].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y - lineT)

                            boxLines[2].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y - lineT)
                            boxLines[2].To = Vector2.new(boxPosition.X - lineT, boxPosition.Y + lineH)

                            -- top right
                            boxLines[3].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y - lineT)
                            boxLines[3].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y - lineT)

                            boxLines[4].From = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y - lineT)
                            boxLines[4].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + lineH)

                            -- bottom left
                            boxLines[5].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y + boxSize.Y - lineH)
                            boxLines[5].To = Vector2.new(boxPosition.X - lineT, boxPosition.Y + boxSize.Y + lineT)

                            boxLines[6].From = Vector2.new(boxPosition.X - lineT, boxPosition.Y + boxSize.Y + lineT)
                            boxLines[6].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y + boxSize.Y + lineT)

                            -- bottom right
                            boxLines[7].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y + boxSize.Y + lineT)
                            boxLines[7].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + boxSize.Y + lineT)

                            boxLines[8].From = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + boxSize.Y - lineH)
                            boxLines[8].To = Vector2.new(boxPosition.X + boxSize.X + lineT, boxPosition.Y + boxSize.Y + lineT)

                            -- inline lines 9-16
                            for i = 9, 16 do
                                boxLines[i].Thickness = 2
                                boxLines[i].Color = ESP_SETTINGS.BoxOutlineColor
                                boxLines[i].Transparency = 1
                            end

                            boxLines[9].From = Vector2.new(boxPosition.X, boxPosition.Y)
                            boxLines[9].To = Vector2.new(boxPosition.X, boxPosition.Y + lineH)

                            boxLines[10].From = Vector2.new(boxPosition.X, boxPosition.Y)
                            boxLines[10].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y)

                            boxLines[11].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y)
                            boxLines[11].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)

                            boxLines[12].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)
                            boxLines[12].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + lineH)

                            boxLines[13].From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y - lineH)
                            boxLines[13].To = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)

                            boxLines[14].From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)
                            boxLines[14].To = Vector2.new(boxPosition.X + lineW, boxPosition.Y + boxSize.Y)

                            boxLines[15].From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y + boxSize.Y)
                            boxLines[15].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)

                            boxLines[16].From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y - lineH)
                            boxLines[16].To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)

                            for _, line in ipairs(boxLines) do
                                line.Visible = true
                            end
                            esp.box.Visible = false
                            esp.boxOutline.Visible = false
                        end
                    else
                        esp.box.Visible = false
                        esp.boxOutline.Visible = false
                        if esp.boxLines then
                            for _, line in ipairs(esp.boxLines) do
                                line.Visible = false
                            end
                        end
                    end

                    -- Skeleton
                    if ESP_SETTINGS.ShowSkeleton and ESP_SETTINGS.Enabled and esp.skeleton then
                        local function GetBonePosition(boneName)
                            local bone = Character:FindFirstChild(boneName)
                            if bone then
                                return Camera:WorldToViewportPoint(bone.Position)
                            end
                            return nil
                        end

                        local isR15 = (Humanoid and Humanoid.RigType == Enum.HumanoidRigType.R15)
                        local boneNames = isR15 and {
                            "Head", "UpperTorso", "LowerTorso",
                            "LeftUpperArm", "LeftLowerArm", "LeftHand",
                            "RightUpperArm", "RightLowerArm", "RightHand",
                            "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
                            "RightUpperLeg", "RightLowerLeg", "RightFoot"
                        } or {
                            "Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"
                        }

                        local function DrawBoneLine(boneA, boneB, index)
                            local posA = GetBonePosition(boneA)
                            local posB = GetBonePosition(boneB)
                            if posA and posB then
                                local line = esp.skeleton[index]
                                if line then
                                    line.From = Vector2.new(posA.X, posA.Y)
                                    line.To = Vector2.new(posB.X, posB.Y)
                                    line.Visible = true
                                    line.Color = ESP_SETTINGS.SkeletonColor
                                end
                            end
                        end

                        if isR15 then
                            -- R15 skeleton lines
                            DrawBoneLine("Head", "UpperTorso", 1)
                            DrawBoneLine("UpperTorso", "LowerTorso", 2)
                            DrawBoneLine("UpperTorso", "LeftUpperArm", 3)
                            DrawBoneLine("LeftUpperArm", "LeftLowerArm", 4)
                            DrawBoneLine("LeftLowerArm", "LeftHand", 5)
                            DrawBoneLine("UpperTorso", "RightUpperArm", 6)
                            DrawBoneLine("RightUpperArm", "RightLowerArm", 7)
                            DrawBoneLine("RightLowerArm", "RightHand", 8)
                            DrawBoneLine("LowerTorso", "LeftUpperLeg", 9)
                            DrawBoneLine("LeftUpperLeg", "LeftLowerLeg", 10)
                            DrawBoneLine("LeftLowerLeg", "LeftFoot", 11)
                            DrawBoneLine("LowerTorso", "RightUpperLeg", 12)
                            DrawBoneLine("RightUpperLeg", "RightLowerLeg", 13)
                            DrawBoneLine("RightLowerLeg", "RightFoot", 14)
                        else
                            -- R6 skeleton lines
                            DrawBoneLine("Head", "Torso", 1)
                            DrawBoneLine("Torso", "Left Arm", 2)
                            DrawBoneLine("Torso", "Right Arm", 3)
                            DrawBoneLine("Torso", "Left Leg", 4)
                            DrawBoneLine("Torso", "Right Leg", 5)
                        end
                    else
                        if esp.skeleton then
                            for _, line in ipairs(esp.skeleton) do
                                line.Visible = false
                            end
                        end
                    end

                    -- Distance
                    if ESP_SETTINGS.ShowDistance and ESP_SETTINGS.Enabled then
                        esp.distance.Visible = true
                        local distance = (RootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                        esp.distance.Text = string.format("%.1f m", distance)
                        esp.distance.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y + boxSize.Y + 4)
                        esp.distance.Color = ESP_SETTINGS.DistanceColor
                    else
                        esp.distance.Visible = false
                    end

                    -- Health Bar
                    if ESP_SETTINGS.ShowHealth and ESP_SETTINGS.Enabled and Humanoid then
                        local healthPercent = math.clamp(Humanoid.Health / Humanoid.MaxHealth, 0, 1)
                        esp.healthBar.Visible = true
                        esp.healthBar.Size = Vector2.new(3, boxSize.Y * healthPercent)
                        esp.healthBar.Position = Vector2.new(boxPosition.X - 5, boxPosition.Y + boxSize.Y - (boxSize.Y * healthPercent))
                        esp.healthBar.Color = ESP_SETTINGS.HealthColor
                    else
                        esp.healthBar.Visible = false
                    end
                else
                    -- Offscreen - hide ESP elements
                    esp.box.Visible = false
                    esp.boxOutline.Visible = false
                    esp.name.Visible = false
                    esp.distance.Visible = false
                    esp.healthBar.Visible = false
                    if esp.highlight then
                        esp.highlight.Enabled = false
                    end
                    if esp.skeleton then
                        for _, line in ipairs(esp.skeleton) do
                            line.Visible = false
                        end
                    end
                    if esp.boxLines then
                        for _, line in ipairs(esp.boxLines) do
                            line.Visible = false
                        end
                    end
                end
            else
                -- Missing body parts or character
                esp.box.Visible = false
                esp.boxOutline.Visible = false
                esp.name.Visible = false
                esp.distance.Visible = false
                esp.healthBar.Visible = false
                if esp.highlight then
                    esp.highlight.Enabled = false
                end
                if esp.skeleton then
                    for _, line in ipairs(esp.skeleton) do
                        line.Visible = false
                    end
                end
                if esp.boxLines then
                    for _, line in ipairs(esp.boxLines) do
                        line.Visible = false
                    end
                end
            end
        else
            -- Character doesn't exist or team check failed
            esp.box.Visible = false
            esp.boxOutline.Visible = false
            esp.name.Visible = false
            esp.distance.Visible = false
            esp.healthBar.Visible = false
            if esp.highlight then
                esp.highlight.Enabled = false
            end
            if esp.skeleton then
                for _, line in ipairs(esp.skeleton) do
                    line.Visible = false
                end
            end
            if esp.boxLines then
                for _, line in ipairs(esp.boxLines) do
                    line.Visible = false
                end
            end
        end
    end

    setthreadidentity(oldthreadidentity)
end
