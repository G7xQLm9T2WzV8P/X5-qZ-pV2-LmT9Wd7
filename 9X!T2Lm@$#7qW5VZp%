-- ++++++++ WAX BUNDLED DATA BELOW ++++++++ --

-- Will be used later for getting flattened globals
local ImportGlobals

-- Holds direct closure data (defining this before the DOM tree for line debugging etc)
local ClosureBindings = {
    function()local wax,script,require=ImportGlobals(1)local ImportGlobals return (function(...)local Bundles = require(script.Bundles)
local data = Bundles.data
local theme = Bundles.themeSystem
local services = Bundles.services
local HttpService = services.HttpService
local RunService = services.RunService
local UserInputService = services.UserInputService
local fusion = Bundles.Fusion

local utilities = require(script.utilities)
local references = utilities.references
local connections = utilities.connections
local customFunctions = utilities.customFunctions
local randomString = utilities.randomString
local get = utilities.get
local typecheck = utilities.typecheck

local mainLayout = require(script.layouts.main)
local flagCreator = require(script.Bundles.flags)
local setWarnTitle = require(script.components.warn)[2]

-- VERSION
local VERSION = "1.3.5"
-- VERSION	

local function addComponent(name, parent, properties)
	properties.Parent = parent
	return require(script.components[name])(properties)
end

local createSide
function createSide(tab, parent)
	local components = {}
	components.Parent = parent
	function components:Button(property)
		return addComponent("button", components.Parent, property)
	end
	function components:Toggle(property)
		return addComponent("toggle", components.Parent, property)
	end
	function components:Keybind(property)
		return addComponent("keybind", components.Parent, property)
	end
	function components:Dropdown(property)
		return addComponent("dropdown", components.Parent, property)
	end
	function components:Label(string, isTitle)
		return addComponent("label", components.Parent, {Text = string, Title = isTitle})
	end
	function components:TextBox(property)
		return addComponent("textbox", components.Parent, property)
	end
	function components:Slider(property)
		return addComponent("slider", components.Parent, property)
	end
	function components:Divider()
		return addComponent("divider", components.Parent, {})
	end
	function components:KeybindList()
		return addComponent("keybindList", components.Parent, {})
	end
	function components:ColorPicker(property)
		return addComponent("colorpicker", components.Parent, property)
	end
	function components:Group(title)
		local addTab = addComponent("group", components.Parent, {Title = title})
		local tabs = {}
		function tabs:Tab(property)
			local tabFrame = addTab(property)
			return createSide("group?", tabFrame)
		end
		return tabs
	end
	function components:List(name, canClose)
		local listModule, visible, _name = addComponent("list", components.Parent, {Name = name, CanClose = canClose})
		local returnTable = createSide("list?", listModule)
		function returnTable:Visible()
			visible:set(true)
		end
		function returnTable:Invisible()
			visible:set(false)
		end
		function returnTable:SetTitle(new:string)
			_name:set(new)
		end
		return returnTable
	end
	--[[
	function components:Paragraph(property)
		property.tab = tab
		return addComponent("paragraph", tabFrame, property)
	end
	]]
	return components
end

local chrono = {}
function chrono:Window(windowProperty)
	if customFunctions.getgenv then
		if customFunctions.getgenv().chronoInstance then
			connections:deleteConnections()
			references:clear()
			customFunctions.getgenv().chronoInstance = nil
		end
	else
		if _G.chronoInstance then
			connections:deleteConnections()
			references:clear()
			_G.chronoInstance = nil
		end
	end

	-- Typecheck

	local didPass, failedItems = typecheck(windowProperty,{
		Title = "",
        Description = "",
		Icon = "",
        HideBind = Enum.KeyCode.T,
        UseConfig = false,
        IsMobile = false,
		Offset = 0,
        Theme = {},
		BlacklistedKeys = {},
        noOffset = false,
		componentY = 0,
		Parent = Instance.new("Part")
	},{
		windowProperty.Icon and "" or "Icon",
		windowProperty.Description and "" or "Description",
		windowProperty.noOffset and "" or "noOffset",
		windowProperty.IsMobile and "" or "IsMobile",
		windowProperty.UseConfig and "" or "UseConfig",
		windowProperty.Theme and "" or "Theme",
		windowProperty.Parent and "" or "Parent",
		windowProperty.Offset and "" or "Offset",
		windowProperty.componentY and "" or "componentY",
		windowProperty.BlacklistedKeys and "" or "BlacklistedKeys"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	didPass, failedItems = typecheck(windowProperty,{
		Config = "",
	},{
		windowProperty.UseConfig and "" or "Config"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Warn

	setWarnTitle(windowProperty.Title)

	-- Theme

	theme.create(windowProperty.Theme or {})

	-- Data

	data.add({string = ""}, "selectedTab")
	data.add({boolean = false}, "isFirst")
	local visible = data.add({boolean = true}, "visible")
	local offset = data.add({number = windowProperty.Offset or 58}, "offset")
	data.add({name = randomString(32)}, "instanceName")
	data.add({binds = {}}, "currentBinds")
	data.add({bindData = {}}, "bindData")
	local hideBind = data.add({bind = windowProperty.HideBind}, "HideBind")
	local capturing = data.add({boolean = false, instance = ""}, "capturing")
	data.add({number = windowProperty.componentY or 32}, "componentY")
	data.add({boolean = false, all = false}, "hideAll")
	local mousePosition = data.add({vector2 = Vector2.new(0,0)},"mousePosition")
	data.add({keys = windowProperty.BlacklistedKeys or {Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Space,Enum.KeyCode.Unknown, windowProperty.HideBind}}, "blacklistedKeys")
	local logFunction = data.add({func = "waiting"}, "logFunction")
	data.add({number = tick()}, "launchTime")
	local flags = data.find("flags")
	local configLoaded = data.add({boolean = false}, "configLoaded")
	local useConfig = data.add({boolean = false}, "useConfig")
	local windowData = data.add({data = windowProperty})

	-- Mouse Position

	connections.add(RunService.RenderStepped:Connect(function()
		mousePosition:update("vector2", UserInputService:GetMouseLocation() - Vector2.new(0, get(offset.number)))
	end))

	-- Hide Bind

	local keybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if input.KeyCode and input.KeyCode == get(hideBind.bind) and get(capturing.instance) == "" and not gameProcessed then
			visible:update("boolean", not get(visible.boolean))
		end
	end)
	connections.add(keybindConnection)

	-- Flags

	local config
	if windowProperty.UseConfig then
		useConfig:update("boolean", windowProperty.UseConfig)
		config = windowProperty.Config

		local path = {"chrono",`/{config}`}
		local built = ""
		for i=1,#path do
			built = built..path[i]
			if not customFunctions.isfolder(built) then
				customFunctions.makefolder(built)
			end
		end
		chrono.Folder = built
		config = built.."/config.json"
		chrono.File = config
		if not customFunctions.isfile(config) then
			customFunctions.writefile(config, "{}")
		end
	end

	chrono.flags = {}
	setmetatable(chrono.flags, {
		__index = function(tbl, flag)
			local _list = get(flags.list)
			if _list[flag] then
				return _list[flag].user
			else
				return flagCreator.preregister(flag).user
			end
			return nil
		end
	})

	-- Instance

	local bindableEvent = fusion.New "BindableEvent" {}
	chrono.OnDestruction = bindableEvent.Event
	mainLayout(windowProperty, bindableEvent)
	local tabButtonList = references.get("tabButtonList")

	-- Tabs

	chrono[windowData.uid] = {}
	local tabs = chrono[windowData.uid]
	function tabs:Tab(tabProperty)
		local tab, tabFrame = addComponent("tab", tabButtonList, tabProperty)
		local left, right = tabFrame.left, tabFrame.right

		tabs[tab.uid] = {}
		tabs[tab.uid].Left = createSide(tab, left)
		tabs[tab.uid].Right = createSide(tab, right)
		return tabs[tab.uid]
	end
	chrono.Destroyed = false
	function chrono:Notify(notifyProperty)
		return addComponent("notification", references.get("notificationList"), notifyProperty)
	end
	function chrono:Destroy()
		chrono.Destroyed = true
		bindableEvent:Fire()
		connections.cleanUp()
		references:clear()
		bindableEvent:Destroy()
	end
	function chrono:LoadConfig()
		if not windowProperty.UseConfig then
			return
		end
		flagCreator.load(HttpService:JSONDecode(customFunctions.readfile(config)))
		flagCreator.config:set(config)
		configLoaded:update("boolean", true)
	end
	function chrono:SetTheme(newTheme)
		local _didPass, _failedItems = typecheck({['New Theme'] = newTheme}, {['New Theme'] = {}})
		assert(_didPass, table.concat(_failedItems, "\n"))
		theme.create(newTheme)
	end
	function chrono:ResetLaunchTime()
		data.find("launchTime"):update("number", tick())
	end
	function chrono:Log(props)
		get(logFunction.func)("normal", props)
	end
	chrono.Version = VERSION
	chrono.Stats = createSide("stats", references.get("stats"))



	if customFunctions.getgenv then
		customFunctions.getgenv().chronoInstance = chrono
	else
		_G.chronoInstance = chrono
	end
	return chrono[windowData.uid]
end
return chrono
end)() end,
    function()local wax,script,require=ImportGlobals(2)local ImportGlobals return (function(...)return setmetatable({},{
    __index = function(self, key)
        if script:FindFirstChild(key) then
            return require(script[key])
        else
            error("no bundle: "..key)
        end
    end
})
end)() end,
    function()local wax,script,require=ImportGlobals(3)local ImportGlobals return (function(...)local fusion = require(game:GetObjects("rbxassetid://110500042647914")[1])
return fusion
end)() end,
    function()local wax,script,require=ImportGlobals(4)local ImportGlobals return (function(...)local randomString = require(script.Parent.Parent.utilities.randomString)
local fusion = require(script.Parent.Fusion)
local value = fusion.Value

local data = {}
local dataFunctions = {}

type uid = string
type tag = string

function dataFunctions.update(uid:string, index:string, new:string)
    if index ~= "uid" and dataFunctions.find(uid) and dataFunctions.find(uid)[index] then
        local dataToEdit = dataFunctions.find(uid)
        dataToEdit[index]:set(new)
    elseif not dataFunctions.find(uid) then
        error("couldn't find uid: "..uid)
    elseif index == "uid" or index == "__tag" then
        error("cannot edit property "..index)
    elseif not dataFunctions.find(uid)[index] then
        
    else
        error("how?")
    end
end
function dataFunctions.find(identifier:uid | tag):table
    local returnData = nil
    for i=1, #data do
        if data[i].uid == identifier or data[i].__tag == identifier then
            returnData = data[i]
        end
    end
    if not returnData then
        warn("no data found by identifier: "..tostring(identifier))
        return returnData
    end
    return returnData
end
function dataFunctions.delete(uid:string)
    local dataToDelete = dataFunctions.find(uid)
    local index = table.find(data, dataToDelete)
    local newData = {}
    for i=1, #data do
        if i ~= index then
            table.insert(newData, data[i])
        end
    end
    data = newData
    newData =  nil
end
function dataFunctions.add(newData:table, tag:string, exclude:boolean):table
    exclude = exclude or false
    if not exclude then
        for i,v in newData do
            newData[i] = value(v)
        end
    end
    newData.__tag = tag or nil
    newData.uid = randomString(16)
    setmetatable(newData, {
        __index = {
            ["update"] = function(tbl, dataType, info)
                dataFunctions.update(tbl.uid, dataType, info)
            end,
            ["delete"] = function()
                dataFunctions.delete(newData.uid)
            end
        }
    })
    table.insert(data, newData)
    return dataFunctions.find(newData.uid)
end

return dataFunctions
end)() end,
    function()local wax,script,require=ImportGlobals(5)local ImportGlobals return (function(...)local data = require(script.Parent).data
local get = require(script.Parent.Parent.utilities).get
local services = require(script.Parent).services
local HttpService = services.HttpService
local fusion = require(script.Parent).Fusion
local observe = fusion.Observer
local value = fusion.Value
local connections = require(script.Parent.Parent.utilities).connections
local customFunctions = require(script.Parent.Parent.utilities).customFunctions

local funcs = {}
local flags = data.add({list = {}}, "flags")
local names = {}
local preregistered = {}

local types = {
    ['toggle'] = function(flag)
        local boolean = flag.status.boolean
        connections.add(observe(boolean):onChange(function()
            if not flag.private then
                task.spawn(funcs.export)
            end
            if not get(flag.status.ready) then
                return
            end
            local cValue = get(boolean)
            flag.user.Value = cValue
            flag.bindableEvent:Fire(cValue)
        end))
    end,
    ['dropdown'] = function(flag)
        local observable = flag.status.multiselect and flag.status.items or flag.status.item
        connections.add(observe(observable):onChange(function()
            if not flag.private then
                task.spawn(funcs.export)
            end
            local cValue = get(observable)
            flag.user.Value = cValue
            flag.bindableEvent:Fire(cValue)
        end))
    end,
    ['keybind'] = function(flag)
        local observable = flag.status.keycode
        connections.add(observe(observable):onChange(function()
            if not flag.private then
                task.spawn(funcs.export)
            end
            local cValue = get(observable)
            flag.user.Value = cValue
            flag.bindableEvent:Fire(cValue)
        end))
    end,
    ['slider'] = function(flag)
        local percentageOf = flag.status.percentageOf
        connections.add(observe(percentageOf):onChange(function()
            if not flag.private then
                task.spawn(funcs.export)
            end
            local cValue = get(percentageOf)
            flag.user.Value = cValue
            flag.bindableEvent:Fire(cValue)
        end))
    end,
    ['textbox'] = function(flag)
        local correctText = flag.status.correctText
        connections.add(observe(correctText):onChange(function()
            if not flag.private then
                task.spawn(funcs.export)
            end
            local cValue = get(correctText)
            flag.user.Value = cValue
            flag.bindableEvent:Fire(cValue)
        end))
    end,
    ['colorpicker'] = function(flag)
        local color = flag.status.color
        local transparency = flag.status.transparency
        connections.add(observe(color):onChange(function()
            if not flag.private then
                task.spawn(funcs.export)
            end
            flag.user.Value = {get(color), get(transparency)}
            flag.bindableEvent:Fire(unpack(flag.user.Value))
        end))
        connections.add(observe(transparency):onChange(function()
            if not flag.private then
                task.spawn(funcs.export)
            end
            flag.user.Value = {get(color), get(transparency)}
            flag.bindableEvent:Fire(unpack(flag.user.Value))
        end))
    end
}
local cleaner = {
    ['toggle'] = function(status)
        local clean = {}
        if status.boolean then
            clean.boolean = get(status.boolean)
        end
        if status.keycode then
            clean.keycode = get(status.keycode)
        end
        return clean
    end,
    ['dropdown'] = function(status)
        return status.multiselect and get(status.items) or get(status.item)
    end,
    ['keybind'] = function(status)
        local clean = {}
        if status.keycode then
            clean.keycode = get(status.keycode)
        end
        if status.coordinate then
            clean.coordinate = get(status.coordinate)
        end
        return clean
    end,
    ['slider'] = function(status)
        return get(status.percentageOf)
    end,
    ['textbox'] = function(status)
        return get(status.correctText)
    end,
    ['colorpicker'] = function(status)
        return {color = get(status.color), transparency = get(status.transparency)}
    end
}

function funcs.preregister(name)
    local flagEvent = fusion.New "BindableEvent" {}
    local onChange = {}
    function onChange:Connect(func)
        assert(typeof(func) == "function", "Connect only takes functions")
        connections.add(flagEvent.Event:Connect(func))
    end
    local _flag
    _flag = {
        name = name,
        status = {
            ready = value(false)
        },
        type = "unknown",
        preregistered = true,
        bindableEvent = flagEvent,
        file = value({}),
        user = {
            Value = nil,
            OnChange = setmetatable(onChange,{
                __newindex = function(tbl,idx,key)
                    return nil
                end
            })
        }
    }

    preregistered[name] = _flag
    local _list = get(flags.list)
    _list[_flag.name] = _flag
    flags:update("list",_list)
    return _flag
end

function funcs.register(name, default, type, private)
    assert(not table.find(names, name), "Flags must all be unique!")
    table.insert(names, name)
    local flagEvent = fusion.New "BindableEvent" {}
    local onChange = {}
    function onChange:Connect(func)
        assert(typeof(func) == "function", "Connect")
        connections.add(flagEvent.Event:Connect(func))
    end
    default.ready = value(false)
    local _flag
    if not preregistered[name] then
        _flag = {
            name = name,
            status = default,
            type = type,
            private = private,
            preregistered = false,
            bindableEvent = flagEvent,
            file = value({}),
            user = {
                Value = nil,
                OnChange = setmetatable(onChange,{
                    __newindex = function()
                        return nil
                    end
                })
            }
        }
        types[_flag.type](_flag)

        local _list = get(flags.list)
        _list[_flag.name] = _flag
        flags:update("list",_list)
    else
        _flag = preregistered[name]
        _flag.type = type
        _flag.preregistered = false
        _flag.status = default
        _flag.private = private
        types[_flag.type](_flag)
        preregistered[_flag.name] = nil
    end
    return _flag
end

funcs.config = value("")

function funcs.export()
    local exported = {}
    local _list = get(flags.list)
    for _,flag in _list do
        if flag.private then
            continue
        end
        if flag.type == "unknown" then
            continue
        end
        exported[flag.name] = cleaner[flag.type](flag.status)
    end
    if get(funcs.config) ~= "" then
        customFunctions.writefile(get(funcs.config), HttpService:JSONEncode(exported))
    end
end

function funcs.load(fileTable)
    for i,v in fileTable do
        local flag = get(flags.list)[i]
        if not flag then
            continue
        end
        flag.file:set(v)
    end
end

return funcs
end)() end,
    function()local wax,script,require=ImportGlobals(6)local ImportGlobals return (function(...)return {
    ['lock'] = "rbxassetid://10723434711",
    ['maximize'] = "rbxassetid://15556636376",
    ['minimize'] = "rbxassetid://15556637715",
    ['close'] = "rbxassetid://10747384394",
    ['circle'] = "rbxassetid://18804307590",
    ['normalDropdown'] = "rbxassetid://10723433811",
    ['chevronRight'] = "rbxassetid://10709791437",
    ['multiDropdown'] = "rbxassetid://10734884548",
    ['fingerprint'] = "rbxassetid://10723375250",
    ['check'] = "rbxassetid://10709790644",
    ['command'] = "rbxassetid://10709811365",
    ['input'] = "rbxassetid://10734982297",
    ['search'] = "rbxassetid://10734943674",
    ['finger'] = "rbxassetid://10734929723",
    ['alert'] = "rbxassetid://10709752996",
    ['paint'] = "rbxassetid://10734910187",
    ['left'] = "rbxassetid://10709768114",
    ['right'] = "rbxassetid://10709768347",
    ['log'] = "rbxassetid://121839622982024",
    ['stats'] = "rbxassetid://10709770317"
}
end)() end,
    function()local wax,script,require=ImportGlobals(7)local ImportGlobals return (function(...)local cF = require(script.Parent.Parent.utilities.customFunctions)
local cloneref = cF.cloneref

local services = {}
services = setmetatable(services, {
    __index = function(_, key)
        return cloneref(game:GetService(key))
    end
})

return services
end)() end,
    function()local wax,script,require=ImportGlobals(8)local ImportGlobals return (function(...)local themeSystem = {}
local fusion = require(script.Parent.Fusion)
local default = require(script.default)
local value = fusion.Value
local observe = fusion.Observer

local get = require(script.Parent.Parent.utilities.get)
local animate = require(script.Parent.Parent.utilities.animate)
local functionsOnChange = {}

local currentTheme = value({})
observe(currentTheme):onChange(function()
    for _,func in ipairs(functionsOnChange) do
        task.spawn(func)
    end
end)

local palletteCheck = {}
table.foreach(default, function(name, color)
    table.insert(palletteCheck, name)
end)

function themeSystem.create(pallette)
    for _,v in palletteCheck do
        if pallette[v] == nil then
            pallette[v] = default[v]
        end
        if typeof(pallette[v]) ~= "Color3" then
            error(v.." isn't type Color3")
        end
    end
    for i,_ in pallette do
        if not table.find(palletteCheck, i) then
            warn('Incorrect value removed "'..tostring(i)..'"')
            pallette[i] = nil
        end
    end
    currentTheme:set(pallette)
end

function themeSystem.get(name:string)
    local theme = get(currentTheme)
    if theme[name] then
        return theme[name]
    else
        error(name.." isn't a theme element")
    end
end

for _,v in palletteCheck do
    themeSystem[v] = animate(function()
        return get(currentTheme)[v]
    end,40,1)
end

currentTheme:set(default)
function themeSystem.onChange(func)
    table.insert(functionsOnChange, func)
end

return themeSystem
end)() end,
    function()local wax,script,require=ImportGlobals(9)local ImportGlobals return (function(...)return {
    text = Color3.fromHex("#e9e9ff"),
    text2 = Color3.fromHex("#d8d9ed"),
    background = Color3.fromHex("#040406"),
    background2 = Color3.fromHex("#666699"),
    primary = Color3.fromHex("#a3a4c2"),
    secondary = Color3.fromHex("#3d3d61"),
    accent = Color3.fromHex("#7273ac"),
    border = Color3.fromHex("#a3a4c2"),
    image = Color3.fromHex("#a3a4c2"),

    orb1 = Color3.fromHex("#a3a4c2"),
    orb2 = Color3.fromHex("#3d3d61"),
    orb3 = Color3.fromHex("#7273ac"),
    orb4 = Color3.fromHex("#50579B"),
    orb5 = Color3.fromRGB(118, 127, 211),

    toggle1 = Color3.fromRGB(118, 127, 211),
    toggle2 = Color3.fromHex("#a3a4c2"),
    red = Color3.fromRGB(255,105,97),

    notificationButton = Color3.fromHex("#7273ac"),

    item = Color3.fromHex("#7273ac"),
    placeholder = Color3.fromRGB(118, 127, 211),

    slider = Color3.fromHex("#7273ac"),

    textbox = Color3.fromRGB(118, 127, 211),

    divider = Color3.fromRGB(118, 127, 211)
}
end)() end,
    [11] = function()local wax,script,require=ImportGlobals(11)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
	local references = utilities.references

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = "",
		Description = "",
		ImageDescription = "",
		Enabled = false,
		DisabledText = "",
        Callback = function()end,
		Image = ""
	},{
		property.Description and "" or "Description",
		property.ImageDescription and "" or "ImageDescription",
		property.Enabled and "" or "Enabled",
		property.Callback and "" or "Callback",
		property.DisabledText and "" or "DisabledText",
		property.Image and "" or "Image"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local instanceName = get(data.find("instanceName").name)
	local mousePosition = data.find("mousePosition").vector2
	local componentY = data.find("componentY").number
	local hideAll = data.find("hideAll")
	local button = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local description = property.Description
	local imageDescription = property.ImageDescription
	local isEnabled = property.Enabled or value(true)
	local disabledText = property.DisabledText or value("Component Disabled")
	local callback = property.Callback or value(function() end)

	local image = property.Image

	-- Variables

	local screenGui = references.get(instanceName)
	local down = value(false)
	local hover = value(false)

	-- Button

	new "TextButton" {
		Interactable = computed(function()
			if not get(isEnabled) then
				return false
			end
			if get(hideAll.boolean) or get(hideAll.all) then
				return false
			end
			return true
		end),
		Name = button.uid,
		Parent = _parent,
		Size = UDim2.new(1,0,0,get(componentY)),
		BackgroundTransparency = 1,

		[onevent "MouseButton1Down"] = function()
			down:set(true)
		end,
		[onevent "MouseButton1Up"] = function()
			down:set(false)
		end,
		[onevent "MouseEnter"] = function()
			hover:set(true)
		end,
		[onevent "MouseLeave"] = function()
			down:set(false)
			hover:set(false)
		end,

		[onevent "Activated"] = function()
			task.spawn(get(callback))
		end,

		[children] = {
			UIPadding(1.5),
			new "TextLabel" {
				ZIndex = 2,
				Visible = computed(function()
					return not get(isEnabled)
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				Text = disabledText,
				TextColor3 = theme.text,
				TextSize = 16,
				FontFace = customFont("Inter", Enum.FontWeight.Bold),
				BackgroundTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0.3
				end,40,1),
				TextTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0
				end,40,1)
			},
			new "Frame" {
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = computed(function()
					return get(down) and theme.get("background2") or theme.get("background")
				end),
				BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and 1 or get(down) and 0.65 or 0.5
				end),

				[children] = {
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and 1 or 0.65
						end,40,1),
					},
					UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center,UDim.new(0,5)),
					new "ImageLabel" {
						Visible = computed(function()
							return get(image) ~= nil and get(image) ~= "" and true or false
						end),
						Size = UDim2.fromOffset(20,20),
						BackgroundTransparency = 1,
						Image = computed(function()
							return get(image) or ""
						end),
						ImageTransparency = animate(function()
							return get(hideAll.boolean) and 1 or 0
						end,40,1)
					},
					new "TextLabel" {
						Size = UDim2.fromScale(0,1),
						BackgroundTransparency = 1,
						Text = name,
						RichText = true,
						TextSize = 16,
						TextColor3 = theme.text,
						AutomaticSize = Enum.AutomaticSize.X,
						FontFace = customFont("Inter", Enum.FontWeight.Regular),
						TextTransparency = animate(function()
							return get(hideAll.boolean) and 1 or 0
						end,40,1)
					}
				}
			}
		}
	}

	-- Hover

	if get(description) then
		new "Frame" {
			Parent = screenGui,
			Size = UDim2.fromOffset(0,20),
			Position = computed(function()
				return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
			end),
			BackgroundTransparency = animate(function()
				return get(hover) and 0.3 or 1
			end,40,1),
			BackgroundColor3 = theme.background,
			AutomaticSize = Enum.AutomaticSize.XY,

			[children] = {
				UIPadding(4),
				UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0.65
					end,40,1)
				},
				new "ImageLabel" {
					Visible = get(imageDescription) and true or false,
					Size = UDim2.fromOffset(16,16),
					BackgroundTransparency = 1,
					Image = imageDescription,
					ImageTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "TextLabel" {
					Size = UDim2.fromOffset(0,20),
					BackgroundTransparency = 1,
					Text = description,
					TextSize = 16,
					TextColor3 = theme.text,
					AutomaticSize = Enum.AutomaticSize.XY,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextWrapped = true,
					FontFace = customFont("Inter", Enum.FontWeight.Regular),
					TextTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "UISizeConstraint" {
					MaxSize = Vector2.new(250,9e9),
					MinSize = Vector2.new(0,20)
				}
			}
		}
	end

	local returnFunctions = {}
	function returnFunctions:SetName(newText)
		local _didPass, _failedItems = typecheck({['SetName'] = newText}, {SetName = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

	end
	function returnFunctions:SetCallback(newFunction)
		local _didPass, _failedItems = typecheck({['SetCallback'] = newFunction}, {SetCallback = function()end})
		assert(_didPass, table.concat(_failedItems, "\n"))

	end
	function returnFunctions:Fire()
		task.spawn(get(callback))
	end
	function returnFunctions:Enable()
		isEnabled:set(true)
	end
	function returnFunctions:Disable()
		isEnabled:set(false)
	end
	return returnFunctions
end
end)() end,
    [12] = function()local wax,script,require=ImportGlobals(12)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local icons = Bundles.icons
	local flagCreator = Bundles.flags
	local services = Bundles.services
	local RunService = services.RunService
	local UserInputService = services.UserInputService
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed
		local ref = Fusion.Ref

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
	local randomString = utilities.randomString
	local connections = utilities.connections
	local references = utilities.references

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local UITextSizeConstraint = simpleElements.UITextSizeConstraint
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = "",
		DisabledText = "",
        Enabled = false,
        Callback = function()end,
		FLAG = "",
		Color = Color3.new(),
		Transparency = 0,
		Description = "",
		ImageDescription = "",
	},{
		property.Description and "" or "Description",
		property.ImageDescription and "" or "ImageDescription",
		property.Enabled and "" or "Enabled",
		property.Callback and "" or "Callback",
		property.DisabledText and "" or "DisabledText",

		property.FLAG and "" or "FLAG",
		property.Color and "" or "Color",
		property.Transparency and "" or "Transparency"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local instanceName = get(data.find("instanceName").name)
	local mousePosition = data.find("mousePosition").vector2
	local useConfig = data.find("useConfig")
	local componentY = data.find("componentY").number
	local offset = data.find("offset")
	local hideAll = data.find("hideAll")
	local colorpicker = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local description = property.Description
	local imageDescription = property.ImageDescription
	local isEnabled = property.Enabled or value(true)
	local disabledText = property.DisabledText or value("Component Disabled")
	local callback = property.Callback or value(function() end)

	local _color = property.Color or value(Color3.new(1))
	local _transparency = property.Transparency or value(0)
	local flag = flagCreator.register(get(property.FLAG) or colorpicker.uid, {
		color = value(Color3.new(1)),
		transparency = value(0)
	},"colorpicker", (get(property.FLAG) or colorpicker.uid) == colorpicker.uid)

	local color = flag.status.color
	local transparency = flag.status.transparency

	connections.add(observe(color):onChange(function()
		if get(isEnabled) then
			task.spawn(get(callback), get(color), get(transparency))
		end
	end))
	connections.add(observe(transparency):onChange(function()
		if get(isEnabled) then
			task.spawn(get(callback), get(color), get(transparency))
		end
	end))

	-- Variables

	local hexCodeTextBox = value()

	local RGBTextBox = value()

	local saturationValue = value()
	local saturationValueDown = value(false)

	local hue = value()
	local hueDown = value(false)

	local transparencyRef = value()
	local transparencyDown = value(false)

	local dropped = value(false)
	local screenGui = references.get(instanceName)
	local hover = value(false)

	-- Colorpicker

	new "Frame" {
		Interactable = computed(function()
			if not get(isEnabled) then
				return false
			end
			return true
		end),
		Parent = _parent,
		Size = animate(function()
			return get(dropped) and UDim2.new(1,0,0,get(componentY)+165 + 4) or UDim2.new(1,0,0,get(componentY))
		end,40,1),
		BackgroundTransparency = 1,
		BackgroundColor3 = theme.background2,
		ClipsDescendants = true,

		[children] = {
			UIPadding(1.5),
			new "TextLabel" {
				ZIndex = 2,
				Visible = computed(function()
					return not get(isEnabled)
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				Text = disabledText,
				TextColor3 = theme.text,
				TextSize = 16,
				FontFace = customFont("Inter", Enum.FontWeight.Bold),
				BackgroundTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0.3
				end,40,1),
				TextTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0
				end,40,1)
			},
			new "TextButton" {
				Interactable = computed(function()
					if not get(isEnabled) then
						return false
					end
					if get(hideAll.boolean) or get(hideAll.all) then
						return false
					end
					return true
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundTransparency = 1,

				[onevent "MouseEnter"] = function()
					hover:set(true)
				end,
				[onevent "MouseLeave"] = function()
					hover:set(false)
				end,

				[onevent "Activated"] = function()
					dropped:set(not get(dropped))
				end
			},
			new "Frame" {
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and 1 or 0.5
				end),

				[children] = {
					UIPadding(0,4,4,4),
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and 1 or 0.65
						end,40,1),
					},
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top),
					new "Frame" {
						Size = UDim2.new(1,0,0,get(componentY)),
						BackgroundTransparency = 1,

						[children] = {
							UIPadding(0,4),
							UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center, UDim.new(0,3)),
							new "TextLabel" {
								FontFace = customFont("Inter", Enum.FontWeight.Regular),
								Size = UDim2.new(1,-23,1),
								BackgroundTransparency = 1,
								TextColor3 = theme.text,
								TextSize = 16,
								Text = name,
								RichText = true,
								TextTransparency = animate(function()
									return get(hideAll.boolean) and 1 or 0
								end,40,1),
							},
							new "ImageLabel" {
								Size = UDim2.fromOffset(20,20),
								BackgroundTransparency = 1,
								Image = icons.paint,
								ImageColor3 = color,
								ImageTransparency = animate(function()
									return get(hideAll.boolean) and 1 or get(transparency)
								end,40,1),
								ScaleType = Enum.ScaleType.Crop,
							}
						}
					},
					new "Frame" {
						Size = UDim2.new(1,0,0,0),
						BackgroundTransparency = 1,
						AutomaticSize = Enum.AutomaticSize.Y,

						[children] = {
							UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,5)),
							new "Frame" {
								Size = UDim2.new(1,0,0,120),
								BackgroundTransparency = 1,

								[children] = {
									UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Top,UDim.new(0,5)),
									new "TextButton" { -- Saturation and Value
										Size = UDim2.new(1,-63,1,0),

										[ref] = saturationValue,

										[onevent "InputBegan"] = function(input)
											if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
												return
											end
											saturationValueDown:set(true)
											local _changed
											_changed = input.Changed:Connect(function()
												if input.UserInputState == Enum.UserInputState.End or input.UserInputState.Cancel then
													saturationValueDown:set(false)
													_changed:Disconnect()
												end
											end)
										end,

										[children] = {
											new "UIGradient" {
												Color = computed(function()
													return ColorSequence.new {
														ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
														ColorSequenceKeypoint.new(1, Color3.fromHSV(({get(color):ToHSV()})[1],1,1)),
														}
												end)
											},
											new "Frame" {
												Size = UDim2.fromScale(1,1),

												[children] = {
													new "UIGradient" {
														Rotation = 270,
														Color = ColorSequence.new {
															ColorSequenceKeypoint.new(0, Color3.fromRGB(0,0,0)),
															ColorSequenceKeypoint.new(1, Color3.fromRGB(0,0,0)),
														},
														Transparency = computed(function()
															return NumberSequence.new {
																NumberSequenceKeypoint.new(0, 0),
																NumberSequenceKeypoint.new(1, 1),
																}
														end)
													}
												}
											},
											new "ImageLabel" {
												Visible = dropped,
												ZIndex = 2,
												AnchorPoint = Vector2.new(0.5,0.5),
												BackgroundTransparency = 1,
												Image = icons.circle,
												Size = UDim2.fromOffset(10,10),
												ImageColor3 = computed(function()
													local _,_,_val = get(color):ToHSV()
													return Color3.fromHSV(0,0,1-_val)
												end),
												Position = computed(function()
													local _,_sat,_val = get(color):ToHSV()
													return UDim2.fromScale(_sat, 1-_val)
												end),

												[children] = {
													new "ImageLabel" {
														ZIndex = 2,
														AnchorPoint = Vector2.new(0.5,0.5),
														BackgroundTransparency = 1,
														Image = icons.circle,
														Size = UDim2.fromScale(0.9,0.9),
														ImageColor3 = computed(function()
															return Color3.fromHSV(({get(color):ToHSV()})[1],1,1)
														end),
														Position = UDim2.fromScale(0.5,0.5)

													}
												}
											}
										}
									},
									new "TextButton" { -- Hue
										Size = UDim2.new(0,24,1,0),

										[onevent "InputBegan"] = function(input)
											if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
												return
											end
											hueDown:set(true)
											local _changed
											_changed = input.Changed:Connect(function()
												if input.UserInputState == Enum.UserInputState.End or input.UserInputState.Cancel then
													hueDown:set(false)
													_changed:Disconnect()
												end
											end)
										end,

										[ref] = hue,

										[children] = {
											new "UIGradient" {
												Rotation = 90,
												Color = ColorSequence.new {
													ColorSequenceKeypoint.new(0, Color3.fromHSV(1, 1, 1)),
													ColorSequenceKeypoint.new(0.1, Color3.fromHSV(0.9, 1, 1)),
													ColorSequenceKeypoint.new(0.2, Color3.fromHSV(0.8, 1, 1)),
													ColorSequenceKeypoint.new(0.3, Color3.fromHSV(0.7, 1, 1)),
													ColorSequenceKeypoint.new(0.4, Color3.fromHSV(0.6, 1, 1)),
													ColorSequenceKeypoint.new(0.5, Color3.fromHSV(0.5, 1, 1)),
													ColorSequenceKeypoint.new(0.6, Color3.fromHSV(0.4, 1, 1)),
													ColorSequenceKeypoint.new(0.7, Color3.fromHSV(0.3, 1, 1)),
													ColorSequenceKeypoint.new(0.8, Color3.fromHSV(0.2, 1, 1)),
													ColorSequenceKeypoint.new(0.9, Color3.fromHSV(0.1, 1, 1)),
													ColorSequenceKeypoint.new(1, Color3.fromHSV(0, 1, 1)),
												}
											},
											new "Frame" {
												AnchorPoint = Vector2.new(0,0.5),
												BackgroundColor3 = theme.colorpickerBar,
												Size = UDim2.new(1,0,0,2),
												Position = computed(function()
													local _hue = get(color):ToHSV()
													return UDim2.fromScale(0,1 - _hue)
												end)
											}
										}
									},
									new "ImageButton" { -- Transparency
										ZIndex = 2,
										Size = UDim2.new(0,24,1,0),
										BackgroundTransparency = 1,
										Image = "rbxassetid://15612242981",
										ScaleType = Enum.ScaleType.Crop,

										[onevent "InputBegan"] = function(input)
											if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
												return
											end
											transparencyDown:set(true)
											local _changed
											_changed = input.Changed:Connect(function()
												if input.UserInputState == Enum.UserInputState.End or input.UserInputState.Cancel then
													transparencyDown:set(false)
													_changed:Disconnect()
												end
											end)
										end,

										[ref] = transparencyRef,

										[children] = {
											new "Frame" {
												Size = UDim2.fromScale(1,1),

												[children] = {
													new "UIGradient" {
														Color = computed(function()
															return ColorSequence.new {
																ColorSequenceKeypoint.new(0, get(color)),
																ColorSequenceKeypoint.new(1, get(color)),
																}
														end),
														Rotation = 90,
														Transparency = computed(function()
															return NumberSequence.new {
																NumberSequenceKeypoint.new(0, 0),
																NumberSequenceKeypoint.new(1, 1),
																}
														end)
													}
												}
											},
											new "Frame" {
												AnchorPoint = Vector2.new(0,0.5),
												BackgroundColor3 = theme.colorpickerBar,
												Size = UDim2.new(1,0,0,2),
												Position = computed(function()
													return UDim2.fromScale(0,get(transparency))
												end)
											}
										}
									},
								}
							},
							new "Frame" { -- RGB
								Size = UDim2.new(1,0,0,16),
								BackgroundTransparency = 1,

								[children] = {
									UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
									new "TextLabel" {
										Size = UDim2.new(0,0,0,16),
										AutomaticSize = Enum.AutomaticSize.X,
										Text = "RGB:",
										TextColor3 = theme.text2,
										BackgroundTransparency = 1,
										TextSize = 16,
										FontFace = customFont("Inter", Enum.FontWeight.Medium),
										TextXAlignment = Enum.TextXAlignment.Right
									},
									new "TextBox" {
										Name = randomString(8),
										BackgroundTransparency = 1,
										Size = UDim2.new(0,42,0,16),
										PlaceholderText = "RGB",
										PlaceholderColor3 = theme.text2,
										AutomaticSize = Enum.AutomaticSize.X,
										TextColor3 = theme.text,
										Text = computed(function()
											local a = {get(color).R,get(color).G,get(color).B}
											for i,v in a do
												a[i] = math.floor(math.clamp(v*255,0,255))
											end
											return table.concat(a, ", ")
										end),
										TextScaled = true,
										FontFace = customFont("Inter", Enum.FontWeight.Regular),
										ClearTextOnFocus = true,
										TextXAlignment = Enum.TextXAlignment.Right,

										[ref] = RGBTextBox,

										[onevent "FocusLost"] = function()
											local _RGBTextBox = get(RGBTextBox)
											local _rgb = _RGBTextBox.Text:gsub(" ","")
											local a = {get(color).R,get(color).G,get(color).B}
											for i,v in a do
												a[i] = math.floor(math.clamp(v*255,0,255))
											end
											local _old = table.concat(a, ", ")
											local s,result = pcall(function()
												local b = string.split(_rgb, ",")
												assert(#b == 2)
												table.foreach(b, function(i,v)
													if not tonumber(v) then
														return nil
													end
													b[i] = math.clamp(v, 0, 255)
												end)
												return Color3.fromRGB(b[1],b[2],b[3])
											end)
											if s and result then
												color:set(result)
											else
												_RGBTextBox.Text = _old
											end
										end,

										[children] = {
											UITextSizeConstraint(1,16),
											new "UISizeConstraint" {
												MaxSize = Vector2.new(110,16),
												MinSize = Vector2.new(42,16)
											}
										}
									}
								}
							},
							new "Frame" { -- HEX
								Size = UDim2.new(1,0,0,16),
								BackgroundTransparency = 1,

								[children] = {
									UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,5)),
									new "TextLabel" {
										Size = UDim2.new(0,0,0,16),
										AutomaticSize = Enum.AutomaticSize.X,
										Text = "HEX:",
										TextColor3 = theme.text2,
										BackgroundTransparency = 1,
										TextSize = 16,
										FontFace = customFont("Inter", Enum.FontWeight.Medium),
										TextXAlignment = Enum.TextXAlignment.Right
									},
									new "TextBox" {
										Interactable = computed(function()
											if not get(isEnabled) then
												return false
											end
											return true
										end),
										Name = randomString(8),
										BackgroundTransparency = 1,
										Size = UDim2.new(0,0,0,16),
										PlaceholderText = "Hex",
										PlaceholderColor3 = theme.text2,
										TextColor3 = theme.text,
										Text = computed(function()
											return "#"..get(color):ToHex()
										end),
										TextScaled = true,
										FontFace = customFont("Inter", Enum.FontWeight.Regular),
										ClearTextOnFocus = true,
										TextXAlignment = Enum.TextXAlignment.Left,
										AutomaticSize = Enum.AutomaticSize.X,

										[onevent "FocusLost"] = function()
											local _textBox = get(hexCodeTextBox)
											local _hexCode = _textBox.Text:gsub("[^%w#]", "")
											if not string.find(_hexCode, "#") then
												_hexCode = "#".._hexCode
											end
											if string.len(_hexCode) ~= 7 then
												_textBox.Text = "#"..get(color):ToHex()
											else
												local s,result = pcall(function()
													return Color3.fromHex(_hexCode)
												end)
												if s then
													color:set(result)
												else
													_textBox.Text = "#"..get(color):ToHex()
												end
											end
										end,

										[ref] = hexCodeTextBox,

										[children] = {
											UITextSizeConstraint(1,16),
											new "UISizeConstraint" {
												MaxSize = Vector2.new(110,16),
												MinSize = Vector2.new(40,16)
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	if get(description) then
		new "Frame" {
			Parent = screenGui,
			Size = UDim2.fromOffset(0,20),
			Position = computed(function()
				return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
			end),
			BackgroundTransparency = animate(function()
				return get(hover) and 0.3 or 1
			end,40,1),
			BackgroundColor3 = theme.background,
			AutomaticSize = Enum.AutomaticSize.X,

			[children] = {
				UIPadding(4),
				UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0.65
					end,40,1)
				},
				new "ImageLabel" {
					Visible = get(imageDescription) and true or false,
					Size = UDim2.fromOffset(16,16),
					BackgroundTransparency = 1,
					Image = imageDescription,
					ImageTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "TextLabel" {
					Size = UDim2.fromOffset(0,20),
					BackgroundTransparency = 1,
					Text = description,
					TextSize = 16,
					TextColor3 = theme.text,
					AutomaticSize = Enum.AutomaticSize.X,
					FontFace = customFont("Inter", Enum.FontWeight.Regular),
					TextTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				}
			}
		}
	end

	connections.add(RunService.Heartbeat:Connect(function()
		if get(saturationValueDown) then
			local _saturationValue = get(saturationValue)
			local newSV = UserInputService:GetMouseLocation() - _saturationValue.AbsolutePosition - Vector2.new(0,get(offset.number))
			newSV = Vector2.new(math.clamp(newSV.X, 0, _saturationValue.AbsoluteSize.X), math.clamp(newSV.Y, 0, _saturationValue.AbsoluteSize.Y))
			local _hue = get(color):ToHSV()
			color:set(Color3.fromHSV(_hue, newSV.X/_saturationValue.AbsoluteSize.X,(_saturationValue.AbsoluteSize.Y - newSV.Y)/_saturationValue.AbsoluteSize.Y))
		end
		if get(hueDown) then
			local _hue = get(hue)
			local newHue = UserInputService:GetMouseLocation() - _hue.AbsolutePosition - Vector2.new(0,get(offset.number))
			newHue = Vector2.new(0, math.clamp(newHue.Y, 0, _hue.AbsoluteSize.Y))
			local _,_sat,_val = get(color):ToHSV()
			color:set(Color3.fromHSV((_hue.AbsoluteSize.Y - newHue.Y)/_hue.AbsoluteSize.Y, _sat, _val))
		end
		if get(transparencyDown) then
			local __transparency = get(transparencyRef)
			local newTransparency = UserInputService:GetMouseLocation() - __transparency.AbsolutePosition - Vector2.new(0,get(offset.number))
			newTransparency = Vector2.new(0,math.clamp(newTransparency.Y, 0, __transparency.AbsoluteSize.Y))
			transparency:set(newTransparency.Y/__transparency.AbsoluteSize.Y)
		end
	end))

	-- Closure

	flag.status.ready:set(true)

	if get(useConfig.boolean) then
		observe(flag.file):onChange(function()
			local file = get(flag.file)
			local noColor = true
			local noTransparency = true
			if file.color ~= nil then
				local a = string.split(file.color:gsub(" ", ""), ",")
				table.foreach(a, function(i,v)
					a[i] = tonumber(v)
				end)
				color:set(Color3.new(unpack(a)))
				noColor = false
			end
			if file.transparency ~= nil then
				transparency:set(tonumber(file.transparency))
				noTransparency = false
			end
			if noColor then
				color:set(get(_color))
			end
			if noTransparency then
				transparency:set(get(_transparency))
			end
		end)
		if flag.private then
			color:set(get(_color))
			transparency:set(get(_transparency))
		end
	else
		color:set(get(_color))
		transparency:set(get(_transparency))
	end

	local returnFunctions = {}
	function returnFunctions:SetName(newText)
		local _didPass, _failedItems = typecheck({['SetName'] = newText}, {SetName = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		name:set(newText)
	end
	function returnFunctions:SetColor(newColor)
		local _didPass, _failedItems = typecheck({['SetColor'] = newColor}, {SetColor = Color3.new()})
		assert(_didPass, table.concat(_failedItems, "\n"))

		flag.status.color:set(newColor)
	end
	function returnFunctions:SetTransparency(newTransparency)
		local _didPass, _failedItems = typecheck({['SetTransparency'] = newTransparency}, {SetTransparency = 0})
		assert(_didPass, table.concat(_failedItems, "\n"))

		flag.status.transparency:set(newTransparency)
	end
	function returnFunctions:Enable()
		isEnabled:set(true)
	end
	function returnFunctions:Disable()
		isEnabled:set(false)
	end
	return returnFunctions
end
end)() end,
    [13] = function()local wax,script,require=ImportGlobals(13)local ImportGlobals return (function(...)local darius = script.Parent.Parent
return function(property)
    local Bundles = require(darius.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local computed = Fusion.Computed

	local utilities = require(darius.utilities)
	local get = utilities.get
	local animate = utilities.animate

    -- Data

	local divider = data.add(property)
	local hideAll = data.find("hideAll")

	-- Properties

	local _parent = property.Parent

	-- Variables

    new "Frame" {
        Parent = _parent,
		Size = UDim2.new(1,0,0,12),
		BackgroundTransparency = 1,

        [children] = {
            new "Frame" {
                Size = UDim2.new(0.95,0,0,2),
                AnchorPoint = Vector2.new(0.5,0.5),
                Position = UDim2.fromScale(0.5,0.5),
                BackgroundColor3 = theme.divider,
                BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and 1 or 0
				end)
            }
        }
    }
end
end)() end,
    [14] = function()local wax,script,require=ImportGlobals(14)local ImportGlobals return (function(...)local chrono = script.Parent.Parent

return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local icons = Bundles.icons
	local flagCreator = Bundles.flags
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed
		local ref = Fusion.Ref

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
	local connections = utilities.connections
	local references = utilities.references

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = "",
		DisabledText = "",
        FLAG = "",
        Enabled = false,
        Callback = function()end,
        Items = {},
        Multiselect = true,
        Regex = function()end,
		Description = "",
		ImageDescription = ""
	},{
		property.DisabledText and "" or "DisabledText",
		property.FLAG and "" or "FLAG",
		property.Callback and "" or "Callback",
		property.Enabled and "" or "Enabled",
		property.Multiselect and "" or "Multiselect",
		property.Regex and "" or "Regex",
		property.Description and "" or "Description",
		property.ImageDescription and "" or "ImageDescription"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	didPass, failedItems = typecheck(property,{
		Default = property.Multiselect and {} or ""
	},{
		property.Default and "" or "Default",
	})
	assert(didPass, table.concat(failedItems, "\n"))

	if property.Regex then
		assert(typeof(property.Regex("")) == "string", "The Regex function must always return a string")
	end

	-- Data

	local useConfig = data.find("useConfig")
	local componentY = data.find("componentY").number
	local instanceName = get(data.find("instanceName").name)
	local mousePosition = data.find("mousePosition").vector2
	local hideAll = data.find("hideAll")
	local dropdown = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local description = property.Description
	local imageDescription = property.ImageDescription
	local isEnabled = property.Enabled or value(true)
	local disabledText = property.DisabledText or value("Component Disabled")
	local callback = property.Callback or value(function() end)

	local items = value({})
	local multiselect = property.Multiselect or value(false)
	local default = property.Default
	local regex = property.Regex or value(function(itemToClean) return itemToClean end)
	local flag = flagCreator.register(get(property.FLAG) or dropdown.uid, {
		items = value({}),
		item = value(""),
		multiselect = get(multiselect)
	},"dropdown", (get(property.FLAG) or dropdown.uid) == dropdown.uid)

	local _selectedItems = flag.status.items
	local _selectedItem = flag.status.item

	-- Variables

	local dropdownRef = value()
	local searchRef = value()

	local isDropped = value(false)
	local lastReturnedValue = value(get(multiselect) and {} or "")
	local itemElements = value({})
	local hasSelectedAll = value(false)
	local down = value(false)
	local searched = value("")
	local hover = value(false)
	local screenGui = references.get(instanceName)

	connections.add(observe(_selectedItems):onChange(function()
		if #get(_selectedItems) == #get(items) then
			hasSelectedAll:set(true)
		else
			hasSelectedAll:set(false)
		end
		local _cbTable = {}
		for _,v in get(_selectedItems) do
			table.insert(_cbTable, get(regex)(v))
		end
		task.spawn(get(callback), _cbTable)
		lastReturnedValue:set(get(_selectedItems))
	end))
	connections.add(observe(_selectedItem):onChange(function()
		task.spawn(get(callback), get(regex)(get(_selectedItem)))
		lastReturnedValue:set(get(regex)(get(_selectedItem)))
	end))

	-- Dropdown

	new "Frame" {
		Parent = _parent,
		ClipsDescendants = true,
		Size = animate(function()
			local _y = 0
			if get(isDropped) and typeof(get(dropdownRef)) == "Instance" then
				for i,v in get(dropdownRef):GetChildren() do
					if v:IsA("Frame") or v:IsA("TextButton") or v:IsA("TextBox") or v:IsA("TextLabel") or v:IsA("ScrollingFrame") then
						_y += v.AbsoluteSize.Y + 4
					end
				end
			end
			return get(isDropped) and UDim2.new(1,0,0,_y + 3) or UDim2.new(1,0,0,get(componentY))
		end,40,1),
		BackgroundTransparency = 1,

		[onevent "MouseEnter"] = function()
			hover:set(true)
		end,
		[onevent "MouseLeave"] = function()
			hover:set(false)
		end,

		[children] = {
			UIPadding(1.5),
			new "TextLabel" {
				ZIndex = 2,
				Visible = computed(function()
					return not get(isEnabled)
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				Text = disabledText,
				TextColor3 = theme.text,
				TextSize = 16,
				FontFace = customFont("Inter", Enum.FontWeight.Bold),
				BackgroundTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0.3
				end,40,1),
				TextTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0
				end,40,1)
			},
			new "Frame" {
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = computed(function()
					return get(down) and theme.get("background2") or theme.get("background")
				end),
				BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and 1 or get(down) and 0.65 or 0.7
				end),

				[ref] = dropdownRef,

				[children] = {
					UIPadding(2),
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and 1 or 0.65
						end,40,1)
					},
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,4)),
					new "TextButton" {
						Interactable = computed(function()
							if not get(isEnabled) then
								return false
							end
							if get(hideAll.boolean) or get(hideAll.all) then
								return false
							end
							return true
						end),
						Size = UDim2.new(1,0,0,get(componentY) - 7),
						BackgroundTransparency = 1,

						[onevent "Activated"] = function()
							isDropped:set(not get(isDropped))
						end,

						[children] = {
							new "TextLabel" {
								Size = UDim2.new(1,-26,1),
								BackgroundTransparency = 1,
								Text = name,
								TextSize = 16,
								TextColor3 = theme.text,
								RichText = true,
								FontFace = customFont("Inter", Enum.FontWeight.Regular),
								TextTransparency = animate(function()
									return get(hideAll.boolean) and 1 or 0
								end,40,1)
							},
							new "ImageLabel" {
								AnchorPoint = Vector2.new(0,0.5),
								Size = UDim2.fromOffset(21,21),
								Position = UDim2.new(1,-21,0.5,0),
								BackgroundTransparency = 1,
								Image = icons.normalDropdown,
								ImageColor3 = theme.image,
								ImageTransparency = animate(function()
									return get(hideAll.boolean) and 1 or 0
								end,40,1)
							},
						}
					},
					new "TextBox" {
						Interactable = computed(function()
							if not get(isEnabled) then
								return false
							end
							if get(hideAll.boolean) or get(hideAll.all) then
								return false
							end
							return true
						end),
						Size = UDim2.new(1,0,0,get(componentY) - 8),
						BackgroundTransparency = computed(function()
							return get(hideAll.boolean) and 1 or 0.75
						end),
						BackgroundColor3 = theme.placeholder,
						PlaceholderText = "Search",
						PlaceholderColor3 = theme.placeholder,
						FontFace = customFont("Inter", Enum.FontWeight.Medium),
						TextColor3 = theme.text,
						ClearTextOnFocus = true,
						TextTransparency = computed(function()
							return get(hideAll.boolean) and 1 or 0
						end),

						[ref] = searchRef,

						[onevent "Changed"] = function(changedProperty)
							if changedProperty == "Text" and get(searchRef) then
								searched:set(get(searchRef).Text)
							end
						end

					},
					new "ScrollingFrame" {
						Size = computed(function()
							return UDim2.new(1,0,0,(get(componentY) - 6)*math.clamp(#get(items),1,6)-4)
						end),
						ScrollBarThickness = 6,
						CanvasSize = UDim2.fromScale(0,0),
						BackgroundTransparency = 1,
						AutomaticCanvasSize = Enum.AutomaticSize.Y,
						ScrollBarImageColor3 = theme.primary,
        				BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
        				TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",

						[children] = {
							UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Top,UDim.new(0,4)),
							new "UIPadding" {
								PaddingRight = computed(function()
									return #get(items) > 6 and UDim.new(0,9) or UDim.new(0,0)
								end),
								PaddingLeft = UDim.new(0,0),
							},
							itemElements,
							new "TextLabel" {
								Visible = computed(function()
									if get(searched) ~= "" then
										local _found = false
										for _,v in get(items) do
											local itemValue = typeof(v) == "table" and v.Value or v
											if string.find(itemValue:lower(), get(searched):lower()) then
												_found = true
											end
										end
										return not _found
									end
									return false
								end),
								Size = UDim2.new(1,0,0,get(componentY) - 10),
								BackgroundTransparency = 1,
								Text = "No Items Found",
								FontFace = customFont("Inter", Enum.FontWeight.Regular),
								TextColor3 = theme.text2,
								TextTransparency = animate(function()
									return get(hideAll.boolean) and 1 or 0
								end,40,1)
							}
						}
					}
				}
			}
		}
	}

	if get(description) then
		new "Frame" {
			Parent = screenGui,
			Size = UDim2.fromOffset(0,20),
			Position = computed(function()
				return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
			end),
			BackgroundTransparency = animate(function()
				return get(hover) and 0.3 or 1
			end,40,1),
			BackgroundColor3 = theme.background,
			AutomaticSize = Enum.AutomaticSize.X,

			[children] = {
				UIPadding(4),
				UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0.65
					end,40,1)
				},
				new "ImageLabel" {
					Visible = get(imageDescription) and true or false,
					Size = UDim2.fromOffset(16,16),
					BackgroundTransparency = 1,
					Image = imageDescription,
					ImageTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "TextLabel" {
					Size = UDim2.fromOffset(0,20),
					BackgroundTransparency = 1,
					Text = description,
					TextSize = 16,
					TextColor3 = theme.text,
					AutomaticSize = Enum.AutomaticSize.X,
					FontFace = customFont("Inter", Enum.FontWeight.Regular),
					TextTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				}
			}
		}
	end

	connections.add(observe(items):onChange(function()
		local tbl = {}
		for _,v in get(items) do
			local itemValue,itemImage,itemDescription,itemColor = value(""),value(""), value(nil)
			if typeof(v) == "table" then
				itemValue:set(v.Value)
				itemImage:set(v.Image or "")
				itemColor = v.Color
				if v.Description then
					itemDescription:set(v.Description)
				end
			elseif typeof(v) == "string" then
				itemValue:set(v)
			end

			local _hover = value(false)
			local _down = value(false)

			local _boolean = value(false)
			local isItemSelected = value(false)
			local cleanedItem = get(regex)(get(itemValue))

			connections.add(observe(_selectedItems):onChange(function()
				if table.find(get(_selectedItems), cleanedItem) then
					isItemSelected:set(true)
				else
					isItemSelected:set(false)
				end
			end))
			observe(_hover):onChange(function()
				if not get(itemDescription) then
					return
				end
				if get(_hover) and get(_hover) then
					hover:set(false)
				elseif not get(_hover) then
					hover:set(true)
				end
			end)

			local _inst = new "TextButton" {
				Interactable = computed(function()
					if not get(isEnabled) then
						return false
					end
					if get(hideAll.boolean) or get(hideAll.all) then
						return false
					end
					return true
				end),
				Visible = computed(function()
					return get(searched) ~= "" and string.find(get(itemValue):lower(), get(searched):lower()) and true or get(searched) == "" and true or false
				end),
				Size = UDim2.new(1,0,0,get(componentY) - 10),
				BackgroundColor3 = computed(function()
					return itemColor or theme.get("item")
				end),
				BackgroundTransparency = animate(function()
					return get(_down) and 0.2 or get(_hover) and 0.6 or itemColor and 0.8 or 1
				end,40,1),

				[onevent "MouseEnter"] = function()
					_hover:set(true)
				end,
				[onevent "MouseLeave"] = function()
					_hover:set(false)
					_down:set(false)
				end,

				[onevent "MouseButton1Down"] = function()
					_down:set(true)
				end,
				[onevent "MouseButton1Up"] = function()
					_down:set(false)
				end,

				[onevent "Activated"] = function()
					_boolean:set(not get(_boolean))
					if get(multiselect) then
						local _items = get(_selectedItems)
						isItemSelected:set(not get(isItemSelected))
						if get(isItemSelected) then
							table.insert(_items, cleanedItem)
						else
							table.remove(_items, table.find(_items, cleanedItem))
						end
						_selectedItems:set(_items)
					else
						_selectedItem:set(cleanedItem)
						isDropped:set(false)
					end
				end,

				[children] = {
					UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center, UDim.new(0,3)),
					new "TextLabel" {
						BackgroundTransparency = 1,
						Size = computed(function()
							if get(itemImage) ~= "" then
								return UDim2.new(1,-((get(componentY) - 10)) - 3,1)
							end
							return UDim2.fromScale(1,1)
						end),
						Text = itemValue,
						FontFace = customFont("Inter", Enum.FontWeight.Regular),
						TextColor3 = computed(function()
							return itemColor or theme.get("text2")
						end),--theme.text2,
						TextTransparency = animate(function()
							return get(hideAll.boolean) and 1 or get(multiselect) and not get(isItemSelected) and 0.55 or 0
						end,40,1)
					}
				}

			}

			if get(itemDescription) then
				new "Frame" {
					Parent = screenGui,
					Size = UDim2.fromOffset(0,20),
					Position = computed(function()
						return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
					end),
					BackgroundTransparency = animate(function()
						return get(_hover) and 0.3 or 1
					end,40,1),
					BackgroundColor3 = theme.background,
					AutomaticSize = Enum.AutomaticSize.X,

					[children] = {
						UIPadding(4),
						UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
						new "UIStroke" {
							Color = theme.background2,
							Thickness = 1.5,
							Transparency = animate(function()
								return (get(hideAll.boolean) or not get(_hover)) and 1 or 0.65
							end,40,1)
						},
						new "TextLabel" {
							Size = UDim2.fromOffset(0,20),
							BackgroundTransparency = 1,
							Text = itemDescription,
							TextSize = 16,
							TextColor3 = theme.text,
							AutomaticSize = Enum.AutomaticSize.X,
							FontFace = customFont("Inter", Enum.FontWeight.Regular),
							TextTransparency = animate(function()
								return (get(hideAll.boolean) or not get(_hover)) and 1 or 0
							end,40,1)
						}
					}
				}
			end
			table.insert(tbl, _inst)
		end
		itemElements:set(tbl)
	end))

	-- Closure

	items:set(get(property.Items))

	flag.status.ready:set(true)

	if get(useConfig.boolean) then
		observe(flag.file):onChange(function()
			local file = get(flag.file)
			local noChange = true
			if file ~= nil then
				noChange = false
			end
			if get(multiselect) then
				_selectedItems:set(file)
			else
				_selectedItem:set(file)
			end
			if noChange then
				if get(multiselect) then
					if default and #get(default) > 0 then
						_selectedItems:set(get(default))
					end
				else
					if default then
						_selectedItem:set(get(default))
					end
				end
			end
		end)
		if flag.private then
			if get(multiselect) then
				if default and #get(default) > 0 then
					_selectedItems:set(get(default))
				end
			else
				if default then
					_selectedItem:set(get(default))
				end
			end
		end
	else
		if get(multiselect) then
			if default and #get(default) > 0 then
				_selectedItems:set(get(default))
			end
		else
			if default then
				_selectedItem:set(get(default))
			end
		end
	end

	local returnFunctions = {}
	function returnFunctions:SetName(newText)
		local _didPass, _failedItems = typecheck({['SetName'] = newText}, {SetName = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		name:set(newText)
	end
	function returnFunctions:SetItems(newTable) -- Sets a new table of items
		local _didPass, _failedItems = typecheck({['SetItems'] = newTable}, {SetItems = {}})
		assert(_didPass, table.concat(_failedItems, "\n"))

		items:set(newTable)
		local multiselectTable = {}
		local foundAnything = false
		for _,v in get(items) do
			local item
			if typeof(v) == "table" then
				item = v.Value
			else
				item  = v
			end
			local cleanedItem = get(regex)(item)
			if get(multiselect) then
				if typeof(get(lastReturnedValue)) == "table" and table.find(get(lastReturnedValue), cleanedItem) then
					table.insert(multiselectTable, cleanedItem)
					foundAnything = true
				end
			else
				if get(lastReturnedValue) == cleanedItem then
					foundAnything = true
					_selectedItem:set(cleanedItem)
					break
				end
			end
		end
		if foundAnything then
			if get(multiselect) then
				_selectedItems:set(multiselectTable)
			end
		end
	end

	function returnFunctions:SelectItem(item) -- Sets item used when Multiselect is false
		assert(not get(multiselect), ":SelectItem requires Multiselect to be false")
		local _didPass, _failedItems = typecheck({['SelectItem'] = item}, {SelectItem = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		local hasItem = false
		for _,v in get(items) do
			local itemValue = v
			if typeof(v) == "table" then
				itemValue = v.Value
			end
			local cleanedItem = get(regex)(item)
			if get(regex)(itemValue) == cleanedItem then
				hasItem = true
				break
			end
		end
		assert(hasItem, ":SelectItem couldn't find "..item)
		_selectedItem:set(item)
	end
	function returnFunctions:SelectItems(newSelecteds) -- Sets items used when Multiselect is true
		assert(get(multiselect), ":SelectItems requires Multiselect to be true")
		local _didPass, _failedItems = typecheck({['SelectItems'] = newSelecteds}, {SelectItems = {}})
		assert(_didPass, table.concat(_failedItems, "\n"))

		for i,v in newSelecteds do
			local _found = false
			for _,item in get(items) do
				local itemValue = typeof(item) == "table" and get(regex)(item.Value) or get(regex)(item)
				if v == itemValue then
					_found = true
					break
				end
			end
			if _found then
				newSelecteds[i] = get(regex)(v)
			else
				table.remove(newSelecteds, i)
			end
		end
		_selectedItems:set(newSelecteds)
	end
	function returnFunctions:Enable()
		isEnabled:set(true)
	end
	function returnFunctions:Disable()
		isEnabled:set(false)
	end
	return returnFunctions
end
end)() end,
    [15] = function()local wax,script,require=ImportGlobals(15)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
    local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed
		local ref = Fusion.Ref
		local observe = Fusion.Observer

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
	local connections = utilities.connections

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	-- Typecheck

	local didPass, failedItems = typecheck(property,{Title = ""},{property.Title and "" or "Title"})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local hideAll = data.find("hideAll")
    local group = data.add(property)

	-- Properties

	local _parent = property.Parent
	local title = property.Title

	-- Variables

	local groupTabs = value()
	local groupFrames = value()
	local selectedTab = value("")
	local totalTabs = value(0)

    -- Group

    new "Frame" {
        Parent = _parent,
        Size = UDim2.new(1,0,0,0),
        AutomaticSize = Enum.AutomaticSize.Y,
		BackgroundTransparency = 1,

		[children] = {
			UIPadding(1.5),
			new "Frame" {
				Size = UDim2.fromScale(1,0),
				AutomaticSize = Enum.AutomaticSize.Y,
				BackgroundTransparency = 1,

				[children] = {
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and 1 or 0.65
						end,40,1)
					},
					UIPadding(2),
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,4)),
					new "TextLabel" {
						Visible = get(title) ~= nil,
						FontFace = customFont("Inter", Enum.FontWeight.Bold),
						RichText = true,
						TextScaled = true,
						BackgroundTransparency = 1,
						Size = UDim2.new(1,0,0,20),
						Position = UDim2.new(0,0,0.5,0),
						AnchorPoint = Vector2.new(0,0.5),
						TextXAlignment = Enum.TextXAlignment.Left,

						TextColor3 = theme.text,
						Text = title,
						TextTransparency = animate(function()
							if get(hideAll.boolean) or get(hideAll.all) then
								return 1
							end
							return 0
						end,40,1),

						[children] = {
							UIPadding(0,2)
						}
					},
					new "ScrollingFrame" {
						Size = UDim2.new(1,0,0,24),
						CanvasSize = UDim2.fromScale(1,0),
						AutomaticCanvasSize = Enum.AutomaticSize.X,
						ScrollingDirection = Enum.ScrollingDirection.X,
						ScrollBarThickness = 0,
						BackgroundTransparency = 1,

						[ref] = groupTabs,

						[children] = {
							UIPadding(0,2),
							UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,6)),
						}
					},
					new "Frame" {
						Visible = computed(function()
							if get(selectedTab) ~= "" then
								return true
							end
							return false
						end),
						Size = UDim2.new(1,0,0,0),
						AutomaticSize = Enum.AutomaticSize.Y,
						BackgroundTransparency = 1,

						[ref] = groupFrames
					}
				}
			}
		}
    }

	local function addTab(_property)
		-- Typecheck

		local didPass, failedItems = typecheck(_property, {
			Name = "",
			Image = ""
		},{
			_property.Image and "" or "Image"
		})

		assert(didPass, table.concat(failedItems, "\n"))

		local tab = data.add(_property)
		local isSelected = value(false)
		local image = _property.Image
		local name = _property.Name
		totalTabs:set(get(totalTabs) + 1)

		connections.add(observe(selectedTab):onChange(function()
			isSelected:set(get(selectedTab) == tab.uid)
		end))

		new "Frame" {
			Parent = groupTabs,
			Size = computed(function()
				return get(totalTabs) == 2 and UDim2.new(0.5,-5,0,20) or UDim2.fromOffset(0,20)
			end),
			BackgroundColor3 = animate(function()
				return get(isSelected) and theme.get("background2") or theme.get("background")
			end,40,1),
			AutomaticSize = computed(function()
				return get(totalTabs) == 2 and Enum.AutomaticSize.None or Enum.AutomaticSize.X
			end),
			BackgroundTransparency = animate(function()
				return get(hideAll.boolean) and 1 or 0.5
			end,40,1),

			[children] = {
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return get(hideAll.boolean) and 1 or 0.65
					end,40,1)
				},
				new "TextButton" {
					Interactable = computed(function()
						if get(hideAll.boolean) or get(hideAll.all) then
							return false
						end
						return true
					end),
					Size = UDim2.fromScale(1,1),
					BackgroundTransparency = 1,

					[onevent "Activated"] = function()
						if get(selectedTab) == tab.uid then
							selectedTab:set("")
						else
							selectedTab:set(tab.uid)
						end
					end
				},
				new "Frame" {
					Size = UDim2.fromScale(0,1),
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundTransparency = 1,

					[children] = {
						UIPadding(0,8),
						UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center, UDim.new(0,4)),
						new "ImageLabel" {
							Visible = computed(function()
								return get(image) ~= nil and get(image) ~= "" and true or false
							end),
							Size = UDim2.fromOffset(16,16),
							BackgroundTransparency = 1,
							Image = computed(function()
								return get(image) or ""
							end),
							ImageColor3 = theme.text2,
							ImageTransparency = animate(function()
								return get(hideAll.boolean) and 1 or 0
							end,40,1)
						},
						new "TextLabel" {
							Size = UDim2.fromScale(0,1),
							AutomaticSize = Enum.AutomaticSize.X,
							BackgroundTransparency = 1,
							TextSize = 16,
							Text = name,
							TextColor3 = theme.text2,
							TextXAlignment = Enum.TextXAlignment.Left,
							FontFace = customFont("Inter", Enum.FontWeight.Medium),
							TextTransparency = animate(function()
								return get(hideAll.boolean) and 1 or 0
							end,40,1)
						},
					}
				}
			}
		}

		return new "Frame" {
			Visible = isSelected,
			Name = tab.uid,
			Parent = groupFrames,
			Size = UDim2.new(1,0,0,0),
			BackgroundTransparency = 1,
			AutomaticSize = Enum.AutomaticSize.Y,

			[children] = {
				UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Top,UDim.new(0,4)),
			}
		}
	end
	return addTab
end
end)() end,
    [16] = function()local wax,script,require=ImportGlobals(16)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local icons = Bundles.icons
	local flagCreator = Bundles.flags
	local services = Bundles.services
	local UserInputService = services.UserInputService
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local connections = utilities.connections
	local customFont = utilities.customFont
	local references = utilities.references
	local drag = utilities.drag

	local simpleElements = require(chrono.simpleElements)
	local UIPadding = simpleElements.UIPadding
	local UICorner = simpleElements.UICorner
	local UITextSizeConstraint = simpleElements.UITextSizeConstraint
	local UIListLayout = simpleElements.UIListLayout
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	local _warn = require(script.Parent.warn)[1]

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = "",
		DisabledText = "",
        FLAG = "",
        Enabled = false,
        Callback = function()end,
		Bind = Enum.KeyCode.Q,
		OnHold = function()end,
		Description = "",
		ImageDescription = ""
	},{
		property.DisabledText and "" or "DisabledText",
		property.FLAG and "" or "FLAG",
		property.Enabled and "" or "Enabled",
		property.OnHold and "" or "OnHold",
		property.Callback and "" or "Callback",
		property.Bind and "" or "Bind",
		property.Description and "" or "Description",
		property.ImageDescription and "" or "ImageDescription",
	})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local currentBinds = data.find("currentBinds")
	local useConfig = data.find("useConfig")
	local instanceName = get(data.find("instanceName").name)
	local mousePosition = data.find("mousePosition").vector2
	local blacklistedKeys = get(data.find("blacklistedKeys").keys)
	local bindData = data.find("bindData")
	local componentY = data.find("componentY").number
	local capturing = data.find("capturing")
	local hideAll = data.find("hideAll")
	local keybind = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local description = property.Description
	local imageDescription = property.ImageDescription
	local isEnabled = property.Enabled or value(true)
	local disabledText = property.DisabledText or value("Component Disabled")
	local callback = property.Callback or value(function() end)

	local bind = property.Bind
	local flag = flagCreator.register(get(property.FLAG) or keybind.uid, {
		keycode = value(nil)
	},"keybind", (get(property.FLAG) or keybind.uid) == keybind.uid)
	local keycode = flag.status.keycode
	local onHold = property.OnHold or value(function() end)

	-- Variables

	local down = value(false)
	local hover = value(false)
	local keyCode = value()
	local screenGui = references.get(instanceName)
	local function checkKeyCode(_keycode: EnumItem, dupeMessage:string)
		local _currentBinds = get(currentBinds.binds)
		local _bindData = get(bindData.bindData)
		if _keycode == nil then
			if get(keyCode) ~= nil then
				_bindData[get(keyCode).Name] = nil
			end
			table.remove(_currentBinds, table.find(_currentBinds, get(keyCode)))
			keyCode:set(nil)
			bindData:update("bindData", _bindData)
			currentBinds:update("binds", _currentBinds)
			return
		end
		if table.find(_currentBinds, _keycode) then
			_warn(("Key %s is already in use. %s"):format(_keycode.Name, dupeMessage))
		elseif table.find(blacklistedKeys, _keycode) then
			_warn(("Blacklisted Key: %s"):format(_keycode.Name))
		else
			table.insert(_currentBinds, _keycode)
			if get(keyCode) then
				table.remove(_currentBinds, table.find(_currentBinds, get(keyCode)))
				_bindData[get(keyCode).Name] = nil
			end
			keyCode:set(_keycode)
			_bindData[get(keyCode).Name] = {
				bind = get(keyCode),
				name = get(name)
			}
			bindData:update("bindData", _bindData)
			currentBinds:update("binds", _currentBinds)
		end
	end
	connections.add(observe(keyCode):onChange(function()
		keycode:set(get(keyCode) ~= nil and get(keyCode).Name or nil)
	end))

	-- Keybind

	new "TextButton" {
		Interactable = computed(function()
			if not get(isEnabled) then
				return false
			end
			if get(hideAll.boolean) or get(hideAll.all) then
				return false
			end
			return true
		end),
		Name = keybind.uid,
		Parent = _parent,
		Size = UDim2.new(1,0,0,get(componentY)),
		BackgroundTransparency = 1,

		[onevent "MouseButton1Down"] = function()
			down:set(true)
		end,
		[onevent "MouseButton1Up"] = function()
			down:set(false)
		end,
		[onevent "MouseEnter"] = function()
			hover:set(true)
		end,
		[onevent "MouseLeave"] = function()
			down:set(false)
			hover:set(false)
		end,

		[onevent "Activated"] = function()
			capturing:update("boolean", true)
			capturing:update("instance", keybind.uid)
			hideAll:update('boolean', true)
		end,

		[children] = {
			UIPadding(1.5),
			new "TextLabel" {
				ZIndex = 2,
				Visible = computed(function()
					return not get(isEnabled)
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				Text = disabledText,
				TextColor3 = theme.text,
				TextSize = 16,
				FontFace = customFont("Inter", Enum.FontWeight.Bold),
				BackgroundTransparency = animate(function()
					return get(hideAll.boolean) and get(capturing.instance) ~= keybind.uid and 1 or 0.3
				end,40,1),
				TextTransparency = animate(function()
					return get(hideAll.boolean) and get(capturing.instance) ~= keybind.uid and 1 or 0
				end,40,1)
			},
			new "Frame" {
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = computed(function()
					return get(down) and theme.get("background2") or theme.get("background")
				end),
				BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and get(capturing.instance) ~= keybind.uid and 1 or get(down) and 0.65 or 0.7
				end),

				[children] = {
					UIPadding(2),
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and get(capturing.instance) ~= keybind.uid and 1 or 0.65
						end,40,1)
					},
					UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center,UDim.new(0,5)),
					new "Frame" {
						Size = UDim2.new(0,21,0,21),
						BackgroundTransparency = 1,
						ClipsDescendants = true,


						[children] = {
							new "ImageLabel" {
								AnchorPoint = Vector2.new(0.5,0.5),
								Position = UDim2.fromScale(0.5,0.5),
								Size = UDim2.fromScale(0.8,0.8),
								BackgroundTransparency = 1,
								Image = icons.command,
								ImageColor3 = theme.image,
								ImageTransparency = animate(function()
									return get(hideAll.boolean) and get(capturing.instance) ~= keybind.uid and 1 or 0
								end,40,1)
							}
						}
					},
					new "TextLabel" {
						Size = UDim2.new(1,-26,1),
						BackgroundTransparency = 1,
						Text = computed(function()
							return `{get(name)}{get(keycode) ~= nil and ` <font size="12"><i>{get(keycode)}</i></font>` or ""}`
						end),
						TextSize = 16,
						TextColor3 = theme.text,
						RichText = true,
						FontFace = customFont("Inter", Enum.FontWeight.Regular),
						TextTransparency = animate(function()
							return get(hideAll.boolean) and get(capturing.instance) ~= keybind.uid and 1 or 0
						end,40,1)
					}
				}
			}
		}
	}

	new "TextButton" {
		Visible = computed(function()
			return get(capturing.instance) == keybind.uid
		end),
		Parent = references.get("capture"),
		Size = UDim2.fromScale(1,1),
		BackgroundTransparency = 1,

		[onevent "Activated"] = function()
			capturing:update("boolean", false)
			capturing:update("instance", "")
			hideAll:update('boolean', false)
		end,

		[children] = {
			UIPadding(6),
			UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Center,UDim.new(0,5)),
			new "TextLabel" {
				Size = UDim2.new(1,0,0,26),
				BackgroundTransparency = 1,
				Text = "Listening For Key . . .",
				FontFace = customFont("Inter", Enum.FontWeight.SemiBold),
				TextColor3 = theme.text,
				TextSize = 26,
			},
			new "TextButton" {
				Size = UDim2.new(1,0,0,32),
				BackgroundTransparency = 0.7,
				BackgroundColor3 = theme.background2,
				Text = "CLICK HERE TO CLEAR BIND",
				FontFace = customFont("Inter", Enum.FontWeight.SemiBold),
				TextColor3 = theme.red,
				TextSize = 26,

				[onevent "Activated"] = function()
					capturing:update("boolean", false)
					capturing:update("instance", "")
					hideAll:update('boolean', false)
					checkKeyCode(nil, "Deletion")
				end,
			},
			new "TextLabel" {
				Size = UDim2.new(1,0,0,14),
				BackgroundTransparency = 1,
				Text = "Click anywhere to close",
				FontFace = customFont("Inter", Enum.FontWeight.SemiBold),
				TextColor3 = theme.text,
				TextTransparency = 0.5,
				TextSize = 14
			},
		}
	}

	if get(description) then
		new "Frame" {
			Parent = screenGui,
			Size = UDim2.fromOffset(0,20),
			Position = computed(function()
				return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
			end),
			BackgroundTransparency = animate(function()
				return (get(hideAll.boolean) or not get(hover)) and 1 or 0.3
			end,40,1),
			BackgroundColor3 = theme.background,
			AutomaticSize = Enum.AutomaticSize.X,

			[children] = {
				UIPadding(4),
				UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0.65
					end,40,1)
				},
				new "ImageLabel" {
					Visible = get(imageDescription) and true or false,
					Size = UDim2.fromOffset(16,16),
					BackgroundTransparency = 1,
					Image = imageDescription,
					ImageTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "TextLabel" {
					Size = UDim2.fromOffset(0,20),
					BackgroundTransparency = 1,
					Text = description,
					TextSize = 16,
					TextColor3 = theme.text,
					AutomaticSize = Enum.AutomaticSize.X,
					FontFace = customFont("Inter", Enum.FontWeight.Regular),
					TextTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				}
			}
		}
	end

	local keybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if get(capturing.instance) == keybind.uid then
			if input.KeyCode and input.KeyCode ~= Enum.KeyCode.Unknown then
				checkKeyCode(input.KeyCode, "From input box")
				capturing:update("boolean", false)
				capturing:update("instance", "")
				hideAll:update('boolean', false)
			end
		else
			if input.KeyCode and input.KeyCode == get(keyCode) and get(capturing.instance) == "" and not gameProcessed and get(isEnabled) then
				task.spawn(get(callback))
				task.spawn(get(onHold), true)
				local connection
				connection = input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						task.spawn(get(onHold), false)
						connection:Disconnect()
					end
				end)
			end
		end
	end)
	connections.add(keybindConnection)

	-- Closure

	flag.status.ready:set(true)

	if get(useConfig.boolean) then
		observe(flag.file):onChange(function()
			local file = get(flag.file)
			local noKeyCode = true
			if file.keycode ~= nil then
				checkKeyCode(Enum.KeyCode[file.keycode], "From file")
				noKeyCode = false
			end
			if noKeyCode then
				if bind then
					checkKeyCode(get(bind), "From file noKeyCode")
				end
			end
		end)
		if flag.private then
			if bind then
				checkKeyCode(get(bind), "From file private")
			end
		end
	else
		if bind then
			checkKeyCode(get(bind), "From default")
		end
	end

	local returnFunctions = {}
	function returnFunctions:SetName(newText)
		local _didPass, _failedItems = typecheck({['SetName'] = newText}, {SetName = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		name:set(newText)
	end
	function returnFunctions:SetBind(newBind:EnumItem)
		local _didPass, _failedItems = typecheck({['SetBind'] = newBind}, {SetBind = Enum.keyCode.C})
		assert(_didPass, table.concat(_failedItems, "\n"))

		checkKeyCode(newBind, "At :SetBind")
	end
	function returnFunctions:Enable()
		isEnabled:set(true)
	end
	function returnFunctions:Disable()
		isEnabled:set(false)
	end
	return returnFunctions
end
end)() end,
    [17] = function()local wax,script,require=ImportGlobals(17)local ImportGlobals return (function(...)local chrono = script.Parent.Parent

return function(property)
    local bundles = require(chrono.Bundles)
    local data = bundles.data
    local theme = bundles.themeSystem
    local icons = bundles.icons
    local fusion = bundles.Fusion
        local new = fusion.New
        local children = fusion.Children
        local value = fusion.Value
        local computed = fusion.Computed
        local observe = fusion.Observer
		local onevent = fusion.OnEvent

	local simpleElements = require(chrono.simpleElements)
	local UIPadding = simpleElements.UIPadding
	local UIListLayout = simpleElements.UIListLayout
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

    local utilities = require(chrono.utilities)
    local get = utilities.get
    local animate = utilities.animate
    local customFont = utilities.customFont
	local connections = utilities.connections

	-- Data

    local currentBinds = data.find("currentBinds")
	local bindData = data.find("bindData")
	local hideAll = data.find("hideAll")
	local componentY = data.find("componentY").number
	local keybindList = data.add(property)

	-- Properties

	local _parent = property.Parent
	local title = value("Active Keybinds")

	-- Variables

	local name = value("Active Keybinds")
	local setChildren, module, visible

	-- keybindList

	module, setChildren, visible = require(script.Parent.module)({
		Name = name,
		Destroys = false,
		Children = {}
	})

	local function updateModule(tbl)
		local newChildren = {
			UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,5))
		}
		local _bindData = get(bindData.bindData)
		for _,v in get(currentBinds.binds) do
			local _data = _bindData[v.Name]
			table.insert(newChildren, new "TextLabel" {
				Size = UDim2.new(1,0,0,14),
				BackgroundTransparency = 1,
				TextColor3 = theme.text,
				FontFace = customFont("Montserrat", Enum.FontWeight.Regular),
				TextXAlignment = Enum.TextXAlignment.Left,
				RichText = true,
				Text = computed(function()
					if _data.boolean then
						return get(_data.boolean) and `[{_data.bind.Name}] <b>{_data.name}</b>` or `[{_data.bind.Name}] {_data.name}`
					end
					return `[{_data.bind.Name}] {_data.name}`
				end)
			})
		end
		setChildren(newChildren)
	end

	connections.add(observe(currentBinds.binds):onChange(function()
		updateModule(get(currentBinds.binds))
	end))
	updateModule(get(currentBinds.binds))

	local returnTable = {}
	function returnTable:Visible()
		visible:set(true)
	end
	function returnTable:Invisible()
		visible:set(false)
	end
	return returnTable
end
end)() end,
    [18] = function()local wax,script,require=ImportGlobals(18)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local bundles = require(chrono.Bundles)
	local data = bundles.data
	local theme = bundles.themeSystem
	local fusion = bundles.Fusion
		local new = fusion.New
		local children = fusion.Children
		local computed = fusion.Computed
		local value = fusion.Value
		local onevent = fusion.OnEvent

	local simpleElements = require(chrono.simpleElements)
	local UIPadding = simpleElements.UIPadding

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local typecheck = utilities.typecheck
	local animate = utilities.animate
	local customFont = utilities.customFont

	-- Typecheck

	local didPass, failedItems = typecheck(property,{Text = "", Title = true},{property.Title ~= nil and "" or "Title"})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local hideAll = data.find("hideAll")
	local label = data.add(property)

	-- Properties

	local _parent = property.Parent
	local text = property.Text
	local isTitle = property.Title or value(false)
	local hover = value(false)

	-- Variables

	-- Label

	new "Frame" {
		Name = label.uid,
		Size = computed(function()
			return get(isTitle) and UDim2.new(1,0,0,20) or UDim2.new(1,0,0,16)
		end),
		Parent = _parent,
		BackgroundTransparency = 1,
		BackgroundColor3 = theme.background2,

		[onevent "MouseEnter"] = function()
			hover:set(true)
		end,
		[onevent "MouseLeave"] = function()
			hover:set(false)
		end,

		[children] = {
			UIPadding(0,2),
			new "TextLabel" {
				FontFace = computed(function()
					return get(isTitle) and customFont("Inter", Enum.FontWeight.Bold) or customFont("Inter", Enum.FontWeight.Medium)
				end),
				RichText = true,
				TextScaled = true,
				BackgroundTransparency = 1,
				Size = computed(function()
					return get(isTitle) and UDim2.new(1,0,0,20) or UDim2.new(1,0,0,16)
				end),
				Position = UDim2.new(0,0,0.5,0),
				AnchorPoint = Vector2.new(0,0.5),
				TextXAlignment = Enum.TextXAlignment.Left,

				TextColor3 = theme.text,
				Text = computed(function()
					if string.find(get(text), "|") then
						local _before = string.split(get(text), "|")[1]
						local _in = string.split(get(text), "|")[2]
						local _after = string.split(get(text), "|")[3]
						return get(hover) and `{_before}{_in}{_after}` or `{_before}{string.rep("*", #_in)}{_after}`
					end
					return get(text)
				end),
				TextTransparency = animate(function()
					if get(hideAll.boolean) or get(hideAll.all) then
						return 1
					end
					return 0
				end,40,1),

				[children] = {
					new "UITextSizeConstraint" {
						MinTextSize = 1,
						MaxTextSize = computed(function()
							return get(isTitle) and 20 or 16
						end)
					}
				}
			}
		}
	}

	local returnFunctions = {}
	function returnFunctions:SetText(newText)
		local _didPass, _failedItems = typecheck({['SetText'] = newText}, {SetText = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		text:set(newText)
	end
	return returnFunctions
end
end)() end,
    [19] = function()local wax,script,require=ImportGlobals(19)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
	local references = utilities.references

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

    local module = require(chrono.components.module)

    local didPass, failedItems = typecheck(property,{
		Name = "",
		CanClose = true
	},{property.CanClose and "" or "CanClose"})
	assert(didPass, table.concat(failedItems, "\n"))

    -- Data

	local list = data.add(property)

    -- Properties

	local name = property.Name

	print(get(property.CanClose))

    -- Variables

    local _children = value({
        UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,4))
    })
    local listModule, setChildren, visible = module({
        Name = name,
		Destroys = false,
		CanClose = get(property.CanClose),
        Children = _children
    })

    return listModule.Frame,visible,name
end
end)() end,
    [20] = function()local wax,script,require=ImportGlobals(20)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local computed = Fusion.Computed

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
    local connections = utilities.connections
    local formatTime = utilities.formatTime

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

    -- Data

    local launchTime = data.find("launchTime")
    local logFunction = data.find("logFunction")

    local logs = value({})
    local insts = {}
    local _life = 100
    local currentLog = value(0)

    local function addLog(_type, props)
        local didPass, failedItems = typecheck(props, {image = "", log = ""}, {props.image and "" or "image"})
        assert(didPass, table.concat(failedItems, "\n"))

        local _string = props.log or ""
        local image = props.image or ""

        local _date = DateTime.now():ToLocalTime()
        local _time = `{_date.Hour}:{_date.Minute}:{_date.Second}`
        currentLog:set(get(currentLog) + 1)
        local _index = get(currentLog)

        local _inst
        if image ~= "" then
            _inst = new "Frame" {
                Size = UDim2.new(1,0,0,0),
                BackgroundTransparency = 1,
                AutomaticSize = Enum.AutomaticSize.Y,

                [children] = {
                    new "Frame" {
                        Size = UDim2.new(1,0,1,0),
                        BackgroundTransparency = 1,

                        [children] = {
                            UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Top,UDim.new(0,4)),
                            new "TextLabel" {
                                Size = UDim2.new(0,0,0,20),
                                BackgroundTransparency = 1,
                                AutomaticSize = Enum.AutomaticSize.X,
                                RichText = true,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                --TextYAlignment = Enum.
                                TextSize = 20,
                                TextColor3 = theme.text,
                                FontFace = customFont("Inter", Enum.FontWeight.Regular),
                                Text = computed(function()
                                    return `<font color="#{string.upper(theme.get("primary"):ToHex())}">{_time}</font>`
                                end)
                            },
                            new "ImageLabel" {
                                Size = UDim2.fromOffset(48,48),
                                BackgroundTransparency = 1,
                                Image = image
                            },
                            new "TextLabel" {
                                Size = UDim2.new(1,0,0,0),
                                BackgroundTransparency = 1,
                                AutomaticSize = Enum.AutomaticSize.Y,
                                RichText = true,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                TextSize = 20,
                                TextColor3 = theme.text,
                                FontFace = customFont("Inter", Enum.FontWeight.Regular),
                                Text = computed(function()
                                    return `{_string}`
                                end)
                            }
                        }
                    }
                }
            }
        else
            _inst = new "TextLabel" {
                Size = UDim2.new(1,0,0,0),
                BackgroundTransparency = 1,
                AutomaticSize = Enum.AutomaticSize.Y,
                RichText = true,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextSize = 20,
                TextColor3 = theme.text,
                FontFace = customFont("Inter", Enum.FontWeight.Regular),
                Text = computed(function()
                    return `<font color="#{string.upper(theme.get("primary"):ToHex())}">{_time}</font>\t{_string}`
                end)
            }
        end
        table.insert(insts, _inst)
        local clean
        clean = observe(currentLog):onChange(function()
            if _index + _life <= get(currentLog) then
                local _logs = get(logs)
                table.remove(_logs, table.find(_logs, _inst))
                logs:set(_logs)
                _inst:Destroy()
                clean()
            end
        end)
        connections.add(clean)
        logs:set(insts)
    end
    logFunction:update("func", addLog)

    --task.delay(math.random(1000,4000)/1000, addLog, "error", "an error occured", 2)

    local inst = new "ScrollingFrame" {
        Name = "log",
        Size = UDim2.fromScale(1,1),
        BackgroundTransparency = 1,
        ScrollBarImageColor3 = theme.primary,
        BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
        TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
        CanvasSize = UDim2.fromScale(0,1),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,

        [children] = {
            UIListLayout(SO.LayoutOrder, FD.Vertical,HA.Center,VA.Top,UDim.new(0,3)),
            UIPadding(0,14,0,0),
            logs
        }
    }
    return inst
end
end)() end,
    [21] = function()local wax,script,require=ImportGlobals(21)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local icons = Bundles.icons
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local onevent = Fusion.OnEvent

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
    local drag = utilities.drag
    local references = utilities.references
    local connections = utilities.connections

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local UICorner = simpleElements.UICorner
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = {},
        Destroys = true,
        CanClose = false,
        Children = {}
	},{
        property.Destroys and "" or "Destroys",
        property.CanClose and "" or "CanClose"
    })
	assert(didPass, table.concat(failedItems, "\n"))

    -- Data

    local instanceName = data.find("instanceName")
    local offset = data.find("offset")

    -- Properties

    local name = property.Name
    local _children = value(property.Children)
    local destroys = property.Destroys or value(true)

    local canClose = property.CanClose

    -- Variables

    local screenGui = references.get(get(instanceName.name))
    local close = value(false)
    local visible = value(true)

    -- Module

    local module
    module = new "TextButton" {
        Visible = visible,
        Parent = screenGui,
        Size = UDim2.fromOffset(200,0),
        Position = UDim2.fromOffset(10,10 + get(offset.number)),
        BackgroundTransparency = 1,
        AutomaticSize = Enum.AutomaticSize.Y,

        [children] = {
            new "Frame" {
                Size = UDim2.fromOffset(200,0),
                BackgroundColor3 = theme.background,
                AutomaticSize = Enum.AutomaticSize.Y,

                [children] = {
                    UICorner(6),
                    UIPadding(8),
                    new "UIStroke" {
                        Color = theme.border,
                        Thickness = 1.5,
                        Transparency = 0.65
                    },
                    UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,6)),
                    new "Frame" {
                        Size = UDim2.new(1,0,0,24),
                        BackgroundTransparency = 1,

                        [children] = {
                            UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center,UDim.new(0,4)),
                            new "TextLabel" {
                                Size = UDim2.new(1,-28,0,18),
                                BackgroundTransparency = 1,
                                FontFace = customFont("Inter", Enum.FontWeight.Bold),
                                TextColor3 = theme.text,
                                TextScaled = true,
                                Text = name,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                RichText = true
                            },
                            new "ImageButton" {
                                Interactable = canClose,
                                AnchorPoint = Vector2.new(1,0),
                                Position = UDim2.fromScale(1,0),
                                Size = UDim2.fromOffset(24,24),
                                BackgroundTransparency = 1,
                                Image = icons.close,
                                ImageColor3 = theme.image,
                                ImageTransparency = animate(function()
                                    return not canClose and 1 or get(close) and 0.2 or 0.4
                                end,30,1),

                                [onevent "MouseEnter"] = function()
                                    close:set(true)
                                end,

                                [onevent "MouseLeave"] = function()
                                    close:set(false)
                                end,

                                [onevent "Activated"] = function()
                                    if get(destroys) then
                                        module:Destroy()
                                    else
                                        visible:set(false)
                                    end
                                end,
                            },
                        }
                    },
                    new "Frame" {
                        Size = UDim2.new(1,0,0,0),
                        Position = UDim2.fromOffset(0,26),
                        BackgroundTransparency = 1,
                        AutomaticSize = Enum.AutomaticSize.Y,

                        [children] = _children
                    }
                }
            }
        }

    }

    local connection, onEnd = drag(module, 15)
    connections.add(connection)
    module.Destroying:Once(function()
        connection:Disconnect()
    end)
    return module, function(...)
        _children:set(...)
    end, visible
end
end)() end,
    [22] = function()local wax,script,require=ImportGlobals(22)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
    local bundles = require(chrono.Bundles)
    local theme = bundles.themeSystem
    local Fusion = bundles.Fusion
        local new = Fusion.New
        local onevent = Fusion.OnEvent
        local children = Fusion.Children
        local value = Fusion.Value
        local computed = Fusion.Computed

    local utilities = require(chrono.utilities)
    local get = utilities.get
    local animate = utilities.animate
    local getStringBounds = utilities.getStringBounds
    local customFont = utilities.customFont
    local typecheck = utilities.typecheck
    local connections = utilities.connections

    local simpleElements = require(chrono.simpleElements)
    local UICorner = simpleElements.UICorner
    local UIPadding = simpleElements.UIPadding
    local UIListLayout = simpleElements.UIListLayout
    local SO = Enum.SortOrder
    local FD = Enum.FillDirection
    local HA = Enum.HorizontalAlignment
    local VA = Enum.VerticalAlignment

    local orbs = require(chrono.components.orbs)

    -- Typecheck

    local didPass, failedItems = typecheck(property, {
        Title = "",
        Body = "",
        Duration = 1,
        Image = "",
        ImageColor = Color3.fromRGB(0,0,0),
        Buttons = {}
    }, {
        property.Image and "" or "Image",
        property.ImageColor and "" or "ImageColor",
        property.Buttons and "" or "Buttons"
    })
    assert(didPass, table.concat(failedItems, "\n"))

    -- Properties

    local title = value(property.Title)
    local body = value(property.Body)
    local duration = value(property.Duration)
    local image = value(property.Image or "")
    local imageColor = property.ImageColor and value(property.ImageColor) or theme.text
    local buttons = value(property.Buttons or {})

    -- Variables

    local loaded = value(false)
    local resized = value(false)
    local tickText = value("")
    local width = value(250)
    local function roundTo(decimal, number)
        local point = 1
        for _=1,decimal do
            point = point*10
        end
        local stringed = tostring(math.round(number*point)/point)
        local tstringed = string.split(stringed, ".")
        if #tstringed == 1 then
            local zeros = ""
            for i=1,decimal do
                zeros = zeros.."0"
            end
            stringed = stringed.."."..zeros
        end
        return stringed
    end

    -- Instances

    local newNotification,cleanup

    local buttonInstances = {}
    for _,buttonInfo in get(buttons) do
        local _didPass, _failedItems = typecheck({Button = buttonInfo}, {Button = {}})
        assert(_didPass, table.concat(_failedItems, "\n"))
        _didPass, _failedItems = typecheck(buttonInfo, {Name = "", Callback = function()end})
        assert(_didPass, table.concat(_failedItems, "\n"))

        local name = buttonInfo.Name
        local callback = buttonInfo.Callback
        local down = value(false)
        local instance = new "TextButton" {
            Size = UDim2.new(1/#get(buttons), -2, 1, -4),
            BackgroundTransparency = 1,

            [onevent "MouseButton1Down"] = function()
                down:set(true)
            end,
            [onevent "MouseButton1Up"] = function()
                down:set(false)
            end,
            [onevent "MouseLeave"] = function()
                down:set(false)
            end,

            [onevent "Activated"] = function()
                task.spawn(callback)
                resized:set(false)
                task.wait(0.4)
                loaded:set(false)
                newNotification:Destroy()
                cleanup()
            end,

            [children] = {
                UIPadding(1.5),
                new "Frame" {
                    Size = UDim2.fromScale(1,1),
                    BackgroundColor3 = computed(function()
                        return get(down) and theme.get("background2") or theme.get("background")
                    end),
                    BackgroundTransparency = computed(function()
                        return get(down) and 0.65 or 0.5
                    end),

                    [children] = {
                        new "UIStroke" {
                            Color = theme.background2,
                            Thickness = 1.5,
                            Transparency = 0.65
                        },
                        UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center,UDim.new(0,5)),
                        new "TextLabel" {
                            Size = UDim2.fromScale(0,1),
                            BackgroundTransparency = 1,
                            Text = name,
                            TextSize = 14,
                            TextColor3 = theme.text,
                            AutomaticSize = Enum.AutomaticSize.X,
                            FontFace = customFont("Inter", Enum.FontWeight.Regular),
                        }
                    }
                }
            }
        }
        table.insert(buttonInstances, instance)
    end

    newNotification = new "Frame" {
        Parent = property.Parent,
        BackgroundTransparency = 1,
        Size = UDim2.fromOffset(get(width), 0),
        AutomaticSize = Enum.AutomaticSize.Y,


        [children] = {
            UIPadding(5,0,0,0),
            new "TextButton" {
                BackgroundTransparency = 1,
                Size = UDim2.fromScale(1,1),

                [onevent "Activated"] = function()
                    resized:set(false)
                    task.wait(0.4)
                    loaded:set(false)
                    newNotification:Destroy()
                    cleanup()
                end
            },
            new "CanvasGroup" {
                AnchorPoint = Vector2.new(0,1),
                BackgroundColor3 = theme.background,
                Size = UDim2.fromScale(1,1),
                Position = animate(function()
                    return UDim2.fromScale(get(resized) and 0 or 1.2, 1)
                end,30,1),

                [children] = {
                    UICorner(6),
                }
            },
            new "Frame" {
                Size = UDim2.fromScale(1,0),
                BackgroundTransparency = 1,
                AutomaticSize = Enum.AutomaticSize.Y,
                Position = animate(function()
                    return UDim2.fromScale(get(resized) and 0 or 1.2, 0)
                end,30,1),

                [children] = {
                    UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
                    new "Frame" {
                        Visible = get(image) ~= "" and true or false,
                        Size = UDim2.new(0,24,1,0),
                        BackgroundTransparency = 1,

                        [children] = {
                            new "ImageLabel" {
                                Size = UDim2.fromOffset(24,24),
                                AnchorPoint = Vector2.new(0.5,0.5),
                                Position = UDim2.fromScale(0.5,0.5),
                                BackgroundTransparency = 1,
                                Image = image,
                                ImageColor3 = imageColor
                            }
                        }
                    },
                    UIPadding(0,4),
                    UICorner(6),
                    new "UIStroke" {
						Color = theme.get("border"),
						Thickness = 1.5,
						Transparency = 0.65
					},
                    new "Frame" {
                        Size = UDim2.new(1,get(image) ~= "" and -28 or 0,0,0),
                        BackgroundTransparency = 1,
                        AutomaticSize = Enum.AutomaticSize.Y,

                        [children] = {
                            UIPadding(2,0),
                            UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Top, UDim.new(0,2)),
                            new "TextLabel" {
                                Size = UDim2.new(1,0,0,16),
                                BackgroundTransparency = 1,
                                FontFace = customFont("Montserrat", Enum.FontWeight.Bold),
                                TextXAlignment = Enum.TextXAlignment.Left,
                                TextSize = 16,
                                RichText = true,

                                TextColor3 = theme.text,
                                Text = title
                            },
                            new "TextLabel" {
                                Size = UDim2.new(1,0,0,1),
                                AutomaticSize = Enum.AutomaticSize.Y,
                                Position = UDim2.fromOffset(8,25),
                                BackgroundTransparency = 1,
                                FontFace = customFont("Montserrat", Enum.FontWeight.Medium),
                                TextSize = 14,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                TextYAlignment = Enum.TextYAlignment.Top,
                                TextWrapped = true,
                                RichText = true,

                                TextColor3 = theme.text2,
                                Text = body
                            },
                            new "Frame" {
                                Visible = computed(function()
                                    return #get(buttons) > 0 and true or false
                                end),
                                Size = UDim2.new(1,0,0,26),
                                BackgroundTransparency = 1,

                                [children] = {
                                    UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center,UDim.new(0,2)),
                                    buttonInstances
                                }
                            },
                            new "TextLabel" {
                                Size = UDim2.new(1,0,0,10),
                                FontFace = customFont("Montserrat", Enum.FontWeight.Medium),
                                Text = tickText,
                                TextColor3 = theme.text,
                                TextSize = 10,
                                BackgroundTransparency = 1,
                                TextXAlignment = Enum.TextXAlignment.Right
                            }
                        }
                    }
                }
            }
        }
    }
    cleanup = connections.add(orbs(4, newNotification.CanvasGroup))

    task.delay(0.4,function()
        resized:set(true)
    end)
    task.spawn(function()
        repeat task.wait() until get(resized)
        local startTick = tick()
        local endTick
        repeat
            endTick = tick() - startTick
            tickText:set(roundTo(1,math.clamp(endTick,0,get(duration))))
            task.wait()
        until endTick > get(duration)
    end)
    task.spawn(function()
        loaded:set(true)
        repeat task.wait() until get(resized)
        task.wait(get(duration))
        task.wait(0.2)
        resized:set(false)
        task.wait(0.4)
        loaded:set(false)
        cleanup()
        newNotification:Destroy()
    end)
end
end)() end,
    [23] = function()local wax,script,require=ImportGlobals(23)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(quantity, parent)
    local bundles = require(chrono.Bundles)
	local theme = bundles.themeSystem
	local fusion = bundles.Fusion
	local value = fusion.Value
	local new = fusion.New

    local utilities = require(chrono.utilities)
	local randomString = utilities.randomString
	local get = utilities.get
	local animate = utilities.animate

    local maximumCircle = quantity
    local currentCircles = 0

    local randomColor = {
        theme.orb1,
        theme.orb2,
        theme.orb3,
        theme.orb4,
        theme.orb5
    }

    local instances = {}

    --local uid = randomString(8)

    local thread = coroutine.create(function()
        local _bgContainer = parent
        while true do
            if maximumCircle == currentCircles then
                task.wait()
                continue
            end
            task.wait(math.random(25,50)/100)
            --print(`generating for: {uid}`)
            currentCircles += 1
            local startingPos = UDim2.fromScale(math.random(0,100)/100,math.random(0,100)/100)
            local endingPos = UDim2.fromScale(math.random(0,100)/100,math.random(0,100)/100)
            local waitingPeriod = math.random(0,20)/10
            local position = value(startingPos)
            local _randomSize = math.random(32,256)
            local randomSize = value(UDim2.fromOffset(_randomSize, _randomSize))
            local start = value(false)
            local _circle
            _circle = new "ImageLabel" {
                ZIndex = 0,
                Name = randomString(8),
                Parent = _bgContainer,
                AnchorPoint = Vector2.new(0.5,0.5),
                Size = animate(function()
                    return get(randomSize)
                end,2,1),
                Position = animate(function()
                    return get(position)
                end,2,1.3),
                BackgroundTransparency = 1,
                Image = "rbxassetid://88314233994030",
                ImageColor3 = randomColor[math.random(1, #randomColor)],
                ImageTransparency = animate(function()
                    return get(start) and 0 or 1
                end,2,1)

            }
            table.insert(instances, _circle)
            start:set(true)
            task.spawn(function()
                repeat
                    task.wait()
                until _circle.ImageTransparency < math.random(0,500)/1000
                task.delay(waitingPeriod, function()
                    position:set(endingPos)
                    _randomSize = math.random(32,256)
                    randomSize:set(UDim2.fromOffset(_randomSize, _randomSize))
                end)
                task.delay(math.random(35,39)/10 + math.random(0,30)/20, function()
                    start:set(false)
                    currentCircles = currentCircles - 1
                    task.wait(4)
                    if _circle then
                        _circle:Destroy()
                    end
                    if table.find(instances, _circle) then
                        table.remove(instances, table.find(instances, _circle))
                    end
                end)
            end)
        end
    end)
    coroutine.resume(thread)

    return function()
        for i,v in instances do
            v:Destroy()
        end
        coroutine.close(thread)
        --print(`closed: {uid}`)
    end
end
end)() end,
    [24] = function()local wax,script,require=ImportGlobals(24)local ImportGlobals return (function(...)local chrono = script.Parent.Parent

return function(property)
    local bundles = require(chrono.Bundles)
    local data = bundles.data
    local theme = bundles.themeSystem
    local fusion = bundles.Fusion   
        local new = fusion.New
        local children = fusion.Children
        local value = fusion.Value
        local computed = fusion.Computed
        local observe = fusion.Observer

	local simpleElements = require(chrono.simpleElements)
	local UICorner = simpleElements.UICorner
	local UIPadding = simpleElements.UIPadding
	local UITextSizeConstraint = simpleElements.UITextSizeConstraint

    local utilities = require(chrono.utilities)
    local get = utilities.get
    local animate = utilities.animate
    local getStringBounds = utilities.getStringBounds
    local customFont = utilities.customFont
	local typecheck = utilities.typecheck

	-- Typecheck

	local didPass, failedItems = typecheck(property,{Title = "", Body = ""})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local selectedTab = data.find("selectedTab")
	local searchText = data.find("searchText")
	local paragraph = data.add(property)

	-- Properties

	local _parent = property.Parent
	local title = property.Title
	local body = property.Body

	-- Variables

	local isSelected = value(get(selectedTab.string) == get(paragraph.tab).uid)
	observe(selectedTab.string):onChange(function()
		isSelected:set(get(selectedTab.string) == get(paragraph.tab).uid)
	end)
	local selectedAnimation = animate(function()
		return get(isSelected) and 0 or 1
	end, 40, 1)
	local ySize = value(0)
	task.spawn(function()
		ySize:set(getStringBounds(get(body),{
			Font = customFont("Montserrat", Enum.FontWeight.Medium),
			Size = 12,
			Width = math.round(get(_parent).AbsoluteSize.X)
		}).Y)
	end)
	get(_parent).Changed:Connect(function(changedProperty)
		if changedProperty:lower() == "absolutesize" then
			ySize:set(getStringBounds(get(body),{
				Font = customFont("Montserrat", Enum.FontWeight.Medium),
                Size = 12,
                Width = math.round(get(_parent).AbsoluteSize.X)
			}).Y)
		end
	end)
	observe(body):onChange(function()
		ySize:set(getStringBounds(get(body),{
			Font = customFont("Montserrat", Enum.FontWeight.Bold),
            Size = 12,
            Width = math.round(get(_parent).AbsoluteSize.X)
		}).Y)
	end)


	-- Paragraph

	new "Frame" {
		Visible = computed(function()
			if get(searchText.string) ~= "" and not string.find(get(title):lower(), get(searchText.string):lower()) and not string.find(get(body):lower(), get(searchText.string):lower()) then
				return false
			end
			return true
		end),
		BackgroundColor3 = theme.background2,
		Parent = _parent,
		BackgroundTransparency = selectedAnimation,
		Size = computed(function()
			return UDim2.new(1,0,0,36 + get(ySize))
		end),
		AutomaticSize = Enum.AutomaticSize.Y,

		[children] = {
			UICorner(6),
			UIPadding(6),
			new "TextLabel" {
				Name = "Title",
				RichText = true,
				Size = UDim2.new(1,0,0,18),
				BackgroundTransparency = 1,
				TextTransparency = selectedAnimation,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top,
				TextScaled = true,
				TextSize = 18,
                FontFace = customFont("Montserrat", Enum.FontWeight.Bold),

				TextColor3 = theme.text,
				Text = title,

				[children] = {
					UITextSizeConstraint(1,18)
				}
			},
			new "TextLabel" {
				Name = "Body",
				TextWrapped = true,
				RichText = true,
				Position = UDim2.fromOffset(4,20),
				BackgroundTransparency = 1,
				TextTransparency = selectedAnimation,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top,
				TextSize = 12,
				FontFace = customFont("Montserrat", Enum.FontWeight.Medium),

				TextColor3 = theme.text2,
				Text = body,
				Size = computed(function()
					return UDim2.new(1,-4,0,get(ySize))
				end)
			}
		}
	}

	local returnFunctions = {}
	function returnFunctions:SetBody(newBody)
		local _didPass, _failedItems = typecheck({['SetBody'] = newBody}, {SetBody = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		body:set(newBody)
	end
	function returnFunctions:SetTitle(newTitle)
		local _didPass, _failedItems = typecheck({['SetTitle'] = newTitle}, {SetTitle = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		title:set(newTitle)
	end
	return returnFunctions
end
end)() end,
    [25] = function()local wax,script,require=ImportGlobals(25)local ImportGlobals return (function(...)local chrono = script.Parent.Parent

return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local icons = Bundles.icons
	local flagCreator = Bundles.flags
	local services = Bundles.services
		local UserInputService = services.UserInputService
		local RunService = services.RunService
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed
		local ref = Fusion.Ref

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
	local connections = utilities.connections
	local references = utilities.references

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local UICorner = simpleElements.UICorner
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = "",
		DisabledText = "",
        FLAG = "",
        Enabled = false,
		Default = 0,
        Callback = function()end,
		Min = 0,
        Max = 0,
		DisplayAsPercent = false,
		DecimalPlace = 0,
		Description = "",
		ImageDescription = "",
		Points = {}
	},{
		property.DisabledText and "" or "DisabledText",
		property.FLAG and "" or "FLAG",
		property.Callback and "" or "Callback",
		property.Enabled and "" or "Enabled",
		property.Default and "" or "Default",
		property.Min and "" or "Min",
		property.Max and "" or "Max",
		property.DisplayAsPercent and "" or "DisplayAsPercent",
		property.DecimalPlace and "" or "DecimalPlace",
		property.Description and "" or "Description",
		property.ImageDescription and "" or "ImageDescription",
		property.Points and "" or "Points"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local useConfig = data.find("useConfig")
	local componentY = data.find("componentY").number
	local instanceName = get(data.find("instanceName").name)
	local mousePosition = data.find("mousePosition").vector2
	local hideAll = data.find("hideAll")
	local slider = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local description = property.Description
	local imageDescription = property.ImageDescription
	local isEnabled = property.Enabled or value(true)
	local disabledText = property.DisabledText or value("Component Disabled")
	local callback = property.Callback or value(function() end)

	local max = property.Max
	local min = property.Min
	local points = property.Points or value({})
	local displayAsPercent = property.DisplayAsPercent or value(false)
	local roundTo = property.DecimalPlace or value(0)
	local default = get(property.Default) and value(math.clamp(get(property.Default), get(min), get(max)))
	if not get(default) then
		default = value(get(min))
	end
	local flag = flagCreator.register(get(property.FLAG) or slider.uid, {
		percentageOf = value(get(min)),
	},"slider", (get(property.FLAG) or slider.uid) == slider.uid)

	local percentageOf = flag.status.percentageOf

	-- Variables

	local function mapValue(Value, MinA, MaxA, MinB, MaxB)
		return (1 - ((Value - MinA) / (MaxA - MinA))) * MinB + ((Value - MinA) / (MaxA - MinA)) * MaxB
	end
	local function round(Value)
		if get(roundTo) == 0 then
			return math.floor(Value)
		end
		return tonumber(string.format('%.' .. get(roundTo) .. 'f', Value))
	end
	local percentage = value(0)

	connections.add(observe(percentageOf):onChange(function()
		percentage:set(mapValue(get(percentageOf), get(min), get(max), 0, 1))
		if not get(isEnabled) then
			return
		end
		task.spawn(get(callback), get(percentageOf))
	end))
	local textbuttonRef = value()
	local textboxX = value(10)
	local textBoxRef = value()
	local button1Down = value(false)
	connections.add(UserInputService.InputEnded:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and get(button1Down) then
			button1Down:set(false)
		end
	end))
	local hover = value(false)
	local screenGui = references.get(instanceName)

	-- Slider

	new "Frame" {
		Interactable = computed(function()
			if not get(isEnabled) then
				return false
			end
			if get(hideAll.boolean) or get(hideAll.all) then
				return false
			end
			return true
		end),
		Parent = _parent,
		Size = UDim2.new(1,0,0,get(componentY) + 19),
		BackgroundTransparency = 1,

		[onevent "MouseEnter"] = function()
			hover:set(true)
		end,
		[onevent "MouseLeave"] = function()
			hover:set(false)
		end,

		[children] = {
			UIPadding(1.5),
			new "TextLabel" {
				ZIndex = 2,
				Visible = computed(function()
					return not get(isEnabled)
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				Text = disabledText,
				TextColor3 = theme.text,
				TextSize = 16,
				FontFace = customFont("Inter", Enum.FontWeight.Bold),
				BackgroundTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0.3
				end,40,1),
				TextTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0
				end,40,1)
			},
			new "Frame" {
				BackgroundColor3 = theme.background,
				BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and 1 or 0.5
				end),
				Size = UDim2.fromScale(1,1),

				[children] = {
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and 1 or 0.65
						end,40,1),
					},
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Center),
					UIPadding(2),
					new "TextLabel" {
						FontFace = customFont("Inter", Enum.FontWeight.Regular),
						Size = UDim2.new(1,0,0,20),
						BackgroundTransparency = 1,
						TextColor3 = theme.text,
						TextSize = 16,
						AnchorPoint = Vector2.new(0,0.5),
						Position = UDim2.new(0,0,0.5,0),
						Text = name,
						RichText = true,
						TextTransparency = animate(function()
							return get(hideAll.boolean) and 1 or 0
						end,40,1)
					},
					new "Frame" {
						Size = UDim2.new(1,0,0,20),
						AnchorPoint = Vector2.new(1,0.5),
						Position = UDim2.new(1,0,0.5,0),
						BackgroundTransparency = 1,

						[children] = {
							UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center, UDim.new(0,10)),
							UIPadding(0,2),
							new "Frame" {
								Size = UDim2.new(0.2,-5,1,0),
								BackgroundTransparency = 1,

								[children] = {
									UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Right,VA.Center,UDim.new(0,1)),
									new "TextBox" {
										Interactable = computed(function()
											if not get(isEnabled) then
												return false
											end
											if get(hideAll.boolean) or get(hideAll.all) then
												return false
											end
											return true
										end),
										FontFace = customFont("Inter", Enum.FontWeight.Regular),
										Size = UDim2.new(0,0,0,14),
										BackgroundTransparency = 1,
										TextColor3 = theme.text,
										TextScaled = true,
										ClearTextOnFocus = true,
										AnchorPoint = Vector2.new(1,0.5),
										Position = UDim2.new(1,0,0.5,0),
										Text = computed(function()
											if get(displayAsPercent) then
												return tostring(round(get(percentage) * 100)).."%"
											end
											if get(points)[tostring(get(percentageOf))] ~= nil then
												return get(points)[tostring(get(percentageOf))]
											end
											return get(percentageOf) or ""
										end),
										TextXAlignment = Enum.TextXAlignment.Right,
										RichText = true,
										AutomaticSize = Enum.AutomaticSize.X,
										TextTransparency = animate(function()
											return get(hideAll.boolean) and 1 or 0
										end,40,1),

										[onevent "Changed"] = function(changedProperty)
											local textbox = get(textBoxRef)
											if changedProperty == "AbsoluteSize" and textbox and textbox.AbsoluteSize then
												textboxX:set(textbox.AbsoluteSize.X)
											end
										end,

										[onevent "FocusLost"] = function()
											local textbox = get(textBoxRef)
											if tonumber(textbox.Text) then
												percentageOf:set(math.clamp(tonumber(textbox.Text), get(min), get(max)))
											else
												if get(displayAsPercent) then
													textbox.Text = tostring(round(get(percentage) * 100)).."%"
												end
												textbox.Text = get(percentageOf)
											end
										end,

										[ref] = textBoxRef,

										[children] = {
											UIPadding(0,5,0,5)
										}
									},
									new "Frame"{
										BackgroundColor3 = theme.placeholder,
										BackgroundTransparency = animate(function()
											return get(hideAll.boolean) and 1 or 0
										end,40,1),
										Size = animate(function()
											return UDim2.fromOffset(get(textboxX),2)
										end,40,1),

										[children] = {
											UICorner(0,1)
										}
									}
								}
							},
							new "TextButton" {
								Interactable = computed(function()
									if not get(isEnabled) then
										return false
									end
									if get(hideAll.boolean) or get(hideAll.all) then
										return false
									end
									return true
								end),
								Size = UDim2.new(0.8,-5,1,0),
								BackgroundTransparency = 1,

								[onevent "MouseButton1Down"] = function()
									button1Down:set(true)
								end,
								[onevent "TouchLongPress"] = function()
									button1Down:set(true)
								end,
								[onevent "InputBegan"] = function(input)
									if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch and get(textbuttonRef) then
										local mPos = UserInputService:GetMouseLocation().X
										local gPos = get(textbuttonRef).Size.X.Offset
										local Diff = mPos - (get(textbuttonRef).AbsolutePosition.X + gPos)

										while get(button1Down) and task.wait() do
											local nMPos = UserInputService:GetMouseLocation().X
											local nX = math.clamp(gPos + (nMPos - mPos) + Diff, 0, get(textbuttonRef).AbsoluteSize.X)

											percentageOf:set(round(mapValue(nX, 0, get(textbuttonRef).AbsoluteSize.X, get(min), get(max))))
											RunService.RenderStepped:Wait()
										end
									end
								end,

								[ref] = textbuttonRef,

								[children] = {
									UIPadding(0,6),
									new "Frame" {
										AnchorPoint = Vector2.new(0,0.5),
										Position = UDim2.fromScale(0,0.5),
										Size = UDim2.new(1,0,0,4),
										BackgroundColor3 = theme.slider,
										BackgroundTransparency = animate(function()
											return get(hideAll.boolean) and 1 or 0
										end,40,1),

										[children] = {
											UICorner(0,1)
										}
									},
									new "Frame" {
										AnchorPoint = Vector2.new(0,0.5),
										Position = UDim2.fromScale(0,0.5),
										BackgroundColor3 = theme.text,
										Size = animate(function()
											return UDim2.new(get(percentage),0,0,4)
										end,40,1),
										BackgroundTransparency = animate(function()
											return get(hideAll.boolean) and 1 or 0
										end,40,1),

										[children] = {
											UICorner(0,1),
											new "ImageLabel" {
												Image = icons.circle,
												BackgroundTransparency = 1,
												ImageColor3 = theme.selectedTab,
												Size = UDim2.fromOffset(18,18),
												Position = UDim2.new(1,0,0.5,0),
												AnchorPoint = Vector2.new(0.5,0.5),
												ImageTransparency = animate(function()
													return get(hideAll.boolean) and 1 or 0
												end,40,1)
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	if get(description) then
		new "Frame" {
			Parent = screenGui,
			Size = UDim2.fromOffset(0,20),
			Position = computed(function()
				return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
			end),
			BackgroundTransparency = animate(function()
				return get(hover) and 0.3 or 1
			end,40,1),
			BackgroundColor3 = theme.background,
			AutomaticSize = Enum.AutomaticSize.X,

			[children] = {
				UIPadding(4),
				UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0.65
					end,40,1)
				},
				new "ImageLabel" {
					Visible = get(imageDescription) and true or false,
					Size = UDim2.fromOffset(16,16),
					BackgroundTransparency = 1,
					Image = imageDescription,
					ImageTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "TextLabel" {
					Size = UDim2.fromOffset(0,20),
					BackgroundTransparency = 1,
					Text = description,
					TextSize = 16,
					TextColor3 = theme.text,
					AutomaticSize = Enum.AutomaticSize.X,
					FontFace = customFont("Inter", Enum.FontWeight.Regular),
					TextTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				}
			}
		}
	end

	-- Closure

	flag.status.ready:set(true)

	if get(useConfig.boolean) then
		observe(flag.file):onChange(function()
			local file = get(flag.file)
			local noPercentageOf = true
			if file ~= nil then
				percentageOf:set(file)
				noPercentageOf = false
			end
			if noPercentageOf then
				percentageOf:set(get(default))
			end
		end)
		if flag.private then
			percentageOf:set(get(default))
		end
	else
		percentageOf:set(get(default))
	end

	local returnFunctions = {}
	function returnFunctions:SetName(newText)
		local _didPass, _failedItems = typecheck({['SetName'] = newText}, {SetName = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		name:set(newText)
	end
	function returnFunctions:SetValue(newValue)
		local _didPass, _failedItems = typecheck({['SetValue'] = newValue}, {SetValue = 0})
		assert(_didPass, table.concat(_failedItems, "\n"))

		percentageOf:set(math.clamp(newValue, get(min), get(max)))
	end
	function returnFunctions:Enable()
		isEnabled:set(true)
	end
	function returnFunctions:Disable()
		isEnabled:set(false)
	end
	return returnFunctions
end
end)() end,
    [26] = function()local wax,script,require=ImportGlobals(26)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed
		local ref = Fusion.Ref

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local customFont = utilities.customFont
	local references = utilities.references
	local connections = utilities.connections

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UIPadding = simpleElements.UIPadding
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	-- Typecheck

	local didPass, failedItems = typecheck(property, {
		Name = "",
		Image = ""
	},{
		property.Image and "" or "Image"
	})

	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local selectedTab = data.find("selectedTab")
	local isFirst = data.find("isFirst")
	local hideAll = data.find("hideAll")
	local tab = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local image = property.Image

	-- Variables

	local isSelected = value(false)
	connections.add(observe(selectedTab.string):onChange(function()
		local _selectedTab = get(selectedTab.string)
		isSelected:set(_selectedTab == tab.uid)
	end))

	-- Instance

	new "Frame" {
		Parent = _parent,
        Size = UDim2.new(0,0,0,24),
        BackgroundColor3 = animate(function()
			return get(isSelected) and theme.get("background2") or theme.get("background")
		end,40,1),
        AutomaticSize = Enum.AutomaticSize.X,
		BackgroundTransparency = animate(function()
			return get(hideAll.boolean) and 1 or 0.5
		end,40,1),

        [children] = {
            new "UIStroke" {
                Color = theme.background2,
                Thickness = 1.5,
                Transparency = animate(function()
					return get(hideAll.boolean) and 1 or 0.65
				end,40,1)
            },
            new "TextButton" {
				Interactable = computed(function()
					if get(hideAll.boolean) or get(hideAll.all) then
						return false
					end
					return true
				end),
                Size = UDim2.fromScale(1,1),
                BackgroundTransparency = 1,

                [onevent "Activated"] = function()
                    selectedTab:update("string", tab.uid)
                end
            },
            new "Frame" {
                Size = UDim2.fromScale(0,1),
                AutomaticSize = Enum.AutomaticSize.X,
                BackgroundTransparency = 1,

                [children] = {
                    UIPadding(0,8),
                    UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center, UDim.new(0,4)),
                    new "ImageLabel" {
						Visible = computed(function()
							return get(image) ~= nil and get(image) ~= "" and true or false
						end),
                        Size = UDim2.fromOffset(16,16),
                        BackgroundTransparency = 1,
                        Image = computed(function()
                            return get(image) or ""
                        end),
                        ImageColor3 = theme.text2,
						ImageTransparency = animate(function()
							return get(hideAll.boolean) and 1 or 0
						end,40,1)
                    },
                    new "TextLabel" {
                        Size = UDim2.fromScale(0,1),
                        AutomaticSize = Enum.AutomaticSize.X,
                        BackgroundTransparency = 1,
                        TextSize = 16,
                        Text = name,
                        TextColor3 = theme.text2,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        FontFace = customFont("Inter", Enum.FontWeight.Medium),
						TextTransparency = animate(function()
							return get(hideAll.boolean) and 1 or 0
						end,40,1)
                    },
                }
            }
        }
	}

	local ABC = value(0)
	local AWS = value(0)
	local tabFrameRef = value()

	local tabFrame = new "ScrollingFrame" {
        Name = tab.uid,
		Parent = references.get("tabFrameList"),
        Size = UDim2.new(1,0,1,0),
        BackgroundTransparency = 1,
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        ScrollBarThickness = 6,
		ScrollBarImageColor3 = theme.primary,
		BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
		TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
        ScrollingDirection = Enum.ScrollingDirection.Y,
        CanvasSize = UDim2.new(0,0,1,0),

		[ref] = tabFrameRef,

		[onevent "Changed"] = function()
			if not get(tabFrameRef) then
				return
			end
			ABC:set(get(tabFrameRef).AbsoluteCanvasSize.X)
			AWS:set(get(tabFrameRef).AbsoluteWindowSize.X)
		end,

        [children] = {
			UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Top,UDim.new(0,4)),
			new "UIPadding" {
				PaddingLeft = UDim.new(0,2),
				PaddingRight = computed(function()
					if get(ABC) and get(AWS) and get(ABC) - get(AWS) - 4 > 0 then
						return UDim.new(0,8)
					end
					return UDim.new(0,2)
				end)
			},
			new "Frame" {
				Name = "left",
				AutomaticSize = Enum.AutomaticSize.Y,
				Size = UDim2.new(0.5,-2,0,0),
				BackgroundTransparency = 1,

				[children] = {
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,4)),
				}
			},
			new "Frame" {
				Name = "right",
				AutomaticSize = Enum.AutomaticSize.Y,
				Size = UDim2.new(0.5,-2,0,0),
				BackgroundTransparency = 1,

				[children] = {
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Top,UDim.new(0,4)),
				}
			}
        }
    }
	connections.add(observe(isSelected):onChange(function()
		if get(isSelected) then
			references.get("UIPageLayout"):JumpTo(tabFrame)
		end
	end))

	if not get(isFirst.boolean) then
		isFirst:update("boolean", true)
		selectedTab:update("string", tab.uid)
	end
	return tab, tabFrame
end
end)() end,
    [27] = function()local wax,script,require=ImportGlobals(27)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local bundles = require(chrono.Bundles)
	local data = bundles.data
	local theme = bundles.themeSystem
	local icons = bundles.icons
	local flagCreator = bundles.flags
	local Fusion = bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local computed = Fusion.Computed
		local observe = Fusion.Observer
		local ref = Fusion.Ref
		local onevent = Fusion.OnEvent

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local customFont = utilities.customFont
	local typecheck = utilities.typecheck
	local connections = utilities.connections
	local references = utilities.references

	local simpleElements = require(chrono.simpleElements)
	local UIPadding = simpleElements.UIPadding
	local UIListLayout = simpleElements.UIListLayout
	local SO = Enum.SortOrder
	local VA = Enum.VerticalAlignment
	local HA = Enum.HorizontalAlignment
	local FD = Enum.FillDirection

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = "",
        Placeholder = "",
		DisabledText = "",
        ClearTextOnFocus = false,
        OnlyNumbers = true,
        OnLeave = true,
        Default = "",
        FLAG = "",
        Enabled = false,
        Callback = function()end
	},{
		property.Placeholder and "" or "Placeholder",
		property.Enabled and "" or "Enabled",
		property.Callback and "" or "Callback",
		property.ClearTextOnFocus and "" or "ClearTextOnFocus",
		property.OnlyNumbers and "" or "OnlyNumbers",
		property.OnLeave and "" or "OnLeave",
		property.Default and "" or "Default",
		property.FLAG and "" or "FLAG",
		property.DisabledText and "" or "DisabledText"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local useConfig = data.find("useConfig")
	local instanceName = get(data.find("instanceName").name)
	local mousePosition = data.find("mousePosition").vector2
	local componentY = data.find("componentY").number
	local hideAll = data.find("hideAll")
	local textbox = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local description = property.Description
	local imageDescription = property.ImageDescription
	local isEnabled = property.Enabled or value(true)
	local disabledText = property.DisabledText or value("Component Disabled")
	local callback = property.Callback or value(function() end)

	local onlyNumbers = property.OnlyNumbers or value(false)
	local default = property.Default or value("")
	local onLeave = property.OnLeave or value(false)
	local clearTextOnFocus = property.ClearTextOnFocus or value(false)
	local placeHolder = property.Placeholder or value("")
	local flag = flagCreator.register(get(property.FLAG) or textbox.uid, {
		correctText = value(""),
	},"textbox", (get(property.FLAG) or textbox.uid) == textbox.uid)

	-- Variables

	local textboxRef = value()
	local focused = value(false)
	local correctText = flag.status.correctText
	local lastCorrectText = value(get(correctText))
	local lastCalled = value("")
	local hover = value(false)
	local screenGui = references.get(instanceName)

	connections.add(observe(correctText):onChange(function()
		if get(onlyNumbers) then
			if tonumber(get(correctText)) or get(correctText) == "" then
				lastCorrectText:set(get(correctText))
			end
		else
			lastCorrectText:set(get(correctText))
		end
		local textBox = get(textboxRef)
		textBox.Text = get(lastCorrectText)
		if get(onLeave) then
			return
		end
		if get(onlyNumbers) then
			if (tonumber(get(correctText)) or get(correctText) == "") and get(lastCalled) ~= get(correctText) then
				task.spawn(get(callback), get(correctText))
				lastCalled:set(get(correctText))
			end
		else
			if get(lastCalled) == get(correctText) then
				return
			end
			task.spawn(get(callback), get(correctText))
			lastCalled:set(get(correctText))
		end
	end))
	connections.add(observe(focused):onChange(function()
		if get(onLeave) and not get(focused) then
			if get(onlyNumbers) then
				if (tonumber(get(correctText)) or get(correctText) == "") and get(lastCalled) ~= get(correctText) then
					task.spawn(get(callback), get(correctText))
					lastCalled:set(get(correctText))
				end
			else
				if get(lastCalled) == get(correctText) then
					return
				end
				task.spawn(get(callback), get(correctText))
				lastCalled:set(get(correctText))
			end
		end
	end))

	-- TextBox

	new "Frame" {
		Interactable = computed(function()
			if not get(isEnabled) then
				return false
			end
			if get(hideAll.boolean) or get(hideAll.all) then
				return false
			end
			return true
		end),
		Parent = _parent,
		BackgroundTransparency = 1,
		Size = UDim2.new(1,0,0,get(componentY) + 19),

		[onevent "MouseEnter"] = function()
			hover:set(true)
		end,
		[onevent "MouseLeave"] = function()
			hover:set(false)
		end,

		[children] = {
			UIPadding(1.5),
			new "TextLabel" {
				ZIndex = 2,
				Visible = computed(function()
					return not get(isEnabled)
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				Text = disabledText,
				TextColor3 = theme.text,
				TextSize = 16,
				FontFace = customFont("Inter", Enum.FontWeight.Bold),
				BackgroundTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0.3
				end,40,1),
				TextTransparency = animate(function()
					return get(hideAll.boolean) and 1 or 0
				end,40,1)
			},
			new "Frame" {
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and 1 or 0.5
				end),

				[children] = {
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and 1 or 0.65
						end,40,1),
					},
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Center),
					UIPadding(2),
					new "TextLabel" {
						FontFace = customFont("Inter", Enum.FontWeight.Regular),
						Size = UDim2.new(1,0,0,20),
						BackgroundTransparency = 1,
						TextColor3 = theme.text,
						TextSize = 16,
						AnchorPoint = Vector2.new(0,0.5),
						Position = UDim2.new(0,0,0.5,0),
						Text = name,
						RichText = true,
						TextTransparency = animate(function()
							return get(hideAll.boolean) and 1 or 0
						end,40,1),
					},
					new "TextButton" {
						Interactable = computed(function()
							if not get(isEnabled) then
								return false
							end
							if get(hideAll.boolean) or get(hideAll.all) then
								return false
							end
							return true
						end),
						Size = UDim2.new(1,0,1,-20),
						BackgroundColor3 = theme.textbox,
						BackgroundTransparency = animate(function()
							return get(hideAll.boolean) and 1 or 0.75
						end,40,1),

						[onevent "Activated"] = function()
							local _textbox = get(textboxRef)
							if _textbox then
								_textbox:CaptureFocus()
							end
						end,

						[children] = {
							UIPadding(0,6),
							UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,5)),
							new "ImageLabel" {
								ZIndex = 0,
								Size = UDim2.fromOffset(20,20),
								BackgroundTransparency = 1,
								Image = icons.input,
								ImageColor3 = theme.textbox,
								ImageTransparency = animate(function()
									return get(hideAll.boolean) and 1 or 0
								end,40,1)
							},
							new "TextBox" {
								Interactable = computed(function()
									if not get(isEnabled) then
										return false
									end
									if get(hideAll.boolean) or get(hideAll.all) then
										return false
									end
									return true
								end),
								ClipsDescendants = true,
								Size = UDim2.new(1,-25,1,0),
								BackgroundTransparency = 1,
								PlaceholderText = placeHolder,
								PlaceholderColor3 = theme.placeholder,
								TextColor3 = theme.text,
								TextSize = 16,
								TextXAlignment = Enum.TextXAlignment.Left,
								FontFace = customFont("Inter", Enum.FontWeight.Medium),
								Text = lastCorrectText,
								ClearTextOnFocus = clearTextOnFocus,
								TextTransparency = animate(function()
									return get(hideAll.boolean) and 1 or 0
								end,40,1),

								[ref] = textboxRef,

								[onevent "Changed"] = function(changedProperty)
									local _textbox = get(textboxRef)
									if _textbox and _textbox.Text and changedProperty == "Text" then
										correctText:set(_textbox.Text)
									end
								end,

								[onevent "Focused"] = function()
									focused:set(true)
								end,
								[onevent "FocusLost"] = function()
									focused:set(false)
								end
							}
						}
					}
				}
			}
		}
	}

	if get(description) then
		new "Frame" {
			Parent = screenGui,
			Size = UDim2.fromOffset(0,20),
			Position = computed(function()
				return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
			end),
			BackgroundTransparency = animate(function()
				return get(hover) and 0.3 or 1
			end,40,1),
			BackgroundColor3 = theme.background,
			AutomaticSize = Enum.AutomaticSize.X,

			[children] = {
				UIPadding(4),
				UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0.65
					end,40,1)
				},
				new "ImageLabel" {
					Visible = get(imageDescription) and true or false,
					Size = UDim2.fromOffset(16,16),
					BackgroundTransparency = 1,
					Image = imageDescription,
					ImageTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "TextLabel" {
					Size = UDim2.fromOffset(0,20),
					BackgroundTransparency = 1,
					Text = description,
					TextSize = 16,
					TextColor3 = theme.text,
					AutomaticSize = Enum.AutomaticSize.X,
					FontFace = customFont("Inter", Enum.FontWeight.Regular),
					TextTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				}
			}
		}
	end

	-- Closure

	flag.status.ready:set(true)

	if get(useConfig.boolean) then
		observe(flag.file):onChange(function()
			local file = get(flag.file)
			local noCorrectText = true
			if file ~= nil then
				if get(onLeave) then
					focused:set(true)
				end
				correctText:set(file)
				if get(onLeave) then
					focused:set(false)
				end
				noCorrectText = false
			end
			if noCorrectText then
				if get(onLeave) then
					focused:set(true)
				end
				correctText:set(get(default))
				if get(onLeave) then
					focused:set(false)
				end
			end
		end)
		if flag.private then
			if get(onLeave) then
				focused:set(true)
			end
			correctText:set(get(default))
			if get(onLeave) then
				focused:set(false)
			end
		end
	else
		if get(onLeave) then
			focused:set(true)
		end
		print(get(default))
		correctText:set(get(default))
		if get(onLeave) then
			focused:set(false)
		end
	end

	local returnFunctions = {}
	function returnFunctions:SetName(newText)
		local _didPass, _failedItems = typecheck({['SetName'] = newText}, {SetName = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		name:set(newText)
	end
	function returnFunctions:SetInput(newInput)
		local _didPass, _failedItems = typecheck({['SetInput'] = newInput}, {SetInput = get(onlyNumbers) and 1 or ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		correctText:set(newInput)
	end
	function returnFunctions:Enable()
		isEnabled:set(true)
	end
	function returnFunctions:Disable()
		isEnabled:set(false)
	end
	return returnFunctions
end
end)() end,
    [28] = function()local wax,script,require=ImportGlobals(28)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property)
	local Bundles = require(chrono.Bundles)
	local data = Bundles.data
	local theme = Bundles.themeSystem
	local icons = Bundles.icons
	local flagCreator = Bundles.flags
	local services = Bundles.services
	local UserInputService = services.UserInputService
	local Fusion = Bundles.Fusion
		local new = Fusion.New
		local children = Fusion.Children
		local value = Fusion.Value
		local observe = Fusion.Observer
		local onevent = Fusion.OnEvent
		local computed = Fusion.Computed

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local animate = utilities.animate
	local typecheck = utilities.typecheck
	local connections = utilities.connections
	local customFont = utilities.customFont
	local references = utilities.references


	local simpleElements = require(chrono.simpleElements)
	local UIPadding = simpleElements.UIPadding
	local UITextSizeConstraint = simpleElements.UITextSizeConstraint
	local UIListLayout = simpleElements.UIListLayout
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	local _warn = require(script.Parent.warn)[1]
	local orbs = require(script.Parent.orbs)

	-- Typecheck

	local didPass, failedItems = typecheck(property,{
		Name = "",
		DisabledText = "",
        FLAG = "",
        Enabled = false,
		Default = false,
        Callback = function()end,
		LinkKeybind = true,
		Bind = Enum.KeyCode.A
	},{
		property.DisabledText and "" or "DisabledText",
		property.FLAG and "" or "FLAG",
		property.Bind and "" or "Bind",
		property.Enabled and "" or "Enabled",
		property.Callback and "" or "Callback",
		property.Default and "" or "Default",
		property.LinkKeybind and "" or "LinkKeybind"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	didPass, failedItems = typecheck(property,{
		Bind = Enum.KeyCode.E
	},{
		property.LinkKeybind and property.Bind and "" or "Bind"
	})
	assert(didPass, table.concat(failedItems, "\n"))

	-- Data

	local useConfig = data.find("useConfig")
	local currentBinds = data.find("currentBinds")
	local capturing = data.find("capturing")
	local instanceName = get(data.find("instanceName").name)
	local mousePosition = data.find("mousePosition").vector2
	local bindData = data.find("bindData")
	local blacklistedKeys = get(data.find("blacklistedKeys").keys)
	local componentY = data.find("componentY").number
	local hideAll = data.find("hideAll")
	local toggle = data.add(property)

	-- Properties

	local _parent = property.Parent
	local name = property.Name
	local description = property.Description
	local imageDescription = property.ImageDescription
	local isEnabled = property.Enabled or value(true)
	local disabledText = property.DisabledText or value("Component Disabled")
	local callback = property.Callback or value(function() end)

	local default = property.Default or value(false)
	local bind = property.Bind
	local linkKeybind = property.LinkKeybind or value(false)
	local flag = flagCreator.register(get(property.FLAG) or toggle.uid, {
		boolean = value(false),
		keybind = value(nil)
	},"toggle", (get(property.FLAG) or toggle.uid) == toggle.uid)
	local boolean = flag.status.boolean
	local keybind = flag.status.keybind

	observe(boolean):onChange(function()
		task.spawn(get(callback), get(boolean))
	end)

	-- Variables

	local down = value(false)
	local keyCode = value()
	local function checkKeyCode(_keycode: EnumItem, dupeMessage:string)
		local _currentBinds = get(currentBinds.binds)
		local _bindData = get(bindData.bindData)
		if _keycode == nil then
			if get(keyCode) ~= nil then
				_bindData[get(keyCode).Name] = nil
				_bindData.boolean = nil
			end
			table.remove(_currentBinds, table.find(_currentBinds, get(keyCode)))
			keyCode:set(nil)
			bindData:update("bindData", _bindData)
			currentBinds:update("binds", _currentBinds)
			return
		end
		if table.find(_currentBinds, _keycode) then
			_warn(("Key %s is already in use. %s"):format(_keycode.Name, dupeMessage))
		elseif table.find(blacklistedKeys, _keycode) then
			_warn(("Blacklisted Key: %s"):format(_keycode.Name))
		else
			table.insert(_currentBinds, _keycode)
			if get(keyCode) then
				table.remove(_currentBinds, table.find(_currentBinds, get(keyCode)))
				_bindData[get(keyCode).Name] = nil
				_bindData.boolean = nil
			end
			keyCode:set(_keycode)
			_bindData[get(keyCode).Name] = {
				bind = get(keyCode),
				boolean = boolean,
				name = get(name)
			}
			bindData:update("bindData", _bindData)
			currentBinds:update("binds", _currentBinds)
		end
	end
	connections.add(observe(keyCode):onChange(function()
		keybind:set(get(keyCode) ~= nil and get(keyCode).Name or nil)
	end))
	local hover = value(false)
	local screenGui = references.get(instanceName)

	-- Toggle

	local inst = new "TextButton" {
		Interactable = computed(function()
			if not get(isEnabled) then
				return false
			end
			if get(hideAll.boolean) or get(hideAll.all) then
				return false
			end
			return true
		end),
		Name = toggle.uid,
		Parent = _parent,
		Size = UDim2.new(1,0,0,get(componentY)),
		BackgroundTransparency = 1,

		[onevent "MouseButton1Down"] = function()
			down:set(true)
		end,
		[onevent "MouseButton1Up"] = function()
			down:set(false)
		end,
		[onevent "MouseEnter"] = function()
			hover:set(true)
		end,
		[onevent "MouseLeave"] = function()
			down:set(false)
			hover:set(false)
		end,

		[onevent "Activated"] = function()
			boolean:set(not get(boolean))
		end,

		[children] = {
			UIPadding(1.5),
			new "TextLabel" {
				ZIndex = 2,
				Visible = computed(function()
					return not get(isEnabled)
				end),
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = theme.background,
				Text = disabledText,
				TextColor3 = theme.text,
				TextSize = 16,
				FontFace = customFont("Inter", Enum.FontWeight.Bold),
				BackgroundTransparency = animate(function()
					return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or 0.3
				end,40,1),
				TextTransparency = animate(function()
					return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or 0
				end,40,1)
			},
			new "Frame" {
				Size = UDim2.fromScale(1,1),
				BackgroundColor3 = computed(function()
					return get(down) and theme.get("background2") or theme.get("background")
				end),
				BackgroundTransparency = computed(function()
					return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or get(down) and 0.65 or 0.7
				end),

				[children] = {
					UIPadding(2),
					new "UIStroke" {
						Color = theme.background2,
						Thickness = 1.5,
						Transparency = animate(function()
							return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or 0.65
						end,40,1)
					},
					UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Center,VA.Center,UDim.new(0,5)),
					new "Frame" {
						Size = UDim2.fromOffset(21,21),
						BackgroundTransparency = 1,
						ClipsDescendants = true,

						[children] = {
							new "ImageLabel" {
								Size = UDim2.fromScale(1,1),
								BackgroundTransparency = 1,
								Position = animate(function()
									return get(boolean) and UDim2.fromScale(0,-1) or UDim2.fromScale(0,0)
								end,40,0.9),
								Image = icons.close,
								ImageColor3 = theme.toggle2,
								ImageTransparency = animate(function()
									return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or get(boolean) and 1 or 0
								end,40,1)
							},
							new "ImageLabel" {
								Size = UDim2.fromScale(1,1),
								BackgroundTransparency = 1,
								Position = animate(function()
									return get(boolean) and UDim2.fromScale(0,0) or UDim2.fromScale(0,1)
								end,40,0.9),
								Image = icons.check,
								ImageColor3 = theme.toggle1,
								ImageTransparency = animate(function()
									return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or get(boolean) and 0 or 1
								end,40,1)
							},
						}
					},
					new "TextLabel" {
						Size = UDim2.new(1,get(linkKeybind) and -52 or -26,1),
						BackgroundTransparency = 1,
						Text = computed(function()
							return `{get(name)}{get(keybind) ~= nil and ` <font size="12"><i>{get(keybind)}</i></font>` or ""}`
						end),
						TextSize = 16,
						TextColor3 = theme.text,
						RichText = true,
						FontFace = customFont("Inter", Enum.FontWeight.Regular),
						TextTransparency = animate(function()
							return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or 0
						end,40,1)
					},
					new "TextButton" {
						Interactable = computed(function()
							if not get(isEnabled) then
								return false
							end
							if get(hideAll.boolean) or get(hideAll.all) then
								return false
							end
							return true
						end),
						Visible = linkKeybind,
						Size = UDim2.new(0,21,0,21),
						BackgroundTransparency = 1,
						ClipsDescendants = true,

						[onevent "Activated"] = function()
							capturing:update("instance", toggle.uid)
							capturing:update("boolean", true)
							hideAll:update('boolean', true)
							hideAll:update('all', true)
						end,


						[children] = {
							UITextSizeConstraint(1,16),
							new "ImageLabel" {
								AnchorPoint = Vector2.new(0.5,0.5),
								Position = UDim2.fromScale(0.5,0.5),
								Size = UDim2.fromScale(0.8,0.8),
								BackgroundTransparency = 1,
								Image = icons.command,
								ImageColor3 = theme.image,
								ImageTransparency = animate(function()
									return get(hideAll.boolean) and get(capturing.instance) ~= toggle.uid and 1 or 0
								end,40,1)
							}
						}
					}
				}
			}
		}
	}

	new "TextButton" {
		Visible = computed(function()
			return get(capturing.instance) == toggle.uid
		end),
		Interactable = isEnabled,
		Parent = references.get("capture"),
		Size = UDim2.fromScale(1,1),
		BackgroundTransparency = 1,

		[onevent "Activated"] = function()
			capturing:update("boolean", false)
			capturing:update("instance", "")
			hideAll:update('boolean', false)
			hideAll:update('all', false)
		end,

		[children] = {
			UIPadding(6),
			UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Center,UDim.new(0,5)),
			new "TextLabel" {
				Size = UDim2.new(1,0,0,20),
				BackgroundTransparency = 1,
				Text = "Listening For Key . . .",
				FontFace = customFont("Inter", Enum.FontWeight.SemiBold),
				TextColor3 = theme.text,
				TextSize = 20,
			},
			new "TextButton" {
				Size = UDim2.new(1,0,0,26),
				BackgroundTransparency = 0.7,
				BackgroundColor3 = theme.background2,
				Text = "CLICK HERE TO CLEAR BIND",
				FontFace = customFont("Inter", Enum.FontWeight.SemiBold),
				TextColor3 = theme.red,
				TextSize = 20,

				[onevent "Activated"] = function()
					capturing:update("boolean", false)
					capturing:update("instance", "")
					hideAll:update('boolean', false)
					checkKeyCode(nil, "Deletion")
				end,
			},
			new "TextLabel" {
				Size = UDim2.new(1,0,0,14),
				BackgroundTransparency = 1,
				Text = "Click anywhere to close",
				FontFace = customFont("Inter", Enum.FontWeight.SemiBold),
				TextColor3 = theme.text,
				TextTransparency = 0.5,
				TextSize = 14
			},
		}
	}

	if get(description) then
		new "Frame" {
			Parent = screenGui,
			Size = UDim2.fromOffset(0,20),
			Position = computed(function()
				return UDim2.fromOffset(get(mousePosition).X +12, get(mousePosition).Y)
			end),
			BackgroundTransparency = animate(function()
				return (get(hideAll.boolean) or not get(hover)) and 1 or 0.3
			end,40,1),
			BackgroundColor3 = theme.background,
			AutomaticSize = Enum.AutomaticSize.X,

			[children] = {
				UIPadding(4),
				UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,4)),
				new "UIStroke" {
					Color = theme.background2,
					Thickness = 1.5,
					Transparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0.65
					end,40,1)
				},
				new "ImageLabel" {
					Visible = get(imageDescription) and true or false,
					Size = UDim2.fromOffset(16,16),
					BackgroundTransparency = 1,
					Image = imageDescription,
					ImageTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				},
				new "TextLabel" {
					Size = UDim2.fromOffset(0,20),
					BackgroundTransparency = 1,
					Text = description,
					TextSize = 16,
					TextColor3 = theme.text,
					AutomaticSize = Enum.AutomaticSize.X,
					FontFace = customFont("Inter", Enum.FontWeight.Regular),
					TextTransparency = animate(function()
						return (get(hideAll.boolean) or not get(hover)) and 1 or 0
					end,40,1)
				}
			}
		}
	end

	local keybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if get(capturing.instance) == toggle.uid then
			if input.KeyCode and input.KeyCode ~= Enum.KeyCode.Unknown then
				checkKeyCode(input.KeyCode, "From input box")
				capturing:update("boolean", false)
				capturing:update("instance", "")
				hideAll:update('boolean', false)
				hideAll:update('all', false)
			end
		else
			if input.KeyCode and input.KeyCode == get(keyCode) and get(capturing.instance) == "" and not gameProcessed and get(isEnabled) then
				boolean:set(not get(boolean))
			end
		end
	end)
	connections.add(keybindConnection)

	-- Closure

	flag.status.ready:set(true)

	if get(useConfig.boolean) then
		observe(flag.file):onChange(function()
			local file = get(flag.file)
			local noBoolean = true
			local noKeyCode = true
			if file.boolean ~= nil then
				boolean:set(file.boolean)
				noBoolean = false
			end
			if file.keycode ~= nil then
				checkKeyCode(Enum.KeyCode[file.keycode], "From file")
				noKeyCode = false
			end
			if noBoolean then
				boolean:set(get(default))
			end
			if noKeyCode then
				if bind then
					checkKeyCode(get(bind), "From file noKeyCode")
				end
			end
		end)
		if flag.private then
			boolean:set(get(default))
			if bind then
				checkKeyCode(get(bind), "From file private")
			end
		end
	else
		boolean:set(get(default))
		if bind then
			checkKeyCode(get(bind), "From default")
		end
	end

	local returnFunctions = {}
	function returnFunctions:SetName(newText)
		local _didPass, _failedItems = typecheck({['SetName'] = newText}, {SetName = ""})
		assert(_didPass, table.concat(_failedItems, "\n"))

		name:set(newText)
	end
	function returnFunctions:SetValue(newValue:boolean)
		local _didPass, _failedItems = typecheck({['SetValue'] = newValue}, {['SetValue'] = true})
		assert(_didPass, table.concat(_failedItems, "\n"))

		boolean:set(newValue)
	end
	function returnFunctions:SetBind(newBind:EnumItem)
		assert(get(linkKeybind), "Requires LinkKeybind")
		local _didPass, _failedItems = typecheck({['SetBind'] = newBind}, {['SetBind'] = Enum.keyCode.C})
		assert(_didPass, table.concat(_failedItems, "\n"))

		checkKeyCode(newBind, "At :SetBind")
	end
	function returnFunctions:Enable()
		isEnabled:set(true)
	end
	function returnFunctions:Disable()
		isEnabled:set(false)
	end
	return returnFunctions
end
end)() end,
    [29] = function()local wax,script,require=ImportGlobals(29)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
local title = ""

local returnTable = {}
table.insert(returnTable, function(body)
    local bundles = require(chrono.Bundles)
    local notificaton = require(script.Parent.notification)
    local references = require(chrono.utilities).references
    local icons = bundles.icons
    local theme = bundles.themeSystem
    notificaton({
        Parent = references.get("notificationList"),
        Title = title,
        Body = body,
        Duration = 3,
        Image = icons.alert,
        ImageColor = theme.get("red")
    })
end)
table.insert(returnTable, function(newTitle)
    title = newTitle
end)

return returnTable
end)() end,
    [31] = function()local wax,script,require=ImportGlobals(31)local ImportGlobals return (function(...)local chrono = script.Parent.Parent
return function(property, bindableEvent)
	local bundles = require(chrono.Bundles)
	local data = bundles.data
	local services = bundles.services
	local UserInputService = services.UserInputService
	local RunService = services.RunService
	local theme = bundles.themeSystem
	local icons = bundles.icons
	local Fusion = bundles.Fusion
	local new = Fusion.New
	local children = Fusion.Children
	local value = Fusion.Value
	local ref = Fusion.Ref
	local computed = Fusion.Computed
	local onevent = Fusion.OnEvent

	local simpleElements = require(chrono.simpleElements)
	local UIListLayout = simpleElements.UIListLayout
	local UICorner = simpleElements.UICorner
	local UIPadding = simpleElements.UIPadding
	local SO = Enum.SortOrder
	local FD = Enum.FillDirection
	local HA = Enum.HorizontalAlignment
	local VA = Enum.VerticalAlignment

	local utilities = require(chrono.utilities)
	local get = utilities.get
	local references = utilities.references
	local drag = utilities.drag
	local customFont = utilities.customFont
	local animate = utilities.animate
	local connections = utilities.connections

	local logPage = require(chrono.components.logPage)
	local orbs = require(chrono.components.orbs)

	-- References

	local container = value()
	local tabButtonList = value()
	local tabFrameList = value()
	local notificationList = value()
	local chronoref = value()
	local resizer = value()
	local uipagelayout = value()
	local uipagelayout2 = value()
	local privateFrameList = value()
	local publicFrameList = value()
	local capture = value()
	local stats = value()
	references.add(chronoref,notificationList,tabFrameList,tabButtonList,container,uipagelayout,uipagelayout2,privateFrameList,capture,publicFrameList,stats)

	-- Data

	local instanceName = data.find("instanceName")
	local selectedTab = data.find("selectedTab")
	local hideAll = data.find("hideAll")
	local visible = data.find("visible")

	-- Properties

	local title = value(property.Title)
	local description = value(property.Description)
	local icon = value(property.Icon)

	-- Variables

	local hovers = {
		close = value(false),
		stats = value(false),
		log = value(false),
		left = value(false),
		right = value(false)
	}
	local downs = {
		left = value(false),
		right = value(false)
	}
	local size = value(UDim2.fromOffset(450,500))
	local heartbeat
	local isResizing = value(false)

	local ABC = value(0)
	local AWS = value(0)

	local cachedTab = ""

	-- Instance

	new "ScreenGui" {
		Enabled = visible.boolean,
		Name = get(instanceName.name),
		Parent = property.Parent or services.CoreGui,
		ResetOnSpawn = false,

		[ref] = chronoref,

		[children] = {
			new "Frame" {
				Position = UDim2.new(0.5,-get(size).X.Offset/2,0.5,-get(size).Y.Offset/2),
				Size = computed(function()
					return get(size)
				end),
				BackgroundColor3 = theme.background,
				--BackgroundTransparency = 0.3,

				[ref] = container,

				[children] = {
					UICorner(6),
					new "UIStroke" {
						Color = theme.get("border"),
						Thickness = 1.5,
						Transparency = 0.65
					},
					new "CanvasGroup" { -- Orb Container
						ClipsDescendants = true,
						BackgroundTransparency = 1,
						Size = computed(function()
							return get(size)
						end),

						[children] = {
							UICorner(6)
						}
					},
					new "Frame" {
						Size = UDim2.fromScale(1,1),
						BackgroundTransparency = 1,

						[children] = {
							UIPadding(6),
							UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top, UDim.new(0,6)),
							new "Frame" { -- Top
								Size = UDim2.new(1,0,0,24),
								BackgroundTransparency = 1,

								[children] = {
									UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center, UDim.new(0,6)),
									new "ImageLabel" { -- Icon
										Visible = computed(function()
											return get(icon) ~= "" and true or false
										end),
										Size = UDim2.fromOffset(24,24),
										BackgroundTransparency = 1,
										Image = computed(function()
											return get(icon) ~= "" and get(icon) or ""
										end),
										ImageTransparency = animate(function()
											return get(hideAll.boolean) and get(hideAll.all) and 1 or 0
										end,40,1)
									},
									new "TextLabel" { -- Title
										FontFace = customFont("Inter", Enum.FontWeight.Bold),
										Text = title,
										TextColor3 = theme.text,
										TextScaled = true,
										TextXAlignment = Enum.TextXAlignment.Left,
										BackgroundTransparency = 1,
										Size = UDim2.new(1,get(icon) ~= "" and -(30*4) or -(30*3),0,24),
										TextTransparency = animate(function()
											return get(hideAll.boolean) and get(hideAll.all) and 1 or 0
										end,40,1)
									},
									new "ImageButton" { -- Stats
										Size = UDim2.fromOffset(24,24),
										BackgroundTransparency = 1,
										Image = icons.stats,
										ImageColor3 = theme.image,
										ImageTransparency = animate(function()
											return get(hovers.stats) and 0.2 or 0.4
										end,30,1),

										[onevent "MouseEnter"] = function()
											hovers.stats:set(true)
										end,

										[onevent "MouseLeave"] = function()
											hovers.stats:set(false)
										end,

										[onevent "Activated"] = function()
											if get(selectedTab.string) ~= "stats" then
												cachedTab = (get(selectedTab.string) ~= "log" and get(selectedTab.string) ~= "stats") and get(selectedTab.string) or cachedTab
												selectedTab:update("string", "stats")
												get(privateFrameList).UIPageLayout:JumpTo(get(privateFrameList).stats)
												get(uipagelayout2):JumpTo(get(privateFrameList))
											else
												selectedTab:update("string", cachedTab)
												cachedTab = cachedTab
												get(uipagelayout2):JumpTo(get(publicFrameList))
											end
										end,
									},
									new "ImageButton" { -- Log
										Size = UDim2.fromOffset(24,24),
										BackgroundTransparency = 1,
										Image = icons.log,
										ImageColor3 = theme.image,
										ImageTransparency = animate(function()
											return get(hovers.log) and 0.2 or 0.4
										end,30,1),

										[onevent "MouseEnter"] = function()
											hovers.log:set(true)
										end,

										[onevent "MouseLeave"] = function()
											hovers.log:set(false)
										end,

										[onevent "Activated"] = function()
											if get(selectedTab.string) ~= "log" then
												cachedTab = (get(selectedTab.string) ~= "log" and get(selectedTab.string) ~= "stats") and get(selectedTab.string) or cachedTab
												selectedTab:update("string", "log")
												get(privateFrameList).UIPageLayout:JumpTo(get(privateFrameList).log)
												get(uipagelayout2):JumpTo(get(privateFrameList))
											else
												selectedTab:update("string", cachedTab)
												cachedTab = cachedTab
												get(uipagelayout2):JumpTo(get(publicFrameList))
											end
										end,
									},
									new "ImageButton" { -- Close
										Size = UDim2.fromOffset(24,24),
										BackgroundTransparency = 1,
										Image = icons.close,
										ImageColor3 = theme.image,
										ImageTransparency = animate(function()
											return get(hovers.close) and 0.2 or 0.4
										end,30,1),

										[onevent "MouseEnter"] = function()
											hovers.close:set(true)
										end,

										[onevent "MouseLeave"] = function()
											hovers.close:set(false)
										end,

										[onevent "Activated"] = function()
											visible:update("boolean", false)
										end,
									}
								}
							},
							new "TextLabel" { -- Description
								Visible = computed(function()
									return get(description) ~= nil and #get(description) > 0 and true or false
								end),
								FontFace = customFont("Inter", Enum.FontWeight.Medium),
								Text = description,
								TextColor3 = theme.text,
								TextScaled = true,
								TextXAlignment = Enum.TextXAlignment.Left,
								BackgroundTransparency = 1,
								Size = UDim2.new(1,0,0,16),
								TextTransparency = animate(function()
									return get(hideAll.boolean) and get(hideAll.all) and 1 or 0.5
								end,40,1)
							},
							new "Frame" {
								Size = UDim2.new(1,0,1,- 30 - (get(description) ~= nil and #get(description) > 0 and 22 or 0)),
								BackgroundTransparency = 1,
								ClipsDescendants = true,

								[children] = {
									new "UIPageLayout" {
										Name = "UIPageLayout2",
										EasingDirection = Enum.EasingDirection.InOut,
										EasingStyle = Enum.EasingStyle.Sine,
										ScrollWheelInputEnabled = true,
										FillDirection = Enum.FillDirection.Vertical,
										SortOrder = Enum.SortOrder.LayoutOrder,
										TweenTime = 0.2,
										Padding = UDim.new(0,6),
										Circular = false,

										[ref] = uipagelayout2
									},
									new "Frame" { -- Stats and Log
										ClipsDescendants = true,
										Name = "privateFrameList",
										Size = UDim2.fromScale(1,1),
										BackgroundTransparency = 1,

										[ref] = privateFrameList,

										[children] = {
											new "UIPageLayout" {
												EasingDirection = Enum.EasingDirection.InOut,
												EasingStyle = Enum.EasingStyle.Sine,
												ScrollWheelInputEnabled = false,
												SortOrder = Enum.SortOrder.LayoutOrder,
												TweenTime = 0,
												Padding = UDim.new(0,6),
												Circular = false
											},
											logPage(),
											new "ScrollingFrame" {
												Name = "stats",
												Size = UDim2.new(1,0,1,0),
												BackgroundTransparency = 1,
												ScrollBarThickness = 6,
												ScrollingDirection = Enum.ScrollingDirection.Y,
        										CanvasSize = UDim2.new(0,0,1,0),
												ScrollBarImageColor3 = theme.primary,
												BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",
												TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png",

												[ref] = stats,
									
												[children] = {
													UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Top,UDim.new(0,4)),
												}
											}
										}
									},
									new "Frame" { -- Tabs + tabFrameList
										Name = "publicFrameList",
										Size = UDim2.fromScale(1,1),
										BackgroundTransparency = 1,

										[ref] = publicFrameList,

										[children] = {
											UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Left,VA.Top, UDim.new(0,6)),
											new "Frame" { -- Tabs
												Size = computed(function()
													if get(ABC) and get(AWS) and get(ABC) - get(AWS) - 4 > 0 then
														return UDim2.new(1,0,0,52)
													end
													return UDim2.new(1,0,0,28)
												end),
												BackgroundTransparency = 1,

												[children] = {
													UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Center,VA.Top,UDim.new(0,4)),
													new "Frame" {
														Visible = computed(function()
															if get(ABC) and get(AWS) and get(ABC) - get(AWS) - 4 > 0 then
																return true
															end
															return false
														end),
														Size = UDim2.new(1,0,0,20),
														BackgroundTransparency = 1,

														[children] = {
															new "ImageButton" { -- Left
																AnchorPoint = Vector2.new(0,0.5),
																Position = UDim2.fromScale(0,0.5),
																Size = UDim2.fromOffset(20,20),
																BackgroundTransparency = 1,
																Image = icons.left,
																ImageColor3 = theme.image,
																ImageTransparency = animate(function()
																	if get(hideAll.boolean) and get(hideAll.all) then
																		return 1
																	end
																	return get(hovers.left) and 0.2 or 0.4
																end,40,1),

																[onevent "MouseEnter"] = function()
																	hovers.left:set(true)
																end,

																[onevent "MouseLeave"] = function()
																	hovers.left:set(false)
																	downs.left:set(false)
																end,

																[onevent "MouseButton1Down"] = function()
																	downs.left:set(true)
																end,

																[onevent "MouseButton1Up"] = function()
																	downs.left:set(false)
																end
															},
															new "ImageButton" { -- Right
																AnchorPoint = Vector2.new(1,0.5),
																Position = UDim2.fromScale(1,0.5),
																Size = UDim2.fromOffset(20,20),
																BackgroundTransparency = 1,
																Image = icons.right,
																ImageColor3 = theme.image,
																ImageTransparency = animate(function()
																	if get(hideAll.boolean) and get(hideAll.all) then
																		return 1
																	end
																	return get(hovers.right) and 0.2 or 0.4
																end,40,1),

																[onevent "MouseEnter"] = function()
																	hovers.right:set(true)
																end,

																[onevent "MouseLeave"] = function()
																	hovers.right:set(false)
																	downs.right:set(false)
																end,

																[onevent "MouseButton1Down"] = function()
																	downs.right:set(true)
																	local _tabButtonList = get(tabButtonList)
																	_tabButtonList.CanvasPosition = _tabButtonList.CanvasPosition + Vector2.new(5,0)
																end,

																[onevent "MouseButton1Up"] = function()
																	downs.right:set(false)
																end
															}
														}
													},
													new "ScrollingFrame" {
														Name = "tabButtonList",
														Size = UDim2.new(1,0,0,28),
														CanvasSize = UDim2.fromScale(1,0),
														AutomaticCanvasSize = Enum.AutomaticSize.X,
														ScrollingDirection = Enum.ScrollingDirection.X,
														ScrollBarThickness = 0,
														BackgroundTransparency = 1,

														[ref] = tabButtonList,

														[onevent "ChildAdded"] = function()
															ABC:set(get(tabButtonList).AbsoluteCanvasSize.X)
															AWS:set(get(tabButtonList).AbsoluteWindowSize.X)
														end,

														[children] = {
															UIPadding(0,2),
															UIListLayout(SO.LayoutOrder,FD.Horizontal,HA.Left,VA.Center,UDim.new(0,6))
														}
													}
												}
											},
											new "Frame" {
												ClipsDescendants = true,
												Name = "tabFrameList",
												Size = computed(function()
													return UDim2.new(1,0,1,(get(ABC) and get(AWS) and get(ABC) - get(AWS) - 4 > 0) and - 58 or -34)
												end),
												BackgroundTransparency = 1,
		
												[ref] = tabFrameList,
		
												[children] = {
													new "UIPageLayout" {
														EasingDirection = Enum.EasingDirection.InOut,
														EasingStyle = Enum.EasingStyle.Sine,
														ScrollWheelInputEnabled = false,
														SortOrder = Enum.SortOrder.LayoutOrder,
														TweenTime = 0.2,
														Padding = UDim.new(0,6),
														Circular = false,
		
														[ref] = uipagelayout
													}
												}
											}
										}
									}
								}
							}
						}
					},
					new "ImageButton" { -- Resizer
						Name = "Resizer",
						AnchorPoint = Vector2.new(1,1),
						Position = UDim2.fromScale(1,1),
						Size = UDim2.fromOffset(10,10),
						BackgroundTransparency = 1,
						Rotation = 45,
						Image = icons.chevronRight,
						ImageColor3 = theme.image,

						[ref] = resizer,

						[onevent "InputBegan"] = function(input)
							if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
								local _resizer = get(resizer)
								local oldDistance = Vector2.new(9e9,9e9)
								local oldAbsolutePosition = _resizer.AbsolutePosition
								local startingX = get(size).X.Offset
								local startingY = get(size).Y.Offset
								heartbeat = heartbeat or RunService.Heartbeat:Connect(function()
									if get(isResizing) then
										local distance = UserInputService:GetMouseLocation() - oldAbsolutePosition
										if distance ~= oldDistance then
											oldDistance = distance
											size:set(UDim2.fromOffset(math.clamp(distance.X + startingX - 10,450,9e9), math.clamp(distance.Y + startingY - 10,500,9e9)))
										end
									end
								end)
								connections.add(heartbeat)
								isResizing:set(true)

								local changed
								changed = connections.add(input.Changed:Connect(function()
									if input.UserInputState == Enum.UserInputState.End then
										task.wait()
										isResizing:set(false)
										if heartbeat then
											heartbeat:Disconnect()
											heartbeat = nil
										end
										changed:Disconnect()
									end
								end))
							end
						end
					},
					new "Frame" {
						Name = "capture",
						Size = UDim2.fromScale(1,1),
						BackgroundTransparency = 1,

						[ref] = capture,

						[children] = {
							UICorner(6)
						}
					}
				}
			},
			new "Frame" {
				Name = "notificationList",
				BackgroundTransparency = 1,
				Size = UDim2.new(0,2,1,-20),
				Position = UDim2.new(1,-5,0.5,0),
				AnchorPoint = Vector2.new(1,0.5),
				ClipsDescendants = false,

				[ref] = notificationList,

				[children] = {
					UIListLayout(SO.LayoutOrder,FD.Vertical,HA.Right,VA.Bottom)
				}
			}
		}

	}
	get(uipagelayout2):JumpTo(get(publicFrameList))

	local thread1 = coroutine.create(function()
		local _tabButtonList = get(tabButtonList)
		while task.wait() do
			if get(downs.right) then
				_tabButtonList.CanvasPosition = _tabButtonList.CanvasPosition + Vector2.new(10,0)
				task.wait()
			end
			if get(downs.left) then
				_tabButtonList.CanvasPosition = _tabButtonList.CanvasPosition - Vector2.new(10,0)
				task.wait()
			end
		end
	end)
	coroutine.resume(thread1)
	connections.add(thread1)

	drag(get(container), 15)
	connections.add(orbs(25, get(container).CanvasGroup))
end
end)() end,
    [32] = function()local wax,script,require=ImportGlobals(32)local ImportGlobals return (function(...)return setmetatable({},{
    __index = function(self, key)
        if script:FindFirstChild(key) then
            return require(script[key])
        else
            error("no utility: "..key)
        end
    end
})
end)() end,
    [33] = function()local wax,script,require=ImportGlobals(33)local ImportGlobals return (function(...)local Fusion = require(script.Parent.Parent.Bundles.Fusion)

return function(AspectRatio:number, AspectType:Enum.AspectType, DominantAxis:Enum.DominantAxis)
    AspectType = AspectType or Enum.AspectType.FitWithinMaxSize
    DominantAxis = DominantAxis or Enum.DominantAxis.Height
    return Fusion.New "UIAspectRatioConstraint" {
        AspectRatio = AspectRatio,
        AspectType = AspectType,
        DominantAxis = DominantAxis
    }
end
end)() end,
    [34] = function()local wax,script,require=ImportGlobals(34)local ImportGlobals return (function(...)local Fusion = require(script.Parent.Parent.Bundles.Fusion)

return function(offset, scale)
    scale = scale or 0
    return Fusion.New "UICorner" {
        CornerRadius = UDim.new(scale, offset)
    }
end
end)() end,
    [35] = function()local wax,script,require=ImportGlobals(35)local ImportGlobals return (function(...)local Fusion = require(script.Parent.Parent.Bundles.Fusion)

return function(SortOrder, FillDirection,HorizontalAlignment,VerticalAlignment,Padding)
    return Fusion.New "UIListLayout" {
        SortOrder = SortOrder or Enum.SortOrder.LayoutOrder,
        FillDirection = FillDirection or Enum.FillDirection.Vertical,
        HorizontalAlignment = HorizontalAlignment or Enum.HorizontalAlignment.Center,
        VerticalAlignment = VerticalAlignment or Enum.VerticalAlignment.Center,
        Padding = Padding or UDim.new(0,0)
    }
end
end)() end,
    [36] = function()local wax,script,require=ImportGlobals(36)local ImportGlobals return (function(...)local Fusion = require(script.Parent.Parent.Bundles.Fusion)

return function(...)
    local args = {...}
    if #args == 1 then
        return Fusion.New "UIPadding" {
            PaddingLeft = UDim.new(0,...),
            PaddingRight = UDim.new(0,...),
            PaddingTop = UDim.new(0,...),
            PaddingBottom = UDim.new(0,...),
        }
    elseif #args == 2 then
        return Fusion.New "UIPadding" {
            PaddingTop = UDim.new(0,args[1]),
            PaddingRight = UDim.new(0,args[2]),
            PaddingBottom = UDim.new(0,args[1]),
            PaddingLeft = UDim.new(0,args[2]),
        }
    elseif #args == 3 then
        return Fusion.New "UIPadding" {
            PaddingTop = UDim.new(0,args[1]),
            PaddingRight = UDim.new(0,args[2]),
            PaddingBottom = UDim.new(0,args[3]),
            PaddingLeft = UDim.new(0,args[2]),
        }
    else
        return Fusion.New "UIPadding" {
            PaddingTop = UDim.new(0,args[1]),
            PaddingRight = UDim.new(0,args[2]),
            PaddingBottom = UDim.new(0,args[3]),
            PaddingLeft = UDim.new(0,args[4]),
        }
    end
end
end)() end,
    [37] = function()local wax,script,require=ImportGlobals(37)local ImportGlobals return (function(...)local Fusion = require(script.Parent.Parent.Bundles.Fusion)

return function(MinText:number?, MaxText:number?)
    return Fusion.New "UITextSizeConstraint" {
        MinTextSize = MinText,
        MaxTextSize = MaxText,
    }
end
end)() end,
    [38] = function()local wax,script,require=ImportGlobals(38)local ImportGlobals return (function(...)return setmetatable({},{
    __index = function(self, key)
        if script:FindFirstChild(key) then
            return require(script[key])
        else
            error("no utility: "..key)
        end
    end
})
end)() end,
    [39] = function()local wax,script,require=ImportGlobals(39)local ImportGlobals return (function(...)local Fusion = require(script.Parent.Parent.Bundles.Fusion)
local computed,spring = Fusion.Computed,Fusion.Spring

return function(callback, speed, damping)
	return spring(computed(callback), speed, damping)
end
end)() end,
    [40] = function()local wax,script,require=ImportGlobals(40)local ImportGlobals return (function(...)local connections = {}
local connectionsFunction = {}

local services = require(script.Parent.Parent.Bundles.services)
local ContextActionService = services.ContextActionService

function connectionsFunction.add(...)
    for _,v in {...} do
        table.insert(connections, v)
    end
    return ...
end
function connectionsFunction.cleanUp()
    --print(`{#connections} connections cleaned up`)
    for i,v in connections do
        if typeof(v) == "string" then
            pcall(function()ContextActionService:UnbindAction(v)end)
        elseif typeof(v) == "thread" then
            coroutine.close(v)
        elseif typeof(v) == "RBXScriptConnection" then
            v:Disconnect()
        elseif typeof(v) == "function" then
            v()
        end
        connections[i] = nil
    end
end

return connectionsFunction
end)() end,
    [41] = function()local wax,script,require=ImportGlobals(41)local ImportGlobals return (function(...)local fonts = {
    ["Inter"] = "rbxassetid://12187365364",
    ["Montserrat"] = "rbxassetid://11702779517"
}

return function(font:string, weight:Enum.FontWeight?, style:Enum.FontStyle?)
    assert(font, "font required")
    weight = weight or Enum.FontWeight.Regular
    style = style or Enum.FontStyle.Normal
    if fonts[font] then
        return Font.new(fonts[font],weight,style)
    else
        error("no font:", font)
    end
end
end)() end,
    [42] = function()local wax,script,require=ImportGlobals(42)local ImportGlobals return (function(...)---@diagnostic disable: undefined-global
local functions = {}

local filesystem = {}

function functions.cloneref(service)
    if cloneref then
        return cloneref(service)
    else
        return service
    end
end

function functions.gethui(...)
    return gethui(...) or nil
end

functions.getgenv = getgenv or nil

function functions.isfile(string:string)
    if isfile then
        return isfile(string)
    else
        local currentPath = filesystem
        local isNil = false
        if string:find("/") then
            for _,v in string:split("/") do
                currentPath = currentPath[v]
                if currentPath == nil then
                    isNil = true
                    break
                end
            end
        else
            currentPath = currentPath[string]
            if currentPath == nil then
                isNil = true
            end
        end
        if isNil then
            return false
        end
        return true
    end
end
function functions.isfolder(string:string)
    if isfolder then
        return isfolder(string)
    else
        local currentPath = filesystem
        local isNil = false
        if string:find("/") then
            for _,v in string:split("/") do
                currentPath = currentPath[v]
                if currentPath == nil then
                    isNil = true
                    break
                end
            end
        else
            currentPath = currentPath[string]
            if currentPath == nil then
                isNil = true
            end
        end
        if isNil then
            return false
        end
        return true
    end
end
function functions.writefile(string:string, content:string)
    if writefile then
        return writefile(string, content)
    else
        local currentPath = filesystem
        for _,v in string:split("/") do
            if typeof(currentPath[v]) == "table" then
                currentPath = currentPath[v]
            elseif (typeof(currentPath[v]) == "string" or typeof(currentPath[v]) == "nil")then
                currentPath[v] = content
            end
        end
    end
end
function functions.delfile(string:string)
    if delfile then
        return delfile(string)
    else
        local currentPath = filesystem
        local oldestCorrect = currentPath
        local splitString = string:split("/")
        for _,v in splitString do
            currentPath = currentPath[v]
            if typeof(currentPath) == "string" then
                oldestCorrect[v] = nil
            else
                oldestCorrect = currentPath
            end
        end
    end
end
function functions.readfile(string:string)
    if readfile then
        return readfile(string)
    else
        local currentPath = filesystem
        local isNil = false
        if string:find("/") then
            for _,v in string:split("/") do
                currentPath = currentPath[v]
                if currentPath == nil then
                    isNil = true
                    break
                end
            end
        else
            currentPath = currentPath[string]
        end
        if isNil then
            warn("readfile: no file")
            return nil
        end
        return currentPath
    end
end
function functions.makefolder(string:string)
    if makefolder then
        return makefolder(string)
    else
        local currentPath = filesystem
        if string:find("/") then
            for _,v in string:split("/") do
                if not currentPath[v] then
                    currentPath[v] = {}
                    break
                else
                    currentPath = currentPath[v]
                end
            end
        else
            currentPath[string] = {}
        end
    end
end
function functions.listfiles(string:string)
    if listfiles then
        return listfiles(string)
    else
        local currentPath = filesystem
        local isNil = false
        if string:find("/") then
            for _,v in string:split("/") do
                currentPath = currentPath[v]
                if currentPath == nil then
                    isNil = true
                    break
                end
            end
        else
            currentPath = currentPath[string]
        end
        if isNil or typeof(currentPath) == "string" then
            warn("no folder exists")
            return nil
        end
        local cleaned = {}
        for i,v in currentPath do
            if typeof(v) == "string" then
                table.insert(cleaned, i)
            end
        end
        return cleaned
    end
end
return functions
end)() end,
    [43] = function()local wax,script,require=ImportGlobals(43)local ImportGlobals return (function(...)return function(o,s)
	local services = require(script.Parent.Parent.Bundles.services)
	local DRAG_SPEED = s or 10
	local UserInputService = services.UserInputService
	local runService = services.RunService
	local gui = o
	local dragging, lastMousePos, lastGoalPos, startPos
	local function Lerp(a, b, m)
		return a + (b - a) * m
	end

	local onEnd = Instance.new("BindableEvent")

	local function Update(dt)
		if not (startPos) then return end;

		if not (dragging) and (lastGoalPos) then
			gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, lastGoalPos.X.Offset, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, lastGoalPos.Y.Offset, dt * DRAG_SPEED))
			return
		end

		local delta = (lastMousePos - UserInputService:GetMouseLocation())

		local xGoal = (startPos.X.Offset - delta.X)
		local yGoal = (startPos.Y.Offset - delta.Y)

		lastGoalPos = UDim2.new(startPos.X.Scale, xGoal, startPos.Y.Scale, yGoal)

		gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, xGoal, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, yGoal, dt * DRAG_SPEED))
	end

	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			startPos = gui.Position
			lastMousePos = UserInputService:GetMouseLocation()
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					onEnd:Fire()
					dragging = false
				end
			end)
		end
	end)
	local connection = runService.Heartbeat:Connect(Update)
	return connection, onEnd.Event
end

end)() end,
    [44] = function()local wax,script,require=ImportGlobals(44)local ImportGlobals return (function(...)return function(seconds, decimal)
    decimal = decimal or 0
    local dayCount = math.floor(seconds/(60*60*24))
    seconds -= dayCount*(60*60*24)
    local hourCount = math.floor(seconds/(60*60))
    seconds -= hourCount*(60*60)
    if decimal == 0 then
        seconds = math.round(seconds)
    else
        seconds = tonumber(string.format('%.' .. decimal .. 'f', seconds))
    end
    return dayCount, hourCount, seconds
end
end)() end,
    [45] = function()local wax,script,require=ImportGlobals(45)local ImportGlobals return (function(...)return function(value, dependency)
	if typeof(value) == "table" and value.type == "State" then
		return value:get(dependency)
	end
	return value
end
end)() end,
    [46] = function()local wax,script,require=ImportGlobals(46)local ImportGlobals return (function(...)return function(text:string, properties)
    text = text or ""
    local params = Instance.new("GetTextBoundsParams")
    params.Text = text
    params.Font = properties.Font
    params.Size = properties.Size
    params.Width = properties.Width
    local TextService = require(script.Parent.Parent.Bundles.services).TextService
    return TextService:GetTextBoundsAsync(params)
end
end)() end,
    [47] = function()local wax,script,require=ImportGlobals(47)local ImportGlobals return (function(...)local characters = string.split("qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890","")
local function randomString(length)
    if length > 0 then
        return randomString(length - 1) .. characters[math.random(1, #characters)]
    else
        return ""
    end
end
return randomString
end)() end,
    [48] = function()local wax,script,require=ImportGlobals(48)local ImportGlobals return (function(...)local references = {}
local returnFunctions = {}
local observe = require(script.Parent.Parent.Bundles.Fusion).Observer

local get = require(script.Parent.get)

function returnFunctions.add(...)
    for _,REF in {...} do
        if typeof(get(REF)) ~= "Instance" then
            observe(REF):onChange(function()
                if typeof(get(REF)) == "Instance" then
                    if not references[get(REF).Name] then
                        references[get(REF).Name] = get(REF)
                    else
                        warn(get(REF).Name, " REF was already added")
                    end
                end
            end)
        else
            if not references[get(REF).Name] then
                references[get(REF).Name] = get(REF)
            else
                warn(get(REF).Name, " REF was already added")
            end
        end
    end
end
function returnFunctions.get(name)
    if references[name] then
        return references[name]
    end
end
function returnFunctions.remove(name)
    if references[name] then
        references[name] = nil
    else
        warn(name, "isn't in the references list")
    end
end
function returnFunctions.clear()
    for i,v in references do
        references[i] = nil
        if typeof(v) == "Instance" then
            v:Destroy()
        end
    end
end

return returnFunctions
end)() end,
    [49] = function()local wax,script,require=ImportGlobals(49)local ImportGlobals return (function(...)local Fusion = require(script.Parent.Parent.Bundles.Fusion)
local computed = Fusion.Computed

return function(callback,style)
	return Fusion.Tween(computed(callback), style)
end
end)() end,
    [50] = function()local wax,script,require=ImportGlobals(50)local ImportGlobals return (function(...)return function(variables:table, correctVariables:table, ignoreList:table?):any
    ignoreList = ignoreList or {}
    local didPass = true
    local itemsThatFailed = {}
    for key, correctType in correctVariables do
        if (variables[key] == nil or typeof(variables[key]) ~= typeof(correctType)) and not table.find(ignoreList, key) then
            didPass = false
            table.insert(itemsThatFailed,`{key} expected: {typeof(correctType)} got: {typeof(variables[key])}`)
        end
    end
    return didPass, itemsThatFailed
end
end)() end
} -- [RefId] = Closure

-- Holds the actual DOM data
local ObjectTree = {
    {
        1,
        2,
        {
            "Chrono"
        },
        {
            {
                10,
                1,
                {
                    "components"
                },
                {
                    {
                        15,
                        2,
                        {
                            "group"
                        }
                    },
                    {
                        22,
                        2,
                        {
                            "notification"
                        }
                    },
                    {
                        12,
                        2,
                        {
                            "colorpicker"
                        }
                    },
                    {
                        18,
                        2,
                        {
                            "label"
                        }
                    },
                    {
                        21,
                        2,
                        {
                            "module"
                        }
                    },
                    {
                        17,
                        2,
                        {
                            "keybindList"
                        }
                    },
                    {
                        23,
                        2,
                        {
                            "orbs"
                        }
                    },
                    {
                        26,
                        2,
                        {
                            "tab"
                        }
                    },
                    {
                        20,
                        2,
                        {
                            "logPage"
                        }
                    },
                    {
                        19,
                        2,
                        {
                            "list"
                        }
                    },
                    {
                        11,
                        2,
                        {
                            "button"
                        }
                    },
                    {
                        29,
                        2,
                        {
                            "warn"
                        }
                    },
                    {
                        25,
                        2,
                        {
                            "slider"
                        }
                    },
                    {
                        13,
                        2,
                        {
                            "divider"
                        }
                    },
                    {
                        28,
                        2,
                        {
                            "toggle"
                        }
                    },
                    {
                        16,
                        2,
                        {
                            "keybind"
                        }
                    },
                    {
                        14,
                        2,
                        {
                            "dropdown"
                        }
                    },
                    {
                        27,
                        2,
                        {
                            "textbox"
                        }
                    },
                    {
                        24,
                        2,
                        {
                            "paragraph"
                        }
                    }
                }
            },
            {
                38,
                2,
                {
                    "utilities"
                },
                {
                    {
                        44,
                        2,
                        {
                            "formatTime"
                        }
                    },
                    {
                        43,
                        2,
                        {
                            "drag"
                        }
                    },
                    {
                        50,
                        2,
                        {
                            "typecheck"
                        }
                    },
                    {
                        49,
                        2,
                        {
                            "tween"
                        }
                    },
                    {
                        48,
                        2,
                        {
                            "references"
                        }
                    },
                    {
                        47,
                        2,
                        {
                            "randomString"
                        }
                    },
                    {
                        42,
                        2,
                        {
                            "customFunctions"
                        }
                    },
                    {
                        46,
                        2,
                        {
                            "getStringBounds"
                        }
                    },
                    {
                        41,
                        2,
                        {
                            "customFont"
                        }
                    },
                    {
                        39,
                        2,
                        {
                            "animate"
                        }
                    },
                    {
                        40,
                        2,
                        {
                            "connections"
                        }
                    },
                    {
                        45,
                        2,
                        {
                            "get"
                        }
                    }
                }
            },
            {
                30,
                1,
                {
                    "layouts"
                },
                {
                    {
                        31,
                        2,
                        {
                            "main"
                        }
                    }
                }
            },
            {
                2,
                2,
                {
                    "Bundles"
                },
                {
                    {
                        5,
                        2,
                        {
                            "flags"
                        }
                    },
                    {
                        3,
                        2,
                        {
                            "Fusion"
                        }
                    },
                    {
                        7,
                        2,
                        {
                            "services"
                        }
                    },
                    {
                        4,
                        2,
                        {
                            "data"
                        }
                    },
                    {
                        8,
                        2,
                        {
                            "themeSystem"
                        },
                        {
                            {
                                9,
                                2,
                                {
                                    "default"
                                }
                            }
                        }
                    },
                    {
                        6,
                        2,
                        {
                            "icons"
                        }
                    }
                }
            },
            {
                32,
                2,
                {
                    "simpleElements"
                },
                {
                    {
                        35,
                        2,
                        {
                            "UIListLayout"
                        }
                    },
                    {
                        36,
                        2,
                        {
                            "UIPadding"
                        }
                    },
                    {
                        34,
                        2,
                        {
                            "UICorner"
                        }
                    },
                    {
                        37,
                        2,
                        {
                            "UITextSizeConstraint"
                        }
                    },
                    {
                        33,
                        2,
                        {
                            "UIAspectRatioConstraint"
                        }
                    }
                }
            }
        }
    }
}

-- Line offsets for debugging (only included when minifyTables is false)
local LineOffsets = {
    8,
    301,
    311,
    314,
    388,
    627,
    650,
    662,
    724,
    [11] = 757,
    [12] = 1013,
    [13] = 1728,
    [14] = 1774,
    [15] = 2453,
    [16] = 2705,
    [17] = 3130,
    [18] = 3225,
    [19] = 3338,
    [20] = 3398,
    [21] = 3549,
    [22] = 3707,
    [23] = 4011,
    [24] = 4112,
    [25] = 4265,
    [26] = 4743,
    [27] = 4953,
    [28] = 5368,
    [29] = 5868,
    [31] = 5893,
    [32] = 6461,
    [33] = 6471,
    [34] = 6483,
    [35] = 6492,
    [36] = 6504,
    [37] = 6539,
    [38] = 6548,
    [39] = 6558,
    [40] = 6565,
    [41] = 6595,
    [42] = 6611,
    [43] = 6788,
    [44] = 6837,
    [45] = 6851,
    [46] = 6858,
    [47] = 6869,
    [48] = 6879,
    [49] = 6929,
    [50] = 6936
}

-- Misc AOT variable imports
local WaxVersion = "0.4.1"
local EnvName = "WaxRuntime"

-- ++++++++ RUNTIME IMPL BELOW ++++++++ --

-- Localizing certain libraries and built-ins for runtime efficiency
local string, task, setmetatable, error, next, table, unpack, coroutine, script, type, require, pcall, tostring, tonumber, _VERSION =
      string, task, setmetatable, error, next, table, unpack, coroutine, script, type, require, pcall, tostring, tonumber, _VERSION

local table_insert = table.insert
local table_remove = table.remove
local table_freeze = table.freeze or function(t) return t end -- lol

local coroutine_wrap = coroutine.wrap

local string_sub = string.sub
local string_match = string.match
local string_gmatch = string.gmatch

-- The Lune runtime has its own `task` impl, but it must be imported by its builtin
-- module path, "@lune/task"
if _VERSION and string_sub(_VERSION, 1, 4) == "Lune" then
    local RequireSuccess, LuneTaskLib = pcall(require, "@lune/task")
    if RequireSuccess and LuneTaskLib then
        task = LuneTaskLib
    end
end

local task_defer = task and task.defer

-- If we're not running on the Roblox engine, we won't have a `task` global
local Defer = task_defer or function(f, ...)
    coroutine_wrap(f)(...)
end

-- ClassName "IDs"
local ClassNameIdBindings = {
    [1] = "Folder",
    [2] = "ModuleScript",
    [3] = "Script",
    [4] = "LocalScript",
    [5] = "StringValue",
}

local RefBindings = {} -- [RefId] = RealObject

local ScriptClosures = {}
local ScriptClosureRefIds = {} -- [ScriptClosure] = RefId
local StoredModuleValues = {}
local ScriptsToRun = {}

-- wax.shared __index/__newindex
local SharedEnvironment = {}

-- We're creating 'fake' instance refs soley for traversal of the DOM for require() compatibility
-- It's meant to be as lazy as possible
local RefChildren = {} -- [Ref] = {ChildrenRef, ...}

-- Implemented instance methods
local InstanceMethods = {
    GetFullName = { {}, function(self)
        local Path = self.Name
        local ObjectPointer = self.Parent

        while ObjectPointer do
            Path = ObjectPointer.Name .. "." .. Path

            -- Move up the DOM (parent will be nil at the end, and this while loop will stop)
            ObjectPointer = ObjectPointer.Parent
        end

        return Path
    end},

    GetChildren = { {}, function(self)
        local ReturnArray = {}

        for Child in next, RefChildren[self] do
            table_insert(ReturnArray, Child)
        end

        return ReturnArray
    end},

    GetDescendants = { {}, function(self)
        local ReturnArray = {}

        for Child in next, RefChildren[self] do
            table_insert(ReturnArray, Child)

            for _, Descendant in next, Child:GetDescendants() do
                table_insert(ReturnArray, Descendant)
            end
        end

        return ReturnArray
    end},

    FindFirstChild = { {"string", "boolean?"}, function(self, name, recursive)
        local Children = RefChildren[self]

        for Child in next, Children do
            if Child.Name == name then
                return Child
            end
        end

        if recursive then
            for Child in next, Children do
                -- Yeah, Roblox follows this behavior- instead of searching the entire base of a
                -- ref first, the engine uses a direct recursive call
                return Child:FindFirstChild(name, true)
            end
        end
    end},

    FindFirstAncestor = { {"string"}, function(self, name)
        local RefPointer = self.Parent
        while RefPointer do
            if RefPointer.Name == name then
                return RefPointer
            end

            RefPointer = RefPointer.Parent
        end
    end},

    -- Just to implement for traversal usage
    WaitForChild = { {"string", "number?"}, function(self, name)
        return self:FindFirstChild(name)
    end},
}

-- "Proxies" to instance methods, with err checks etc
local InstanceMethodProxies = {}
for MethodName, MethodObject in next, InstanceMethods do
    local Types = MethodObject[1]
    local Method = MethodObject[2]

    local EvaluatedTypeInfo = {}
    for ArgIndex, TypeInfo in next, Types do
        local ExpectedType, IsOptional = string_match(TypeInfo, "^([^%?]+)(%??)")
        EvaluatedTypeInfo[ArgIndex] = {ExpectedType, IsOptional}
    end

    InstanceMethodProxies[MethodName] = function(self, ...)
        if not RefChildren[self] then
            error("Expected ':' not '.' calling member function " .. MethodName, 2)
        end

        local Args = {...}
        for ArgIndex, TypeInfo in next, EvaluatedTypeInfo do
            local RealArg = Args[ArgIndex]
            local RealArgType = type(RealArg)
            local ExpectedType, IsOptional = TypeInfo[1], TypeInfo[2]

            if RealArg == nil and not IsOptional then
                error("Argument " .. RealArg .. " missing or nil", 3)
            end

            if ExpectedType ~= "any" and RealArgType ~= ExpectedType and not (RealArgType == "nil" and IsOptional) then
                error("Argument " .. ArgIndex .. " expects type \"" .. ExpectedType .. "\", got \"" .. RealArgType .. "\"", 2)
            end
        end

        return Method(self, ...)
    end
end

local function CreateRef(className, name, parent)
    -- `name` and `parent` can also be set later by the init script if they're absent

    -- Extras
    local StringValue_Value

    -- Will be set to RefChildren later aswell
    local Children = setmetatable({}, {__mode = "k"})

    -- Err funcs
    local function InvalidMember(member)
        error(member .. " is not a valid (virtual) member of " .. className .. " \"" .. name .. "\"", 3)
    end
    local function ReadOnlyProperty(property)
        error("Unable to assign (virtual) property " .. property .. ". Property is read only", 3)
    end

    local Ref = {}
    local RefMetatable = {}

    RefMetatable.__metatable = false

    RefMetatable.__index = function(_, index)
        if index == "ClassName" then -- First check "properties"
            return className
        elseif index == "Name" then
            return name
        elseif index == "Parent" then
            return parent
        elseif className == "StringValue" and index == "Value" then
            -- Supporting StringValue.Value for Rojo .txt file conv
            return StringValue_Value
        else -- Lastly, check "methods"
            local InstanceMethod = InstanceMethodProxies[index]

            if InstanceMethod then
                return InstanceMethod
            end
        end

        -- Next we'll look thru child refs
        for Child in next, Children do
            if Child.Name == index then
                return Child
            end
        end

        -- At this point, no member was found; this is the same err format as Roblox
        InvalidMember(index)
    end

    RefMetatable.__newindex = function(_, index, value)
        -- __newindex is only for props fyi
        if index == "ClassName" then
            ReadOnlyProperty(index)
        elseif index == "Name" then
            name = value
        elseif index == "Parent" then
            -- We'll just ignore the process if it's trying to set itself
            if value == Ref then
                return
            end

            if parent ~= nil then
                -- Remove this ref from the CURRENT parent
                RefChildren[parent][Ref] = nil
            end

            parent = value

            if value ~= nil then
                -- And NOW we're setting the new parent
                RefChildren[value][Ref] = true
            end
        elseif className == "StringValue" and index == "Value" then
            -- Supporting StringValue.Value for Rojo .txt file conv
            StringValue_Value = value
        else
            -- Same err as __index when no member is found
            InvalidMember(index)
        end
    end

    RefMetatable.__tostring = function()
        return name
    end

    setmetatable(Ref, RefMetatable)

    RefChildren[Ref] = Children

    if parent ~= nil then
        RefChildren[parent][Ref] = true
    end

    return Ref
end

-- Create real ref DOM from object tree
local function CreateRefFromObject(object, parent)
    local RefId = object[1]
    local ClassNameId = object[2]
    local Properties = object[3] -- Optional
    local Children = object[4] -- Optional

    local ClassName = ClassNameIdBindings[ClassNameId]

    local Name = Properties and table_remove(Properties, 1) or ClassName

    local Ref = CreateRef(ClassName, Name, parent) -- 3rd arg may be nil if this is from root
    RefBindings[RefId] = Ref

    if Properties then
        for PropertyName, PropertyValue in next, Properties do
            Ref[PropertyName] = PropertyValue
        end
    end

    if Children then
        for _, ChildObject in next, Children do
            CreateRefFromObject(ChildObject, Ref)
        end
    end

    return Ref
end

local RealObjectRoot = CreateRef("Folder", "[" .. EnvName .. "]")
for _, Object in next, ObjectTree do
    CreateRefFromObject(Object, RealObjectRoot)
end

-- Now we'll set script closure refs and check if they should be ran as a BaseScript
for RefId, Closure in next, ClosureBindings do
    local Ref = RefBindings[RefId]

    ScriptClosures[Ref] = Closure
    ScriptClosureRefIds[Ref] = RefId

    local ClassName = Ref.ClassName
    if ClassName == "LocalScript" or ClassName == "Script" then
        table_insert(ScriptsToRun, Ref)
    end
end

local function LoadScript(scriptRef)
    local ScriptClassName = scriptRef.ClassName

    -- First we'll check for a cached module value (packed into a tbl)
    local StoredModuleValue = StoredModuleValues[scriptRef]
    if StoredModuleValue and ScriptClassName == "ModuleScript" then
        return unpack(StoredModuleValue)
    end

    local Closure = ScriptClosures[scriptRef]

    local function FormatError(originalErrorMessage)
        originalErrorMessage = tostring(originalErrorMessage)

        local VirtualFullName = scriptRef:GetFullName()

        -- Check for vanilla/Roblox format
        local OriginalErrorLine, BaseErrorMessage = string_match(originalErrorMessage, "[^:]+:(%d+): (.+)")

        if not OriginalErrorLine or not LineOffsets then
            return VirtualFullName .. ":*: " .. (BaseErrorMessage or originalErrorMessage)
        end

        OriginalErrorLine = tonumber(OriginalErrorLine)

        local RefId = ScriptClosureRefIds[scriptRef]
        local LineOffset = LineOffsets[RefId]

        local RealErrorLine = OriginalErrorLine - LineOffset + 1
        if RealErrorLine < 0 then
            RealErrorLine = "?"
        end

        return VirtualFullName .. ":" .. RealErrorLine .. ": " .. BaseErrorMessage
    end

    -- If it's a BaseScript, we'll just run it directly!
    if ScriptClassName == "LocalScript" or ScriptClassName == "Script" then
        local RunSuccess, ErrorMessage = pcall(Closure)
        if not RunSuccess then
            error(FormatError(ErrorMessage), 0)
        end
    else
        local PCallReturn = {pcall(Closure)}

        local RunSuccess = table_remove(PCallReturn, 1)
        if not RunSuccess then
            local ErrorMessage = table_remove(PCallReturn, 1)
            error(FormatError(ErrorMessage), 0)
        end

        StoredModuleValues[scriptRef] = PCallReturn
        return unpack(PCallReturn)
    end
end

-- We'll assign the actual func from the top of this output for flattening user globals at runtime
-- Returns (in a tuple order): wax, script, require
function ImportGlobals(refId)
    local ScriptRef = RefBindings[refId]

    local function RealCall(f, ...)
        local PCallReturn = {pcall(f, ...)}

        local CallSuccess = table_remove(PCallReturn, 1)
        if not CallSuccess then
            error(PCallReturn[1], 3)
        end

        return unpack(PCallReturn)
    end

    -- `wax.shared` index
    local WaxShared = table_freeze(setmetatable({}, {
        __index = SharedEnvironment,
        __newindex = function(_, index, value)
            SharedEnvironment[index] = value
        end,
        __len = function()
            return #SharedEnvironment
        end,
        __iter = function()
            return next, SharedEnvironment
        end,
    }))

    local Global_wax = table_freeze({
        -- From AOT variable imports
        version = WaxVersion,
        envname = EnvName,

        shared = WaxShared,

        -- "Real" globals instead of the env set ones
        script = script,
        require = require,
    })

    local Global_script = ScriptRef

    local function Global_require(module, ...)
        local ModuleArgType = type(module)

        local ErrorNonModuleScript = "Attempted to call require with a non-ModuleScript"
        local ErrorSelfRequire = "Attempted to call require with self"

        if ModuleArgType == "table" and RefChildren[module]  then
            if module.ClassName ~= "ModuleScript" then
                error(ErrorNonModuleScript, 2)
            elseif module == ScriptRef then
                error(ErrorSelfRequire, 2)
            end

            return LoadScript(module)
        elseif ModuleArgType == "string" and string_sub(module, 1, 1) ~= "@" then
            -- The control flow on this SUCKS

            if #module == 0 then
                error("Attempted to call require with empty string", 2)
            end

            local CurrentRefPointer = ScriptRef

            if string_sub(module, 1, 1) == "/" then
                CurrentRefPointer = RealObjectRoot
            elseif string_sub(module, 1, 2) == "./" then
                module = string_sub(module, 3)
            end

            local PreviousPathMatch
            for PathMatch in string_gmatch(module, "([^/]*)/?") do
                local RealIndex = PathMatch
                if PathMatch == ".." then
                    RealIndex = "Parent"
                end

                -- Don't advance dir if it's just another "/" either
                if RealIndex ~= "" then
                    local ResultRef = CurrentRefPointer:FindFirstChild(RealIndex)
                    if not ResultRef then
                        local CurrentRefParent = CurrentRefPointer.Parent
                        if CurrentRefParent then
                            ResultRef = CurrentRefParent:FindFirstChild(RealIndex)
                        end
                    end

                    if ResultRef then
                        CurrentRefPointer = ResultRef
                    elseif PathMatch ~= PreviousPathMatch and PathMatch ~= "init" and PathMatch ~= "init.server" and PathMatch ~= "init.client" then
                        error("Virtual script path \"" .. module .. "\" not found", 2)
                    end
                end

                -- For possible checks next cycle
                PreviousPathMatch = PathMatch
            end

            if CurrentRefPointer.ClassName ~= "ModuleScript" then
                error(ErrorNonModuleScript, 2)
            elseif CurrentRefPointer == ScriptRef then
                error(ErrorSelfRequire, 2)
            end

            return LoadScript(CurrentRefPointer)
        end

        return RealCall(require, module, ...)
    end

    -- Now, return flattened globals ready for direct runtime exec
    return Global_wax, Global_script, Global_require
end

for _, ScriptRef in next, ScriptsToRun do
    Defer(LoadScript, ScriptRef)
end

-- AoT adjustment: Load init module (MainModule behavior)
return LoadScript(RealObjectRoot:GetChildren()[1])
